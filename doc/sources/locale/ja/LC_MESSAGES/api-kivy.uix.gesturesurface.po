# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.uix.gesturesurface.rst:3
msgid "Gesture Surface"
msgstr ""

#: kivy.uix.gesturesurface:7 of
msgid ""
"This is experimental and subject to change as long as this warning notice"
" is present."
msgstr ""

#: kivy.uix.gesturesurface:10 of
msgid ""
"See :file:`kivy/examples/demo/multistroke/main.py` for a complete "
"application example."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:1 of
msgid ""
"Container object that stores information about a gesture. It has various "
"properties that are updated by `GestureSurface` as drawing progresses."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer of
msgid "Arguments"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:8 of
msgid "`touch`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:7 of
msgid ""
"Touch object (as received by on_touch_down) used to initialize the "
"gesture container. Required."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer
#: kivy.uix.gesturesurface.GestureSurface of
msgid "Properties"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:16 of
msgid "`active`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:12 of
msgid ""
"Set to False once the gesture is complete (meets `max_stroke` setting or "
"`GestureSurface.temporal_window`)"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:15 of
msgid ":attr:`active` is a :class:`~kivy.properties.BooleanProperty`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:23 of
msgid "`active_strokes`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:19 of
msgid ""
"Number of strokes currently active in the gesture, ie concurrent touches "
"associated with this gesture."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:22 of
msgid ":attr:`active_strokes` is a :class:`~kivy.properties.NumericProperty`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:31
#: kivy.uix.gesturesurface.GestureSurface:21 of
msgid "`max_strokes`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:26 of
msgid ""
"Max number of strokes allowed in the gesture. This is set by "
"`GestureSurface.max_strokes` but can be overridden for example from "
"`on_gesture_start`."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:30 of
msgid ":attr:`max_strokes` is a :class:`~kivy.properties.NumericProperty`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:38 of
msgid "`was_merged`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:34 of
msgid ""
"Indicates that this gesture has been merged with another gesture and "
"should be considered discarded."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:37 of
msgid ":attr:`was_merged` is a :class:`~kivy.properties.BooleanProperty`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:45 of
msgid "`bbox`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:41 of
msgid ""
"Dictionary with keys minx, miny, maxx, maxy. Represents the size of the "
"gesture bounding box."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:44 of
msgid ":attr:`bbox` is a :class:`~kivy.properties.DictProperty`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:51 of
msgid "`width`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:48 of
msgid "Represents the width of the gesture."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:50 of
msgid ":attr:`width` is a :class:`~kivy.properties.NumericProperty`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:58 of
msgid "`height`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:54 of
msgid "Represents the height of the gesture."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer:56 of
msgid ":attr:`height` is a :class:`~kivy.properties.NumericProperty`"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer.accept_stroke:1 of
msgid "Returns True if this container can accept `count` new strokes"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer.add_stroke:1 of
msgid ""
"Associate a list of points with a touch.uid; the line itself is created "
"by the caller, but subsequent move/up events look it up via us. This is "
"done to avoid problems during merge."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer.complete_stroke:1 of
msgid ""
"Called on touch up events to keep track of how many strokes are active in"
" the gesture (we only want to dispatch event when the *last* stroke in "
"the gesture is released)"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer.get_vectors:1 of
msgid ""
"Return strokes in a format that is acceptable for "
"`kivy.multistroke.Recognizer` as a gesture candidate or template. The "
"result is cached automatically; the cache is invalidated at the start and"
" end of a stroke and if `update_bbox` is called. If you are going to "
"analyze a gesture mid-stroke, you may need to set the `no_cache` argument"
" to True."
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer.handles:1 of
msgid "Returns True if this container handles the given touch"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer.single_points_test:1 of
msgid ""
"Returns True if the gesture consists only of single-point strokes, we "
"must discard it in this case, or an exception will be raised"
msgstr ""

#: kivy.uix.gesturesurface.GestureContainer.update_bbox:1 of
msgid "Update gesture bbox from a touch coordinate"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.floatlayout.FloatLayout`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:1 of
msgid ""
"Simple gesture surface to track/draw touch movements. Typically used to "
"gather user input suitable for :class:`kivy.multistroke.Recognizer`."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:12 of
msgid "`temporal_window`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:6 of
msgid ""
"Time to wait from the last touch_up event before attempting to recognize "
"the gesture. If you set this to 0, the `on_gesture_complete` event is not"
" fired unless the :attr:`max_strokes` condition is met."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:11 of
msgid ""
":attr:`temporal_window` is a :class:`~kivy.properties.NumericProperty` "
"and defaults to 2.0"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:15 of
msgid ""
"Max number of strokes in a single gesture; if this is reached, "
"recognition will start immediately on the final touch_up event. If this "
"is set to 0, the `on_gesture_complete` event is not fired unless the "
":attr:`temporal_window` expires."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:20 of
msgid ""
":attr:`max_strokes` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 2.0"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:28 of
msgid "`bbox_margin`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:24 of
msgid "Bounding box margin for detecting gesture collisions, in pixels."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:27 of
msgid ""
":attr:`bbox_margin` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 30"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:37 of
msgid "`draw_timeout`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:31 of
msgid ""
"Number of seconds to keep lines/bbox on canvas after the "
"`on_gesture_complete` event is fired. If this is set to 0, gestures are "
"immediately removed from the surface when complete."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:36 of
msgid ""
":attr:`draw_timeout` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 3.0"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:49 of
msgid "`color`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:40 of
msgid ""
"Color used to draw the gesture, in RGB. This option does not have an "
"effect if :attr:`use_random_color` is True."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:43 of
msgid ""
":attr:`color` is a :class:`~kivy.properties.ColorProperty` and defaults "
"to [1, 1, 1, 1] (white)"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:47 of
msgid ""
"Changed from :class:`~kivy.properties.ListProperty` to "
":class:`~kivy.properties.ColorProperty`."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:56 of
msgid "`use_random_color`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:52 of
msgid ""
"Set to True to pick a random color for each gesture, if you do this then "
"`color` is ignored. Defaults to False."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:55 of
msgid ""
":attr:`use_random_color` is a :class:`~kivy.properties.BooleanProperty` "
"and defaults to False"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:66 of
msgid "`line_width`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:59 of
msgid ""
"Line width used for tracing touches on the surface. Set to 0 if you only "
"want to detect gestures without drawing anything. If you use 1.0, OpenGL "
"GL_LINE is used for drawing; values > 1 will use an internal drawing "
"method based on triangles (less efficient), see :mod:`kivy.graphics`."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:65 of
msgid ""
":attr:`line_width` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 2"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:73 of
msgid "`draw_bbox`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:69 of
msgid ""
"Set to True if you want to draw bounding box behind gestures. This only "
"works if `line_width` >= 1. Default is False."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:72 of
msgid ""
":attr:`draw_bbox` is a :class:`~kivy.properties.BooleanProperty` and "
"defaults to True"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:79 of
msgid "`bbox_alpha`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:76 of
msgid "Opacity for bounding box if `draw_bbox` is True. Default 0.1"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:78 of
msgid ""
":attr:`bbox_alpha` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 0.1"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface of
msgid "Events"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:85 of
msgid "`on_gesture_start` :class:`GestureContainer`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:83 of
msgid ""
"Fired when a new gesture is initiated on the surface, i.e. the first "
"on_touch_down that does not collide with an existing gesture on the "
"surface."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:88 of
msgid "`on_gesture_extend` :class:`GestureContainer`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:88 of
msgid "Fired when a touch_down event occurs within an existing gesture."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:93 of
msgid "`on_gesture_merge` :class:`GestureContainer`, :class:`GestureContainer`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:91 of
msgid ""
"Fired when two gestures collide and get merged to one gesture. The first "
"argument is the gesture that has been merged (no longer valid); the "
"second is the combined (resulting) gesture."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:100 of
msgid "`on_gesture_complete` :class:`GestureContainer`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:96 of
msgid ""
"Fired when a set of strokes is considered a complete gesture, this "
"happens when `temporal_window` expires or `max_strokes` is reached. "
"Typically you will bind to this event and use the provided "
"`GestureContainer` get_vectors() method to match against your gesture "
"database."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:105 of
msgid "`on_gesture_cleanup` :class:`GestureContainer`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:103 of
msgid ""
"Fired `draw_timeout` seconds after `on_gesture_complete`, The gesture "
"will be removed from the canvas (if line_width > 0 or draw_bbox is True) "
"and the internal gesture list before this."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:111 of
msgid "`on_gesture_discard` :class:`GestureContainer`"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface:108 of
msgid ""
"Fired when a gesture does not meet the minimum size requirements for "
"recognition (width/height < 5, or consists only of single- point "
"strokes)."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface.find_colliding_gesture:1 of
msgid ""
"Checks if a touch x/y collides with the bounding box of an existing "
"gesture. If so, return it (otherwise returns None)"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface.get_gesture:1 of
msgid "Returns GestureContainer associated with given touch"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface.init_gesture:1 of
msgid ""
"Create a new gesture from touch, i.e. it's the first on surface, or was "
"not close enough to any existing gesture (yet)"
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface.merge_gestures:1 of
msgid ""
"Merges two gestures together, the oldest one is retained and the newer "
"one gets the `GestureContainer.was_merged` flag raised."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface.on_touch_down:1 of
msgid ""
"When a new touch is registered, the first thing we do is to test if it "
"collides with the bounding box of another known gesture. If so, it is "
"assumed to be part of that gesture."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface.on_touch_move:1 of
msgid ""
"When a touch moves, we add a point to the line on the canvas so the path "
"is updated. We must also check if the new point collides with the "
"bounding box of another gesture - if so, they should be merged."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface.on_touch_up:1 of
msgid "Receive a touch up event. The touch is in parent coordinates."
msgstr ""

#: kivy.uix.gesturesurface.GestureSurface.on_touch_up:3 of
msgid "See :meth:`on_touch_down` for more information."
msgstr ""

