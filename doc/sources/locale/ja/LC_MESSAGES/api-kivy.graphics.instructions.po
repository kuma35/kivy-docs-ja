# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.graphics.instructions.rst:3
msgid "Canvas"
msgstr ""

#: ../../docstring kivy.graphics.instructions:2 of
msgid ""
"The :class:`Canvas` is the root object used for drawing by a "
":class:`~kivy.uix.widget.Widget`. Check the class documentation for more "
"information about the usage of Canvas."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.Instruction`"
msgstr ""

#: ../../docstring kivy.graphics.instructions.Callback:2 of
msgid ""
"A Callback is an instruction that will be called when the drawing "
"operation is performed. When adding instructions to a canvas, you can do "
"this::"
msgstr ""

#: ../../docstring kivy.graphics.instructions.Callback:11 of
msgid "The definition of the callback must be::"
msgstr ""

#: ../../docstring kivy.graphics.instructions.Callback:18 of
msgid ""
"Note that if you perform many and/or costly calls to callbacks, you might"
" potentially slow down the rendering performance significantly."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Callback:21 of
msgid ""
"The updating of your canvas does not occur until something new happens. "
"From your callback, you can ask for an update::"
msgstr ""

#: ../../docstring kivy.graphics.instructions.Callback:29 of
msgid ""
"If you use the Callback class to call rendering methods of another "
"toolkit, you will have issues with the OpenGL context. The OpenGL state "
"may have been manipulated by the other toolkit, and as soon as program "
"flow returns to Kivy, it will just break. You can have glitches, crashes,"
" black holes might occur, etc. To avoid that, you can activate the "
":attr:`reset_context` option. It will reset the OpenGL context state to "
"make Kivy's rendering correct after the call to your callback."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Callback:40 of
msgid ""
"The :attr:`reset_context` is not a full OpenGL reset. If you have issues "
"regarding that, please contact us."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Callback.ask_update:1 of
msgid ""
"Inform the parent canvas that we'd like it to update on the next frame. "
"This is useful when you need to trigger a redraw due to some value having"
" changed for example."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Callback.callback:1 of
msgid "Property for getting/setting func."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Callback.reset_context:1 of
msgid ""
"Set this to True if you want to reset the OpenGL context for Kivy after "
"the callback has been called."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.CanvasBase`"
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas:1 of
msgid "instructions that you want to be used for drawing."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas:5 of
msgid ""
"The Canvas supports Python's ``with`` statement and its enter & exit "
"semantics."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas:8 of
msgid "Usage of a canvas without the ``with`` statement::"
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas:13 of
msgid "Usage of a canvas with Python's ``with`` statement::"
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.add:1 of
msgid ""
"Append an :class:`Instruction` to our list. If the canvas contains an "
"`after` group, then this instruction is inserted just before the after "
"group, which remains last. This is different from how :meth:`insert` "
"works, which can insert anywhere."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.after:1 of
msgid "Property for getting the 'after' group."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.ask_update:1 of
msgid ""
"Inform the canvas that we'd like it to update on the next frame. This is "
"useful when you need to trigger a redraw due to some value having changed"
" for example."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.before:1 of
msgid "Property for getting the 'before' group."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.clear:1 of
msgid "Clears every :class:`Instruction` in the canvas, leaving it clean."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.draw:1 of
msgid "Apply the instruction to our window."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.has_after:1 of
msgid "Property to see if the :attr:`after` group has already been created."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.has_before:1 of
msgid "Property to see if the :attr:`before` group has already been created."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.opacity:1 of
msgid "Property to get/set the opacity value of the canvas."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.opacity:5 of
msgid ""
"The opacity attribute controls the opacity of the canvas and its "
"children.  Be careful, it's a cumulative attribute: the value is "
"multiplied to the current global opacity and the result is applied to the"
" current context color."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.opacity:10 of
msgid ""
"For example: if your parent has an opacity of 0.5 and a child has an "
"opacity of 0.2, the real opacity of the child will be 0.5 * 0.2 = 0.1."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Canvas.opacity:13 of
msgid "Then, the opacity is applied on the shader as::"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.InstructionGroup`"
msgstr ""

#: ../../docstring kivy.graphics.instructions.CanvasBase:1 of
msgid "CanvasBase provides the context manager methods for the :class:`Canvas`."
msgstr ""

#: ../../docstring kivy.graphics.instructions.ContextInstruction:1 of
msgid ""
"that don't have a direct visual representation, but instead modify the "
"current Canvas' state, e.g. texture binding, setting color parameters, "
"matrix manipulation and so on."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.event.ObjectWithUid`"
msgstr ""

#: ../../docstring kivy.graphics.instructions.Instruction:1 of
msgid "usage only, don't use it directly."
msgstr ""

#: ../../docstring kivy.graphics.instructions.Instruction.group:1 of
msgid "group: unicode"
msgstr ""

#: ../../docstring kivy.graphics.instructions.Instruction.proxy_ref:1 of
msgid ""
"Return a proxy reference to the Instruction i.e. without creating a "
"reference of the widget. See `weakref.proxy "
"<http://docs.python.org/2/library/weakref.html?highlight=proxy#weakref.proxy>`_"
" for more information."
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup:1 of
msgid "of graphics instructions. It can be used directly as follows::"
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup:3 of
msgid ""
"blue = InstructionGroup() blue.add(Color(0, 0, 1, 0.2)) "
"blue.add(Rectangle(pos=self.pos, size=(100, 100)))"
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup:7 of
msgid ""
"green = InstructionGroup() green.add(Color(0, 1, 0, 0.4)) "
"green.add(Rectangle(pos=(100, 100), size=(100, 100)))"
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup:11 of
msgid ""
"# Here, self should be a Widget or subclass [self.canvas.add(group) for "
"group in [blue, green]]"
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup.add:1 of
msgid "Add a new :class:`Instruction` to our list."
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup.children:1 of
msgid "children: list"
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup.clear:1 of
msgid "Remove all the :class:`Instructions <Instruction>`."
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup.get_group:1 of
msgid ""
"Return an iterable for all the :class:`Instructions <Instruction>` with a"
" specific group name."
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup.insert:1 of
msgid "Insert a new :class:`Instruction` into our list at index."
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup.remove:1 of
msgid "Remove an existing :class:`Instruction` from our list."
msgstr ""

#: ../../docstring kivy.graphics.instructions.InstructionGroup.remove_group:1
#: of
msgid "Remove all :class:`Instructions <Instruction>` with a specific group name."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.graphics.instructions.Canvas`"
msgstr ""

#: ../../docstring kivy.graphics.instructions.RenderContext:2 of
msgid "The vertex shader"
msgstr ""

#: ../../docstring kivy.graphics.instructions.RenderContext:3 of
msgid "The fragment shader"
msgstr ""

#: ../../docstring kivy.graphics.instructions.RenderContext:4 of
msgid "The default texture"
msgstr ""

#: ../../docstring kivy.graphics.instructions.RenderContext:5 of
msgid "The state stack (color, texture, matrix...)"
msgstr ""

#: ../../docstring kivy.graphics.instructions.RenderContext.shader:1 of
msgid "Return the shader attached to the render context."
msgstr ""

#: ../../docstring
#: kivy.graphics.instructions.RenderContext.use_parent_frag_modelview:1 of
msgid "If True, the parent fragment modelview matrix will be used."
msgstr ""

#: ../../docstring
#: kivy.graphics.instructions.RenderContext.use_parent_frag_modelview:5 of
msgid "rc = RenderContext(use_parent_frag_modelview=True)"
msgstr ""

#: ../../docstring
#: kivy.graphics.instructions.RenderContext.use_parent_modelview:1 of
msgid "If True, the parent modelview matrix will be used."
msgstr ""

#: ../../docstring
#: kivy.graphics.instructions.RenderContext.use_parent_modelview:5
#: kivy.graphics.instructions.RenderContext.use_parent_projection:5 of
msgid "Before::"
msgstr ""

#: ../../docstring
#: kivy.graphics.instructions.RenderContext.use_parent_modelview:9
#: kivy.graphics.instructions.RenderContext.use_parent_projection:9 of
msgid "Now::"
msgstr ""

#: ../../docstring
#: kivy.graphics.instructions.RenderContext.use_parent_projection:1 of
msgid "If True, the parent projection matrix will be used."
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction:1 of
msgid ""
"that have a direct visual representation on the canvas, such as "
"Rectangles, Triangles, Lines, Ellipse and so on."
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction.source:1 of
msgid ""
"This property represents the filename to load the texture from. If you "
"want to use an image as source, do it like this::"
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction.source:7 of
msgid "Here's the equivalent in Kivy language:"
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction.source:20 of
msgid ""
"The filename will be searched for using the "
":func:`kivy.resources.resource_find` function."
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction.tex_coords:1 of
msgid ""
"This property represents the texture coordinates used for drawing the "
"vertex instruction. The value must be a list of 8 values."
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction.tex_coords:4 of
msgid ""
"A texture coordinate has a position (u, v), and a size (w, h). The size "
"can be negative, and would represent the 'flipped' texture. By default, "
"the tex_coords are::"
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction.tex_coords:10
#: of
msgid ""
"You can pass your own texture coordinates if you want to achieve fancy "
"effects."
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction.tex_coords:15
#: of
msgid ""
"The default values just mentioned can be negative. Depending on the image"
" and label providers, the coordinates are flipped vertically because of "
"the order in which the image is internally stored. Instead of flipping "
"the image data, we are just flipping the texture coordinates to be "
"faster."
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction.texture:1 of
msgid ""
"Property that represents the texture used for drawing this Instruction. "
"You can set a new texture like this::"
msgstr ""

#: ../../docstring kivy.graphics.instructions.VertexInstruction.texture:10 of
msgid "Usually, you will use the :attr:`source` attribute instead of the texture."
msgstr ""

