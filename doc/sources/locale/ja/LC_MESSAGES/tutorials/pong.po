# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-23 23:03+0900\n"
"PO-Revision-Date: 2023-01-25 08:14+0900\n"
"Last-Translator: kuma35\n"
"Language: ja_JP\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/tutorials/pong.rst:7
msgid "Pong Game Tutorial"
msgstr "Pong Game Tutorial"

#: ../../sources/tutorials/pong.rst:10
msgid "Introduction"
msgstr "Introduction"

#: ../../sources/tutorials/pong.rst:14
msgid "Welcome to the Pong tutorial"
msgstr "ようこそ Pong チュートリアルへ"

#: ../../sources/tutorials/pong.rst:16
msgid ""
"This tutorial will teach you how to write pong using Kivy. We'll start "
"with a basic application like the one described in the :ref:`quickstart` "
"and turn it into a playable pong game, describing each step along the "
"way."
msgstr ""
"このチュートリアルでは、 Kivy を使用して pong を作成する方法を説明します。 :ref:`quickstart` "
"で説明されているような基本的なアプリケーションから始めて、それをプレイ可能な pong ゲームに変え、 その途中の各ステップを説明します。"

#: ../../sources/tutorials/pong.rst:24
msgid "Here is a check list before starting this tutorial:"
msgstr "このチュートリアルを開始するには、以下のチェック・リストをクリアする必要があります:"

#: ../../sources/tutorials/pong.rst:26
msgid ""
"You have a working Kivy installation. See the "
":doc:`/gettingstarted/installation` section for detailed descriptions"
msgstr ""
"あなたがインストールした Kivy がちゃんと動いていること。 詳細な説明については、 "
":doc:`/gettingstarted/installation` セクションを参照してください"

#: ../../sources/tutorials/pong.rst:28
msgid ""
"You know how to run a basic Kivy application. See :ref:`quickstart` if "
"you don't."
msgstr "あなたが基本的な Kivy アプリケーションの実行方法を知っていること。 そうでない場合は :ref:`quickstart` を参照してください。"

#: ../../sources/tutorials/pong.rst:31
msgid ""
"If you have read the programming guide, and understand both basic Widget "
"concepts (:doc:`/tutorials/firstwidget`) and basic concepts of the kv "
"language (:doc:`/guide/lang`), you can probably skip the first 2 steps "
"and go straight to step 3."
msgstr ""
"あなたがプログラミング・ガイドを読み、 基本的なウィジェットの概念(:doc:`/tutorials/firstwidget`)と kv "
"言語(kv language)の基本的な概念(:doc:`/guide/lang`)の両方を理解している場合は、 "
"最初の2ステップをスキップしてステップ3に進む事ができるでしょう。"

#: ../../sources/tutorials/pong.rst:38 ../../sources/tutorials/pong.rst:469
msgid ""
"You can find the entire source code--and source code files for each step"
"--in the Kivy examples directory under `tutorials/pong/`."
msgstr ""
"ソースコード全体(および各ステップのソースコード・ファイル) は、 `tutorials/pong/` の下の Kivy examples "
"のディレクトリにあります。"

#: ../../sources/tutorials/pong.rst:41
msgid "Ready? Sweet, let's get started!"
msgstr "準備はいいかい？ じゃあ始めよう！"

#: ../../sources/tutorials/pong.rst:44 ../../sources/tutorials/pong.rst:48
msgid "Getting Started"
msgstr "Getting Started"

#: ../../sources/tutorials/pong.rst:50
msgid ""
"Let's start by getting a really simple Kivy app up and running. Create a "
"directory for the game and a file named *main.py*"
msgstr ""
"本当にシンプルなKivyアプリを起動して実行することから始めよう。 ゲーム用のディレクトリと、 *main.py* "
"という名前のファイルを作成してください"

#: ../../sources/tutorials/pong.rst:57
msgid ""
"Go ahead and run the application. It should just show a black window at "
"this point. What we've done is create a very simple Kivy "
":class:`~kivy.app.App`, which creates an instance of our ``PongGame`` "
"Widget class and returns it as the root element for the applications UI, "
"which you should imagine at this point as a hierarchical tree of Widgets."
" Kivy places this widget-tree in the default Window. In the next step, we"
" will draw the Pong background and scores by defining how the ``PongGame "
"widget`` looks."
msgstr ""
"上記の通り打ち込んで、 アプリケーションを実行してください。 この時点で黒いウィンドウが表示されるはずです。 私たちが行ったことは、 非常に単純な"
" Kivy :class:`~kivy.app.App` の作成です。 これは ``PongGame`` "
"ウィジェット・クラスのインスタンスを作成し、 それをアプリケーション UI のルート要素として返します。 "
"あなたはこれをウィジェットの階層ツリーとして意識する必要があります。 Kivy は、 "
"このウィジェット・ツリーをデフォルトのウインドウに配置します。 次のステップでは、 「PongGame ウィジェット」の見え方を定義して、 "
"Pong の背景とスコアを描画します。"

#: ../../sources/tutorials/pong.rst:67
msgid "Add Simple Graphics"
msgstr "Add Simple Graphics"

#: ../../sources/tutorials/pong.rst:71
msgid "Creation of pong.kv"
msgstr "pong.kv の作成"

#: ../../sources/tutorials/pong.rst:73
msgid ""
"We will use a .kv file to define the look and feel of the ``PongGame`` "
"class. Since our :class:`~kivy.app.App` class is called ``PongApp``, we "
"can simply create a file called ``pong.kv`` in the same directory that "
"will be automatically loaded when the application is run. So create a new"
" file called *``pong.kv``* and add the following contents."
msgstr ""
"私達は ``PongGame`` クラスのルック・アンド・フィールを定義するために .kv ファイルを使用します。 "
":class:`~kivy.app.App` クラスは ``PongApp`` と呼ばれているので、 ``pong.kv`` "
"というファイルを同一ディレクトリに作成するだけで、 アプリケーションの実行時に自動的にロードされます。 なので *``pong.kv``* "
"という名前の新しいファイルを作成し、 以下の内容を追加します。"

#: ../../sources/tutorials/pong.rst:85
msgid ""
"COMMON ERROR: The name of the kv file, e.g. pong.kv, must match the name "
"of the app, e.g. PongApp (the part before the App ending)."
msgstr ""
"COMMON ERROR: kv ファイルの名前、 たとえば pong.kv は、 アプリの名前と一致する必要があります。 つまり PongApp"
" (のAppより前の部分で先頭は小文字) です。"

#: ../../sources/tutorials/pong.rst:88
msgid ""
"If you run the app now, you should see a vertical bar in the middle, and "
"two zeros where the player scores will be displayed."
msgstr "ここであんたがアプリを実行すると、 中央に縦棒が表示され、 プレーヤーのスコアである 2 つのゼロが表示されます。"

#: ../../sources/tutorials/pong.rst:93
msgid "Explaining the Kv File Syntax"
msgstr "Explaining the Kv File Syntax"

#: ../../sources/tutorials/pong.rst:95
msgid ""
"Before going on to the next step, you might want to take a closer look at"
" the contents of the kv file we just created and figure out what is going"
" on. If you understand what's happening, you can probably skip ahead to "
"the next step."
msgstr ""
"次のステップに進む前に、 あなたが作成したばかりの kv ファイルの内容を詳しく見て、 何が起こっているのかを把握することをお勧めします。 "
"あなたが何が起こっているかを理解しているなら、 ここはスキップして次のステップに進んでください。"

#: ../../sources/tutorials/pong.rst:100
msgid "On the very first line we have::"
msgstr "一番最初の行にあるのが以下です::"

#: ../../sources/tutorials/pong.rst:104
msgid ""
"This first line is required in every kv file. It should start with "
"``#:kivy`` followed by a space and the Kivy version it is intended for "
"(so Kivy can make sure you have at least the required version, or handle "
"backwards compatibility later on)."
msgstr ""
"この最初の行は、 すべての kv ファイルで必須です。 ``#:kivy`` で始まり、 その後に空白と目的の Kivy "
"バージョンが続く必要があります (Kivy は、 最低限必要なバージョンであることを確認したり、後で下位互換性を処理したりできます)。"

#: ../../sources/tutorials/pong.rst:109
msgid ""
"After that, we begin defining rules that are applied to all ``PongGame`` "
"instances::"
msgstr "続いて、 ``PongGame`` インスタンス全体で適用されるルールの定義を開始します::"

#: ../../sources/tutorials/pong.rst:115
msgid ""
"Like Python, kv files use indentation to define nested blocks. A block "
"defined with a class name inside the ``<`` and ``>`` characters is a "
":class:`~kivy.uix.widget.Widget` rule. It will be applied to any instance"
" of the named class. If you replaced ``PongGame`` with ``Widget`` in our "
"example, all Widget instances would have the vertical line and the two "
"Label widgets inside them because it would define these rules for all "
"Widget instances."
msgstr ""
"Python と同様に、 kv ファイルはインデントを使用してネストされたブロックを定義します。 ``<`` と ``>`` "
"文字で囲まれたクラス名で定義されたブロックは :class:`~kivy.uix.widget.Widget` ルールです。 "
"名前付きクラスの任意のインスタンスに適用されます。 もし、 この例であなたが ``PongGame`` を ``Widget`` "
"に置き換えた場合、 すべての Widget インスタンスに対してこれらのルールが定義されるため、 すべての Widget インスタンスに縦線と 2"
" つの Label ウィジェットが含まれるようになります。"

#: ../../sources/tutorials/pong.rst:122
msgid ""
"Inside a rule section, you can add various blocks to define the style and"
" contents of the widgets they will be applied to. You can:"
msgstr "ルール・セクション内にさまざまなブロックを追加して、 適用されるウィジェットのスタイルとコンテンツを定義できます。 以下の事が可能です:"

#: ../../sources/tutorials/pong.rst:125
msgid "set property values"
msgstr "プロパティ(property)の値(values)をセットする"

#: ../../sources/tutorials/pong.rst:126
msgid "add child widgets"
msgstr "子ウィジェット達を追加する"

#: ../../sources/tutorials/pong.rst:127
msgid ""
"define a `canvas` section in which you can add Graphics instructions that"
" define how the widget is rendered."
msgstr "ウィジェットのレンダリング方法を定義するグラフィックス命令を追加できる `canvas` セクションを定義する"

#: ../../sources/tutorials/pong.rst:130
msgid ""
"The first block inside the ``<PongGame>`` rule we have is a `canvas` "
"block:"
msgstr "``<PongGame>`` ルール内の最初のブロックは `canvas` ブロックです:"

#: ../../sources/tutorials/pong.rst:140
msgid ""
"So this canvas block says that the ``PongGame`` widget should draw some "
"graphics primitives. In this case, we add a rectangle to the canvas. We "
"set the pos of the rectangle to be 5 pixels left of the horizontal center"
" of the widget, and 0 for y. The size of the rectangle is set to 10 "
"pixels in width, and the widget's height in height. The nice thing about "
"defining the graphics like this, is that the rendered rectangle will be "
"automatically updated when the properties of any widgets used in the "
"value expression change."
msgstr ""
"この canvas ブロックは ``PongGame`` "
"ウィジェットがいくつかのフラフィック基本要素(primitives)を描画する必要があることを示しています。 この場合、 canvas "
"に長方形(rectangle)を追加します。 長方形の位置を、ウィジェットの水平方向の中心から左に 5 ピクセル、 y を 0 に設定します。 "
"長方形のサイズは幅 10 ピクセルに設定され、 高さはウィジェットの高さに設定されます。 このようにしてグラフィックを定義する利点は、 "
"このようにグラフィックスを定義する利点は、 値を設定するのに使用されているウィジェットのプロパティが変更されたときに、 "
"レンダリングされる長方形が自動的に更新されることです。"

#: ../../sources/tutorials/pong.rst:150
msgid ""
"Try to resize the application window and notice what happens. That's "
"right, the entire UI resizes automatically. The standard behaviour of the"
" Window is to resize an element based on its property `size_hint`. The "
"default widget size_hint is (1,1), meaning it will be stretched 100% in "
"both x-direction and y-direction and hence fill the available space. "
"Since the pos and size of the rectangle and center_x and top of the score"
" labels were defined within the context of the ``PongGame`` class, these "
"properties will automatically update when the corresponding widget "
"properties change. Using the Kv language gives you automatic property "
"binding. :)"
msgstr ""
"アプリケーション・ウィンドウのサイズを変更して、 何が起こるかを確認して見てください。 はい、あなたのおっしゃるとおり、 UI "
"全体が自動的にサイズ変更されます。 Window の標準的な振る舞いは、 そのプロパティ `size_hint` "
"に基づいて要素のサイズを変更することです。 デフォルトのウィジェット size_hint は (1,1) です。 つまり、x 方向と y "
"方向の両方で 100％ 引き伸ばされ、 利用可能なスペースを埋めます。 長方形の位置とサイズ、そしてスコア・ラベルの center_x と上部は "
"``PongGame`` クラスのコンテキスト内で定義されているため、 対応するウィジェット・プロパティが変更されると、 "
"これらのプロパティは自動的に更新されます。 Kv 言語を使用すると、自動のプロパティ結び付けが(automatic property "
"binding)可能になります。 :)"

#: ../../sources/tutorials/pong.rst:162
msgid ""
"The last two sections we add look pretty similar. Each of them adds a "
"Label widget as a child widget to the ``PongGame`` widget. For now, the "
"text on both of them is just set to *\"0\"*. We'll hook that up to the "
"actual score once we have the logic implemented, but the labels already "
"look good since we set a bigger font_size, and positioned them relatively"
" to the root widget. The ``root`` keyword can be used inside the child "
"block to refer back to the parent/root widget the rule applies to "
"(``PongGame`` in this case):"
msgstr "私達が追加した最後の 2 つのセクションも割と似ています。 それぞれは Label ウィジェットを、 子ウィジェットとして ``PongGame`` ウィジェットに追加します。 今のところ、 テキストは両方とも *\"0\"* に設定されています。 私達がロジックを実装したら、それを実際のスコアに結び付けますが、 巨大な font_size を設定し、ルート・ウィジェットに対して相対的に配置したため、 ラベルの表示は既に適切になっています。 子ブロック内で root キーワードを使用すると、 ルールが適用される 親/ルート ウィジェット (この場合は PongGame) を参照できます:"

#: ../../sources/tutorials/pong.rst:189 ../../sources/tutorials/pong.rst:193
msgid "Add the Ball"
msgstr "Add the Ball"

#: ../../sources/tutorials/pong.rst:195
msgid ""
"Ok, so we have a basic pong arena to play in, but we still need the "
"players and a ball to hit around.  Let's start with the ball.  We'll add "
"a new `PongBall` class to create a widget that will be our ball and make "
"it bounce around."
msgstr "さて、 これでプレイするための基本的なピンポン台ができましたが、 まだプレイヤーと、打ち返すボールが必要です。  ボールから始めましょう。 新しい `PongBall` クラスを追加して、 ボールとなるウィジェットを作成し、 跳ね返るようにします。"

#: ../../sources/tutorials/pong.rst:200
msgid "PongBall Class"
msgstr "PongBall Class"

#: ../../sources/tutorials/pong.rst:202
msgid "Here is the Python code for the PongBall class::"
msgstr "PongBall クラスの Python コードは以下のとおりです::"

#: ../../sources/tutorials/pong.rst:219
msgid "And here is the kv rule used to draw the ball as a white circle:"
msgstr "そして、 ボールを白い円として描くために使用されるkvルールは以下のとおりです:"

#: ../../sources/tutorials/pong.rst:230
msgid ""
"To make it all work, you also have to add the imports for the :doc:`/api-"
"kivy.properties` Property classes used and the "
":class:`~kivy.vector.Vector`."
msgstr "すべてを機能させるには、 使用する :doc:`/api-kivy.properties` プロパティ・クラスと :class:`~kivy.vector.Vector` のインポートも追加する必要があります。"

#: ../../sources/tutorials/pong.rst:234
msgid "Here is the entire updated python code and kv file for this step:"
msgstr "ここで、 このステップで更新された python コードと kv ファイル全体を以下に示します:"

#: ../../sources/tutorials/pong.rst:238 ../../sources/tutorials/pong.rst:350
#: ../../sources/tutorials/pong.rst:425
msgid "main.py:"
msgstr "main.py:"

#: ../../sources/tutorials/pong.rst:243 ../../sources/tutorials/pong.rst:355
#: ../../sources/tutorials/pong.rst:427
msgid "pong.kv:"
msgstr "pong.kv:"

#: ../../sources/tutorials/pong.rst:245
msgid ""
"Note that not only a `<PongBall>` widget rule has been added, but also a "
"child widget `PongBall` in the `<PongGame>` widget rule."
msgstr "注意: `<PongBall>` ウィジェット・ルールだけでなく、 `<PongGame>` ウィジェット・ルールの子ウィジェット `PongBall` も追加されていることに注意してください。"

#: ../../sources/tutorials/pong.rst:249
msgid "Adding Ball Animation"
msgstr "Adding Ball Animation"

#: ../../sources/tutorials/pong.rst:253
msgid "Making the ball move"
msgstr "ボールの動きを作る"

#: ../../sources/tutorials/pong.rst:255
msgid ""
"Cool, so now we have a ball, and it even has a ``move`` function... but "
"it's not moving yet. Let's fix that."
msgstr "クールだね！ いまや私達はボールを手にしました。 これには ``move`` 関数もありますが、まだ動いてません。 それではそれを修正しましょう。"

#: ../../sources/tutorials/pong.rst:259
msgid "Scheduling Functions on the Clock"
msgstr "Scheduling Functions on the Clock"

#: ../../sources/tutorials/pong.rst:261
msgid ""
"We need the ``move`` method of our ball to be called regularly. Luckily, "
"Kivy makes this pretty easy by letting us schedule any function we want "
"using the :class:`~kivy.clock.Clock` and specifying the interval::"
msgstr "私達はボールの ``move`` メソッドを定期的に呼び出す必要があります。 幸いなことに、 Kivy では :class:`~kivy.clock.Clock` を使用して必要な関数をスケジュールし、 間隔を指定することで、 これを非常に簡単にします::"

#: ../../sources/tutorials/pong.rst:267
msgid ""
"This line for example, would cause the ``update`` function of the game "
"object to be called once every 60th of a second (60 times per second)."
msgstr "たとえば、 上記行により、 ゲーム・オブジェクトの ``update`` 関数が60分の1秒ごと(1 秒あたり 60 回)に呼び出されます。"

#: ../../sources/tutorials/pong.rst:271
msgid "Object Properties/References"
msgstr "Object Properties/References"

#: ../../sources/tutorials/pong.rst:273
msgid ""
"We have another problem though.  We'd like to make sure the PongBall has "
"its ``move`` function called regularly, but in our code we don't have any"
" references to the ball object since we just added it via the kv file "
"inside the kv rule for the ``PongGame`` class. The only reference to our "
"game is the one we return in the applications build method."
msgstr "もっとも、 私達には別の問題があります。 PongBall の move 関数が定期的に呼び出されるようにしたいのですが、 ボールは PongGame クラスの kv ルール内に記述したモノを kv ファイルを介して追加しただけなので、 このコードはボール・オブジェクトへの参照を持っていません。 game オブジェクトへの唯一の参照は、 アプリケーションの build メソッドが返したモノです。"

#: ../../sources/tutorials/pong.rst:279
msgid ""
"Since we're going to have to do more than just move the ball (e.g. bounce"
" it off the walls and later the players racket), we'll probably need an "
"``update`` method for our ``PongGame`` class anyway. Furthermore, given "
"that we have a reference to the game object already, we can easily "
"schedule its new ``update`` method when the application gets built::"
msgstr "私達はボールを動かす以上のこと(例えば、ボールを壁にぶつけて、それをプレーヤーのラケットで打ち返すなど)をしなければならないので、 とにかく ``PongGame`` クラスの ``update`` メソッドが必要になるでしょう。 さらに、 私達は PongGame オブジェクトへの参照を既に持っているので、 アプリケーションがビルドされたときに新しい ``update`` メソッドを簡単にスケジュールできます::"

#: ../../sources/tutorials/pong.rst:299
msgid ""
"However, that still doesn't change the fact that we don't have a "
"reference to the ``PongBall`` child widget created by the kv rule.  To "
"fix this, we can add an :class:`ObjectProperty "
"<kivy.properties.ObjectProperty>` to the PongGame class, and hook it up "
"to the widget created in the kv rule. Once that's done, we can easily "
"reference the ball property inside the ``update`` method and even make it"
" bounce off the edges::"
msgstr "けれども、 依然として私達が kv ルールによって作成された ``PongBall`` 子ウィジェットへの参照を持っていない事実は変わりません。 これを修正するには、 :class:`ObjectProperty <kivy.properties.ObjectProperty>` を PongGame クラスに追加し、 kv ルールで作成されたウィジェットに引っ掛け(hook)ます。 これが完了したら、 update メソッド内で簡単にボールのプロパティを参照し、 端で跳ね返らせることもできます::"

#: ../../sources/tutorials/pong.rst:321
msgid ""
"Don't forget to hook it up in the kv file, by giving the child widget an "
"id and setting the PongGame's ``ball`` ObjectProperty to that id:"
msgstr "子ウィジェットに ID を与え、 PongGame の ``ball`` ObjectProperty をその ID に設定することにより、 kv ファイルに引っ掛ける(hook)ことを忘れないでください:"

#: ../../sources/tutorials/pong.rst:338
msgid ""
"At this point everything is hooked up for the ball to bounce around. If "
"you're coding along as we go, you might be wondering why the ball isn't "
"moving anywhere.  The ball's velocity is set to 0 on both x and y. In the"
" code listing below, a ``serve_ball`` method is added to the ``PongGame``"
" class and called in the app's ``build`` method. It sets a random x and y"
" velocity for the ball, and also resets the position, so we can use it "
"later to reset the ball when a player has scored a point."
msgstr "この時点で、 ボールが跳ね回るよう、 すべてのパーツが繋げられています。 コーディングを進めているあなたは、 なぜボールが動かないのか不思議に思うかもしれません。 なぜなら今のところボールの速度は、x と y の両方で 0 に設定されているからです。 以下のコード・リストでは、 ``serve_ball`` メソッドが ``PongGame`` クラスに追加され、 アプリの ``build`` メソッドで呼び出されます。 ボールのランダムな x および y 速度を設定し、 位置もリセットするため、 将来、 プレーヤーがポイントを獲得したときにボールをリセットするために使用できます。"

#: ../../sources/tutorials/pong.rst:346
msgid "Here is the entire code for this step:"
msgstr "このステップでのコード全体は以下のとおりです:"

#: ../../sources/tutorials/pong.rst:358
msgid "Connect Input Events"
msgstr "Connect Input Events"

#: ../../sources/tutorials/pong.rst:362
msgid "Adding Players and reacting to touch input"
msgstr "プレイヤーの追加とtouch入力へのリアクション"

#: ../../sources/tutorials/pong.rst:364
msgid ""
"Sweet, our ball is bouncing around. The only things missing now are the "
"movable player rackets and keeping track of the score.  We won't go over "
"all the details of creating the class and kv rules again, since those "
"concepts were already covered in the previous steps. Instead, let's focus"
" on how to move the Player widgets in response to user input. You can get"
" the whole code and kv rules for the ``PongPaddle`` class at the end of "
"this section."
msgstr "すてき！私達のボールが跳ね回っています。 今や欠けているのは、 可動するラケットとスコアの追跡だけです。 クラスおよび kv ルールの作成の詳細については、 前のステップで既に説明しているため、ここでは説明しません。 代わりに、ユーザー入力に応じて Player ウィジェットを移動する方法に焦点を当てましょう。 このセクションの最後で、 あなたは PongPaddle クラスの、 コード全体と kv ルールを取得できます。"

#: ../../sources/tutorials/pong.rst:371
msgid ""
"In Kivy, a widget can react to input by implementing the "
":meth:`on_touch_down <kivy.uix.widget.Widget.on_touch_down>`, the "
":meth:`on_touch_move <kivy.uix.widget.Widget.on_touch_move>` and the "
":meth:`on_touch_up <kivy.uix.widget.Widget.on_touch_up>` methods. By "
"default, the Widget class implements these methods by just calling the "
"corresponding method on all its child widgets to pass on the event until "
"one of the children returns ``True``."
msgstr "Kivy では、 :meth:`on_touch_down <kivy.uix.widget.Widget.on_touch_down>` メソッドと :meth:`on_touch_move <kivy.uix.widget.Widget.on_touch_move>` メソッドと :meth:`on_touch_up <kivy.uix.widget.Widget.on_touch_up>` メソッドを実装することで、 ウィジェットは入力に反応できます。 デフォルトでは、 Widget クラスのこれらのメソッドの実装は、 その子ウィジェット全てで対応するメソッドを呼び出して、 子ウィジェットのいずれかが ``True`` を返すまでイベントを受け渡します。"

#: ../../sources/tutorials/pong.rst:379
msgid ""
"Pong is pretty simple. The rackets just need to move up and down. In fact"
" it's so simple, we don't even really need to have the player widgets "
"handle the events themselves. We'll just implement the ``on_touch_move`` "
"function for the ``PongGame`` class and have it set the position of the "
"left or right player based on whether the touch occurred on the left or "
"right side of the screen."
msgstr "Pong はとてもシンプルです。 ラケットは上下に動かすだけです。 実際、これは非常に単純なので、 プレイヤー・ウィジェットにイベント自体を処理させる必要さえありません。 ``PongGame`` クラスの ``on_touch_move`` 関数を実装し、 タッチが画面の左側または右側のどちらで発生したかに基づいて、 左側または右側のプレーヤーの位置を設定します。"

#: ../../sources/tutorials/pong.rst:385
msgid "Check the ``on_touch_move`` handler::"
msgstr "それでは ``on_touch_move`` ハンドラーを確認してください::"

#: ../../sources/tutorials/pong.rst:393
msgid ""
"We'll keep the score for each player in a "
":class:`~kivy.properties.NumericProperty`. The score labels of the "
"``PongGame`` are kept updated by changing the NumericProperty ``score``, "
"which in turn updates the ``PongGame`` child labels text property. This "
"binding occurs because Kivy :mod:`~kivy.properties` automatically bind to"
" any references in their corresponding kv files. When the ball escapes "
"out of the sides, we'll update the score and serve the ball again by "
"changing the ``update`` method in the ``PongGame`` class. The "
"``PongPaddle`` class also implements a ``bounce_ball`` method, so that "
"the ball bounces differently based on where it hits the racket. Here is "
"the code for the `PongPaddle` class::"
msgstr "各プレイヤーのスコアを :class:`~kivy.properties.NumericProperty` に保持します。 ``PongGame`` のスコア・ラベルは、 NumericProperty の ``score`` を変更することによって更新され続けます。 これにより、``PongGame`` の子ラベルのテキスト・プロパティが更新されます。 この結び付け(binding)は、 Kivy :mod:`~kivy.properties` が対応する kv ファイル内の参照に自動的に結び付けする(bind)ために発生します。 ボールがサイドの外に出たら、 PongGame クラスの update メソッドを変更してスコアを更新し、 ボールを再びサーブします。 ``PongPaddle`` クラスは ``bounce_ball`` メソッドも実装しているため、 ボールがラケットに当たった場所に基づいて異なるバウンドをします。  以下が `PongPaddle` クラスのコードです::"

#: ../../sources/tutorials/pong.rst:417
msgid ""
"This algorithm for ball bouncing is very simple, but will have strange "
"behavior if the ball hits the paddle from the side or bottom...this is "
"something you could try to fix yourself if you like."
msgstr "このボールの跳ね返りのアルゴリズムは非常に単純ですが、 ボールが横または下からパドルに当たると奇妙な動作をします…これは、 必要に応じてあなた自身で変更することができます。"

#: ../../sources/tutorials/pong.rst:421
msgid "And here it is in context. Pretty much done:"
msgstr "そして、今やここに全容があります。かなりいいものになりました。"

#: ../../sources/tutorials/pong.rst:435
msgid "Where To Go Now?"
msgstr "次は何をすればいいですか？"

#: ../../sources/tutorials/pong.rst:439
msgid "Have some fun"
msgstr "楽しんでください！"

#: ../../sources/tutorials/pong.rst:441
msgid ""
"Well, the pong game is pretty much complete. If you understood all of the"
" things that are covered in this tutorial, give yourself a pat on the "
"back and think about how you could improve the game. Here are a few ideas"
" of things you could do:"
msgstr "さて、 ピンポン・ゲームはほぼ完成しました。 あなたがこのチュートリアルで説明されていることをすべて理解した場合は、 あなた自身を褒めてやって、 ゲームを改善する方法を考えましょう。 以下に、あなたならできるいくつかのアイデアがあります:"

#: ../../sources/tutorials/pong.rst:446
msgid ""
"Add some nicer graphics / images. (Hint: check out the "
":attr:`~kivy.graphics.instructions.VertexInstruction.source` property on "
"the graphics instructions like :attr:`~kivy.graphics.Line.circle` or "
":class:`~kivy.graphics.Rectangle`, to set an image as the texture.)"
msgstr "より素敵な グラフィック/画像 を追加します。 (ヒント: :attr:`~kivy.graphics.Line.circle` または :class:`~kivy.graphics. Rectangle` に、 画像をテクスチャとして設定します。)"

#: ../../sources/tutorials/pong.rst:452
msgid ""
"Make the game end after a certain score. Maybe once a player has 10 "
"points, you can display a large \"PLAYER 1 WINS\" label and/or add a main"
" menu to start, pause and reset the game. (Hint: check out the "
":class:`~kivy.uix.button.Button` and :class:`~kivy.uix.label.Label` "
"classes, and figure out how to use their `add_widget` and `remove_widget`"
" functions to add or remove widgets dynamically.)"
msgstr "一定のスコアの後にゲームを終了させます。 プレイヤーが 10 ポイントを獲得したら、 大きな「PLAYER 1 WINS」ラベルを表示したり、 ゲーム開始や一時停止やリセットするためのメイン・メニューを追加したりできます。 (ヒント: :class:`~kivy.uix.button.Button` と :class:`~kivy.uix.label.Label` クラスを調べて、 ウィジェットを動的に追加または削除する、 `add_widget` や `remove_widget` 関数の使用方法を理解してください。 )"

#: ../../sources/tutorials/pong.rst:460
msgid ""
"Make it a 4 player Pong Game.  Most tablets have Multi-Touch support, so "
"wouldn't it be cool to have a player on each side and have four people "
"play at the same time?"
msgstr "4 人用のピンポン・ゲームにします。 ほとんどのタブレットはマルチ・タッチをサポートしているので、 四辺それぞれにプレイヤーがいて、 同時に 4 人でプレイできたらかっこいい思いませんか?"

#: ../../sources/tutorials/pong.rst:464
msgid ""
"Fix the simplistic collision check so hitting the ball with an end of the"
" paddle results in a more realistic bounce."
msgstr "単純な衝突チェックを修正して、 パドルの端でボールを打つと、 よりリアルな跳ね返りが得られるようにします。"

