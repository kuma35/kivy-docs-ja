# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.uix.settings.rst:3
msgid "Settings"
msgstr ""

#: kivy.uix.settings:4 of
msgid ""
"This module provides a complete and extensible framework for adding a "
"Settings interface to your application. By default, the interface uses a "
":class:`SettingsWithSpinner`, which consists of a "
":class:`~kivy.uix.spinner.Spinner` (top) to switch between individual "
"settings panels (bottom). See :ref:`differentlayouts` for some "
"alternatives."
msgstr ""

#: kivy.uix.settings:14 of
msgid ""
"A :class:`SettingsPanel` represents a group of configurable options. The "
":attr:`SettingsPanel.title` property is used by :class:`Settings` when a "
"panel is added: it determines the name of the sidebar button. "
"SettingsPanel controls a :class:`~kivy.config.ConfigParser` instance."
msgstr ""

#: kivy.uix.settings:19 of
msgid ""
"The panel can be automatically constructed from a JSON definition file: "
"you describe the settings you want and corresponding sections/keys in the"
" ConfigParser instance... and you're done!"
msgstr ""

#: kivy.uix.settings:23 of
msgid ""
"Settings are also integrated into the :class:`~kivy.app.App` class. Use "
":meth:`Settings.add_kivy_panel` to configure the Kivy core settings in a "
"panel."
msgstr ""

#: kivy.uix.settings:30 of
msgid "Create a panel from JSON"
msgstr ""

#: kivy.uix.settings:32 of
msgid "To create a panel from a JSON-file, you need two things:"
msgstr ""

#: kivy.uix.settings:34 of
msgid "a :class:`~kivy.config.ConfigParser` instance with default values"
msgstr ""

#: kivy.uix.settings:35 of
msgid "a JSON file"
msgstr ""

#: kivy.uix.settings:39 of
msgid ""
"The :class:`kivy.config.ConfigParser` is required. You cannot use the "
"default ConfigParser from Python libraries."
msgstr ""

#: kivy.uix.settings:42 of
msgid ""
"You must create and handle the :class:`~kivy.config.ConfigParser` object."
" SettingsPanel will read the values from the associated ConfigParser "
"instance. Make sure you have set default values (using "
":attr:`~kivy.config.ConfigParser.setdefaults`) for all the sections/keys "
"in your JSON file!"
msgstr ""

#: kivy.uix.settings:48 of
msgid ""
"The JSON file contains structured information to describe the available "
"settings. Here is an example::"
msgstr ""

#: kivy.uix.settings:65 of
msgid ""
"Each element in the root list represents a setting that the user can "
"configure. Only the \"type\" key is mandatory: an instance of the "
"associated class will be created and used for the setting - other keys "
"are assigned to corresponding properties of that class."
msgstr ""

#: kivy.uix.settings:71 of
msgid "Type"
msgstr ""

#: kivy.uix.settings:71 of
msgid "Associated class"
msgstr ""

#: kivy.uix.settings:73 of
msgid "title"
msgstr ""

#: kivy.uix.settings:73 of
msgid ":class:`SettingTitle`"
msgstr ""

#: kivy.uix.settings:74 of
msgid "bool"
msgstr ""

#: kivy.uix.settings:74 of
msgid ":class:`SettingBoolean`"
msgstr ""

#: kivy.uix.settings:75 of
msgid "numeric"
msgstr ""

#: kivy.uix.settings:75 of
msgid ":class:`SettingNumeric`"
msgstr ""

#: kivy.uix.settings:76 of
msgid "options"
msgstr ""

#: kivy.uix.settings:76 of
msgid ":class:`SettingOptions`"
msgstr ""

#: kivy.uix.settings:77 of
msgid "string"
msgstr ""

#: kivy.uix.settings:77 of
msgid ":class:`SettingString`"
msgstr ""

#: kivy.uix.settings:78 of
msgid "path"
msgstr ""

#: kivy.uix.settings:78 of
msgid ":class:`SettingPath`"
msgstr ""

#: kivy.uix.settings:79 of
msgid "color"
msgstr ""

#: kivy.uix.settings:79 of
msgid ":class:`SettingColor`"
msgstr ""

#: kivy.uix.settings:82 of
msgid "Added :attr:`SettingPath` type"
msgstr ""

#: kivy.uix.settings:85 of
msgid "Added :attr:`SettingColor` type"
msgstr ""

#: kivy.uix.settings:88 of
msgid ""
"In the JSON example above, the first element is of type \"title\". It "
"will create a new instance of :class:`SettingTitle` and apply the rest of"
" the key-value pairs to the properties of that class, i.e. \"title\": "
"\"Windows\" sets the :attr:`~SettingsPanel.title` property of the panel "
"to \"Windows\"."
msgstr ""

#: kivy.uix.settings:93 of
msgid ""
"To load the JSON example to a :class:`Settings` instance, use the "
":meth:`Settings.add_json_panel` method. It will automatically instantiate"
" a :class:`SettingsPanel` and add it to :class:`Settings`::"
msgstr ""

#: kivy.uix.settings:112 of
msgid "Different panel layouts"
msgstr ""

#: kivy.uix.settings:114 of
msgid ""
"A kivy :class:`~kivy.app.App` can automatically create and display a "
":class:`Settings` instance. See the :attr:`~kivy.app.App.settings_cls` "
"documentation for details on how to choose which settings class to "
"display."
msgstr ""

#: kivy.uix.settings:119 of
msgid ""
"Several pre-built settings widgets are available. All except "
":class:`SettingsWithNoMenu` include close buttons triggering the on_close"
" event."
msgstr ""

#: kivy.uix.settings:123 of
msgid ""
":class:`Settings`: Displays settings with a sidebar at the left to switch"
" between json panels."
msgstr ""

#: kivy.uix.settings:126 of
msgid ":class:`SettingsWithSidebar`: A trivial subclass of :class:`Settings`."
msgstr ""

#: kivy.uix.settings:129 of
msgid ""
":class:`SettingsWithSpinner`: Displays settings with a spinner at the "
"top, which can be used to switch between json panels. Uses "
":class:`InterfaceWithSpinner` as the :attr:`~Settings.interface_cls`. "
"This is the default behavior from Kivy 1.8.0."
msgstr ""

#: kivy.uix.settings:135 of
msgid ""
":class:`SettingsWithTabbedPanel`: Displays json panels as individual tabs"
" in a :class:`~kivy.uix.tabbedpanel.TabbedPanel`. Uses "
":class:`InterfaceWithTabbedPanel` as the :attr:`~Settings.interface_cls`."
msgstr ""

#: kivy.uix.settings:139 of
msgid ""
":class:`SettingsWithNoMenu`: Displays a single json panel, with no way to"
" switch to other panels and no close button. This makes it impossible for"
" the user to exit unless :meth:`~kivy.app.App.close_settings` is "
"overridden with a different close trigger! Uses "
":class:`InterfaceWithNoMenu` as the :attr:`~Settings.interface_cls`."
msgstr ""

#: kivy.uix.settings:146 of
msgid ""
"You can construct your own settings panels with any layout you choose by "
"setting :attr:`Settings.interface_cls`. This should be a widget that "
"displays a json settings panel with some way to switch between panels. An"
" instance will be automatically created by :class:`Settings`."
msgstr ""

#: kivy.uix.settings:151 of
msgid ""
"Interface widgets may be anything you like, but *must* have a method "
"add_panel that receives newly created json settings panels for the "
"interface to display. See the documentation for "
":class:`InterfaceWithSidebar` for more information. They may optionally "
"dispatch an on_close event, for instance if a close button is clicked. "
"This event is used by :class:`Settings` to trigger its own on_close "
"event."
msgstr ""

#: kivy.uix.settings:159 of
msgid ""
"For a complete, working example, please see "
":file:`kivy/examples/settings/main.py`."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.scrollview.ScrollView`"
msgstr ""

#: kivy.uix.settings.ContentPanel:1 of
msgid ""
"A class for displaying settings panels. It displays a single settings "
"panel at a time, taking up the full size and shape of the ContentPanel. "
"It is used by :class:`InterfaceWithSidebar` and "
":class:`InterfaceWithSpinner` to display settings."
msgstr ""

#: kivy.uix.settings.ContentPanel.add_panel:1
#: kivy.uix.settings.InterfaceWithSidebar.add_panel:1 of
msgid ""
"This method is used by Settings to add new panels for possible display. "
"Any replacement for ContentPanel *must* implement this method."
msgstr ""

#: kivy.uix.settings.ContentPanel.add_panel
#: kivy.uix.settings.ContentPanel.add_widget
#: kivy.uix.settings.ContentPanel.on_current_uid
#: kivy.uix.settings.ContentPanel.remove_widget
#: kivy.uix.settings.InterfaceWithSidebar.add_panel
#: kivy.uix.settings.MenuSidebar.add_item
#: kivy.uix.settings.SettingItem.add_widget
#: kivy.uix.settings.SettingItem.on_touch_down
#: kivy.uix.settings.Settings.on_touch_down of
msgid "Parameters"
msgstr ""

#: kivy.uix.settings.ContentPanel.add_panel:6
#: kivy.uix.settings.InterfaceWithSidebar.add_panel:7 of
msgid "`panel`: :class:`SettingsPanel`"
msgstr ""

#: kivy.uix.settings.ContentPanel.add_panel:7 of
msgid "It should be stored and displayed when requested."
msgstr ""

#: kivy.uix.settings.ContentPanel.add_panel:9
#: kivy.uix.settings.InterfaceWithSidebar.add_panel:10
#: kivy.uix.settings.MenuSidebar.add_item:5 of
msgid "`name`:"
msgstr ""

#: kivy.uix.settings.ContentPanel.add_panel:9 of
msgid "The name of the panel as a string. It may be used to represent the panel."
msgstr ""

#: kivy.uix.settings.ContentPanel.add_panel:12
#: kivy.uix.settings.ContentPanel.on_current_uid:7
#: kivy.uix.settings.InterfaceWithSidebar.add_panel:13
#: kivy.uix.settings.MenuSidebar.add_item:9 of
msgid "`uid`:"
msgstr ""

#: kivy.uix.settings.ContentPanel.add_panel:12 of
msgid ""
"A unique int identifying the panel. It should be stored and used to "
"identify panels when switching."
msgstr ""

#: kivy.uix.settings.ContentPanel.add_widget:1
#: kivy.uix.settings.SettingItem.add_widget:1 of
msgid "Add a new widget as a child of this widget."
msgstr ""

#: kivy.uix.settings.ContentPanel.add_widget:4
#: kivy.uix.settings.ContentPanel.remove_widget:5
#: kivy.uix.settings.SettingItem.add_widget:4 of
msgid "`widget`: :class:`Widget`"
msgstr ""

#: kivy.uix.settings.ContentPanel.add_widget:5
#: kivy.uix.settings.SettingItem.add_widget:5 of
msgid "Widget to add to our list of children."
msgstr ""

#: kivy.uix.settings.ContentPanel.add_widget:12
#: kivy.uix.settings.SettingItem.add_widget:12 of
msgid "`index`: int, defaults to 0"
msgstr ""

#: kivy.uix.settings.ContentPanel.add_widget:7
#: kivy.uix.settings.SettingItem.add_widget:7 of
msgid ""
"Index to insert the widget in the list. Notice that the default of 0 "
"means the widget is inserted at the beginning of the list and will thus "
"be drawn on top of other sibling widgets. For a full discussion of the "
"index and widget hierarchy, please see the :doc:`Widgets Programming "
"Guide <guide/widgets>`."
msgstr ""

#: kivy.uix.settings.ContentPanel.add_widget:18
#: kivy.uix.settings.SettingItem.add_widget:18 of
msgid "`canvas`: str, defaults to None"
msgstr ""

#: kivy.uix.settings.ContentPanel.add_widget:15
#: kivy.uix.settings.SettingItem.add_widget:15 of
msgid ""
"Canvas to add widget's canvas to. Can be 'before', 'after' or None for "
"the default canvas."
msgstr ""

#: ../../docstring kivy.uix.settings.ContentPanel.container:1 of
msgid "(internal) A reference to the GridLayout that contains the settings panel."
msgstr ""

#: ../../docstring kivy.uix.settings.ContentPanel.container:4 of
msgid ""
":attr:`container` is an :class:`~kivy.properties.ObjectProperty` and "
"defaults to None."
msgstr ""

#: ../../docstring kivy.uix.settings.ContentPanel.current_panel:1 of
msgid "(internal) A reference to the current settings panel."
msgstr ""

#: ../../docstring kivy.uix.settings.ContentPanel.current_panel:3 of
msgid ""
":attr:`current_panel` is an :class:`~kivy.properties.ObjectProperty` and "
"defaults to None."
msgstr ""

#: ../../docstring kivy.uix.settings.ContentPanel.current_uid:1 of
msgid "(internal) A reference to the uid of the current settings panel."
msgstr ""

#: ../../docstring kivy.uix.settings.ContentPanel.current_uid:3 of
msgid ""
":attr:`current_uid` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 0."
msgstr ""

#: kivy.uix.settings.ContentPanel.on_current_uid:1 of
msgid ""
"The uid of the currently displayed panel. Changing this will "
"automatically change the displayed panel."
msgstr ""

#: kivy.uix.settings.ContentPanel.on_current_uid:6 of
msgid ""
"A panel uid. It should be used to retrieve and display a settings panel "
"that has previously been added with :meth:`add_panel`."
msgstr ""

#: ../../docstring kivy.uix.settings.ContentPanel.panels:1 of
msgid "(internal) Stores a dictionary mapping settings panels to their uids."
msgstr ""

#: ../../docstring kivy.uix.settings.ContentPanel.panels:3 of
msgid ""
":attr:`panels` is a :class:`~kivy.properties.DictProperty` and defaults "
"to {}."
msgstr ""

#: kivy.uix.settings.ContentPanel.remove_widget:1 of
msgid "Remove a widget from the children of this widget."
msgstr ""

#: kivy.uix.settings.ContentPanel.remove_widget:5 of
msgid "Widget to remove from our children list."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.boxlayout.BoxLayout`"
msgstr ""

#: kivy.uix.settings.InterfaceWithSidebar:1 of
msgid ""
"The default Settings interface class. It displays a sidebar menu with "
"names of available settings panels, which may be used to switch which one"
" is currently displayed."
msgstr ""

#: kivy.uix.settings.InterfaceWithSidebar:5 of
msgid ""
"See :meth:`~InterfaceWithSidebar.add_panel` for information on the method"
" you must implement if creating your own interface."
msgstr ""

#: kivy.uix.settings.InterfaceWithSidebar:8 of
msgid ""
"This class also dispatches an event 'on_close', which is triggered when "
"the sidebar menu's close button is released. If creating your own "
"interface widget, it should also dispatch such an event which will "
"automatically be caught by :class:`Settings` and used to trigger its own "
"'on_close' event."
msgstr ""

#: kivy.uix.settings.InterfaceWithSidebar.add_panel:7 of
msgid ""
"It should be stored and the interface should provide a way to switch "
"between panels."
msgstr ""

#: kivy.uix.settings.InterfaceWithSidebar.add_panel:10 of
msgid ""
"The name of the panel as a string. It may be used to represent the panel "
"but isn't necessarily unique."
msgstr ""

#: kivy.uix.settings.InterfaceWithSidebar.add_panel:13 of
msgid ""
"A unique int identifying the panel. It should be used to identify and "
"switch between panels."
msgstr ""

#: ../../docstring kivy.uix.settings.InterfaceWithSidebar.content:1 of
msgid ""
"(internal) A reference to the panel display widget (a "
":class:`ContentPanel`)."
msgstr ""

#: ../../docstring kivy.uix.settings.InterfaceWithSidebar.content:4
#: kivy.uix.settings.SettingItem.content:5 of
msgid ""
":attr:`content` is an :class:`~kivy.properties.ObjectProperty` and "
"defaults to None."
msgstr ""

#: ../../docstring kivy.uix.settings.InterfaceWithSidebar.menu:1 of
msgid "(internal) A reference to the sidebar menu widget."
msgstr ""

#: ../../docstring kivy.uix.settings.InterfaceWithSidebar.menu:3 of
msgid ""
":attr:`menu` is an :class:`~kivy.properties.ObjectProperty` and defaults "
"to None."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.floatlayout.FloatLayout`"
msgstr ""

#: kivy.uix.settings.MenuSidebar:1 of
msgid ""
"The menu used by :class:`InterfaceWithSidebar`. It provides a sidebar "
"with an entry for each settings panel, which the user may click to "
"select."
msgstr ""

#: kivy.uix.settings.MenuSidebar.add_item:1 of
msgid "This method is used to add new panels to the menu."
msgstr ""

#: kivy.uix.settings.MenuSidebar.add_item:5 of
msgid ""
"The name (a string) of the panel. It should be used to represent the "
"panel in the menu."
msgstr ""

#: kivy.uix.settings.MenuSidebar.add_item:8 of
msgid ""
"The name (an int) of the panel. It should be used internally to represent"
" the panel and used to set self.selected_uid when the panel is changed."
msgstr ""

#: ../../docstring kivy.uix.settings.MenuSidebar.buttons_layout:1 of
msgid ""
"(internal) Reference to the GridLayout that contains individual settings "
"panel menu buttons."
msgstr ""

#: ../../docstring kivy.uix.settings.MenuSidebar.buttons_layout:4
#: kivy.uix.settings.MenuSidebar.close_button:3 of
msgid ""
":attr:`buttons_layout` is an :class:`~kivy.properties.ObjectProperty` and"
" defaults to None."
msgstr ""

#: ../../docstring kivy.uix.settings.MenuSidebar.close_button:1 of
msgid "(internal) Reference to the widget's Close button."
msgstr ""

#: kivy.uix.settings.MenuSidebar.on_selected_uid:1 of
msgid ""
"(internal) unselects any currently selected menu buttons, unless they "
"represent the current panel."
msgstr ""

#: ../../docstring kivy.uix.settings.MenuSidebar.selected_uid:1 of
msgid ""
"The uid of the currently selected panel. This may be used to switch "
"between displayed panels, e.g. by binding it to the "
":attr:`~ContentPanel.current_uid` of a :class:`ContentPanel`."
msgstr ""

#: ../../docstring kivy.uix.settings.MenuSidebar.selected_uid:5 of
msgid ""
":attr:`selected_uid` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 0."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.settings.SettingItem`"
msgstr ""

#: kivy.uix.settings.SettingBoolean:1 of
msgid ""
"Implementation of a boolean setting on top of a :class:`SettingItem`. It "
"is visualized with a :class:`~kivy.uix.switch.Switch` widget. By default,"
" 0 and 1 are used for values: you can change them by setting "
":attr:`values`."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingBoolean.values:1 of
msgid ""
"Values used to represent the state of the setting. If you want to use "
"\"yes\" and \"no\" in your ConfigParser instance::"
msgstr ""

#: ../../docstring kivy.uix.settings.SettingBoolean.values:8 of
msgid ""
"You need a minimum of two values, the index 0 will be used as False, and "
"index 1 as True"
msgstr ""

#: ../../docstring kivy.uix.settings.SettingBoolean.values:11 of
msgid ""
":attr:`values` is a :class:`~kivy.properties.ListProperty` and defaults "
"to ['0', '1']"
msgstr ""

#: kivy.uix.settings.SettingItem:1 of
msgid ""
"Base class for individual settings (within a panel). This class cannot be"
" used directly; it is used for implementing the other setting classes. It"
" builds a row with a title/description (left) and a setting control "
"(right)."
msgstr ""

#: kivy.uix.settings.SettingItem:6 of
msgid ""
"Look at :class:`SettingBoolean`, :class:`SettingNumeric` and "
":class:`SettingOptions` for usage examples."
msgstr ""

#: kivy.uix.settings.SettingItem kivy.uix.settings.Settings of
msgid "Events"
msgstr ""

#: kivy.uix.settings.SettingItem:13 of
msgid "`on_release`"
msgstr ""

#: kivy.uix.settings.SettingItem:11 of
msgid "Fired when the item is touched and then released."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.content:1 of
msgid ""
"(internal) Reference to the widget that contains the real setting. As "
"soon as the content object is set, any further call to add_widget will "
"call the content.add_widget. This is automatically set."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.desc:1 of
msgid "Description of the setting, rendered on the line below the title."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.desc:3 of
msgid ""
":attr:`desc` is a :class:`~kivy.properties.StringProperty` and defaults "
"to None."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.disabled:1 of
msgid ""
"Indicate if this setting is disabled. If True, all touches on the setting"
" item will be discarded."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.disabled:4 of
msgid ""
":attr:`disabled` is a :class:`~kivy.properties.BooleanProperty` and "
"defaults to False."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.key:1 of
msgid ""
"Key of the token inside the :attr:`section` in the "
":class:`~kivy.config.ConfigParser` instance."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.key:4 of
msgid ""
":attr:`key` is a :class:`~kivy.properties.StringProperty` and defaults to"
" None."
msgstr ""

#: kivy.uix.settings.SettingItem.on_touch_down:1
#: kivy.uix.settings.Settings.on_touch_down:1 of
msgid "Receive a touch down event."
msgstr ""

#: kivy.uix.settings.SettingItem.on_touch_down:7
#: kivy.uix.settings.Settings.on_touch_down:7 of
msgid "`touch`: :class:`~kivy.input.motionevent.MotionEvent` class"
msgstr ""

#: kivy.uix.settings.SettingItem.on_touch_down:5
#: kivy.uix.settings.Settings.on_touch_down:5 of
msgid ""
"Touch received. The touch is in parent coordinates. See "
":mod:`~kivy.uix.relativelayout` for a discussion on coordinate systems."
msgstr ""

#: kivy.uix.settings.SettingItem.on_touch_down
#: kivy.uix.settings.Settings.on_touch_down of
msgid "Returns"
msgstr ""

#: kivy.uix.settings.SettingItem.on_touch_down:9
#: kivy.uix.settings.Settings.on_touch_down:9 of
msgid ""
"bool If True, the dispatching of the touch event will stop. If False, the"
" event will continue to be dispatched to the rest of the widget tree."
msgstr ""

#: kivy.uix.settings.SettingItem.on_touch_up:1 of
msgid "Receive a touch up event. The touch is in parent coordinates."
msgstr ""

#: kivy.uix.settings.SettingItem.on_touch_up:3 of
msgid "See :meth:`on_touch_down` for more information."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.panel:1 of
msgid ""
"(internal) Reference to the SettingsPanel for this setting. You don't "
"need to use it."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.panel:4 of
msgid ""
":attr:`panel` is an :class:`~kivy.properties.ObjectProperty` and defaults"
" to None."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.section:1 of
msgid ""
"Section of the token inside the :class:`~kivy.config.ConfigParser` "
"instance."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.section:4 of
msgid ""
":attr:`section` is a :class:`~kivy.properties.StringProperty` and "
"defaults to None."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.selected_alpha:1 of
msgid ""
"(internal) Float value from 0 to 1, used to animate the background when "
"the user touches the item."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.selected_alpha:4 of
msgid ""
":attr:`selected_alpha` is a :class:`~kivy.properties.NumericProperty` and"
" defaults to 0."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.title:1 of
msgid "Title of the setting, defaults to '<No title set>'."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.title:3 of
msgid ""
":attr:`title` is a :class:`~kivy.properties.StringProperty` and defaults "
"to '<No title set>'."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.value:1 of
msgid ""
"Value of the token according to the :class:`~kivy.config.ConfigParser` "
"instance. Any change to this value will trigger a "
":meth:`Settings.on_config_change` event."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingItem.value:5 of
msgid ""
":attr:`value` is an :class:`~kivy.properties.ObjectProperty` and defaults"
" to None."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.settings.SettingString`"
msgstr ""

#: kivy.uix.settings.SettingNumeric:1 of
msgid ""
"Implementation of a numeric setting on top of a :class:`SettingString`. "
"It is visualized with a :class:`~kivy.uix.label.Label` widget that, when "
"clicked, will open a :class:`~kivy.uix.popup.Popup` with a "
":class:`~kivy.uix.textinput.Textinput` so the user can enter a custom "
"value."
msgstr ""

#: kivy.uix.settings.SettingOptions:1 of
msgid ""
"Implementation of an option list on top of a :class:`SettingItem`. It is "
"visualized with a :class:`~kivy.uix.label.Label` widget that, when "
"clicked, will open a :class:`~kivy.uix.popup.Popup` with a list of "
"options from which the user can select."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingOptions.options:1 of
msgid ""
"List of all availables options. This must be a list of \"string\" items. "
"Otherwise, it will crash. :)"
msgstr ""

#: ../../docstring kivy.uix.settings.SettingOptions.options:4 of
msgid ""
":attr:`options` is a :class:`~kivy.properties.ListProperty` and defaults "
"to []."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingOptions.popup:1
#: kivy.uix.settings.SettingPath.popup:1 of
msgid "(internal) Used to store the current popup when it is shown."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingOptions.popup:3
#: kivy.uix.settings.SettingPath.popup:3
#: kivy.uix.settings.SettingString.popup:3 of
msgid ""
":attr:`popup` is an :class:`~kivy.properties.ObjectProperty` and defaults"
" to None."
msgstr ""

#: kivy.uix.settings.SettingPath:1 of
msgid ""
"Implementation of a Path setting on top of a :class:`SettingItem`. It is "
"visualized with a :class:`~kivy.uix.label.Label` widget that, when "
"clicked, will open a :class:`~kivy.uix.popup.Popup` with a "
":class:`~kivy.uix.filechooser.FileChooserListView` so the user can enter "
"a custom value."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingPath.dirselect:1 of
msgid "Whether to allow selection of directories."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingPath.dirselect:3 of
msgid ""
":attr:`dirselect` is a :class:`~kivy.properties.BooleanProperty` and "
"defaults to True."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingPath.show_hidden:1 of
msgid ""
"Whether to show 'hidden' filenames. What that means is operating-system-"
"dependent."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingPath.show_hidden:4 of
msgid ""
":attr:`show_hidden` is an :class:`~kivy.properties.BooleanProperty` and "
"defaults to False."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingPath.textinput:1
#: kivy.uix.settings.SettingString.textinput:1 of
msgid ""
"(internal) Used to store the current textinput from the popup and to "
"listen for changes."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingPath.textinput:4
#: kivy.uix.settings.SettingString.textinput:4 of
msgid ""
":attr:`textinput` is an :class:`~kivy.properties.ObjectProperty` and "
"defaults to None."
msgstr ""

#: kivy.uix.settings.SettingString:1 of
msgid ""
"Implementation of a string setting on top of a :class:`SettingItem`. It "
"is visualized with a :class:`~kivy.uix.label.Label` widget that, when "
"clicked, will open a :class:`~kivy.uix.popup.Popup` with a "
":class:`~kivy.uix.textinput.Textinput` so the user can enter a custom "
"value."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingString.popup:1 of
msgid "(internal) Used to store the current popup when it's shown."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.label.Label`"
msgstr ""

#: kivy.uix.settings.SettingTitle:1 of
msgid "A simple title label, used to organize the settings in sections."
msgstr ""

#: kivy.uix.settings.Settings:1 of
msgid ""
"Settings UI. Check module documentation for more information on how to "
"use this class."
msgstr ""

#: kivy.uix.settings.Settings:10 of
msgid "`on_config_change`: ConfigParser instance, section, key, value"
msgstr ""

#: kivy.uix.settings.Settings:6 of
msgid "Fired when the section's key-value pair of a ConfigParser changes."
msgstr ""

#: kivy.uix.settings.Settings:16 of
msgid "`on_close`"
msgstr ""

#: kivy.uix.settings.Settings:13 of
msgid "Fired by the default panel when the Close button is pressed."
msgstr ""

#: kivy.uix.settings.Settings.add_interface:1 of
msgid ""
"(Internal) creates an instance of :attr:`Settings.interface_cls`, and "
"sets it to :attr:`~Settings.interface`. When json panels are created, "
"they will be added to this interface which will display them to the user."
msgstr ""

#: kivy.uix.settings.Settings.add_json_panel:1 of
msgid ""
"Create and add a new :class:`SettingsPanel` using the configuration "
"`config` with the JSON definition `filename`. If `filename` is not set, "
"then the JSON definition is read from the `data` parameter instead."
msgstr ""

#: kivy.uix.settings.Settings.add_json_panel:5 of
msgid ""
"Check the :ref:`settings_json` section in the documentation for more "
"information about JSON format and the usage of this function."
msgstr ""

#: kivy.uix.settings.Settings.add_kivy_panel:1 of
msgid ""
"Add a panel for configuring Kivy. This panel acts directly on the kivy "
"configuration. Feel free to include or exclude it in your configuration."
msgstr ""

#: kivy.uix.settings.Settings.add_kivy_panel:5 of
msgid ""
"See :meth:`~kivy.app.App.use_kivy_settings` for information on "
"enabling/disabling the automatic kivy panel."
msgstr ""

#: kivy.uix.settings.Settings.create_json_panel:1 of
msgid "Create new :class:`SettingsPanel`."
msgstr ""

#: kivy.uix.settings.Settings.create_json_panel:5 of
msgid "Check the documentation of :meth:`add_json_panel` for more information."
msgstr ""

#: ../../docstring kivy.uix.settings.Settings.interface:1 of
msgid ""
"(internal) Reference to the widget that will contain, organise and "
"display the panel configuration panel widgets."
msgstr ""

#: ../../docstring kivy.uix.settings.Settings.interface:4 of
msgid ""
":attr:`interface` is an :class:`~kivy.properties.ObjectProperty` and "
"defaults to None."
msgstr ""

#: ../../docstring kivy.uix.settings.Settings.interface_cls:1 of
msgid ""
"The widget class that will be used to display the graphical interface for"
" the settings panel. By default, it displays one Settings panel at a time"
" with a sidebar to switch between them."
msgstr ""

#: ../../docstring kivy.uix.settings.Settings.interface_cls:5 of
msgid ""
":attr:`interface_cls` is an :class:`~kivy.properties.ObjectProperty` and "
"defaults to :class:`InterfaceWithSidebar`."
msgstr ""

#: ../../docstring kivy.uix.settings.Settings.interface_cls:9 of
msgid ""
"If you set a string, the :class:`~kivy.factory.Factory` will be used to "
"resolve the class."
msgstr ""

#: kivy.uix.settings.Settings.register_type:1 of
msgid "Register a new type that can be used in the JSON definition."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.gridlayout.GridLayout`"
msgstr ""

#: kivy.uix.settings.SettingsPanel:1 of
msgid ""
"This class is used to construct panel settings, for use with a "
":class:`Settings` instance or subclass."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingsPanel.config:1 of
msgid ""
"A :class:`kivy.config.ConfigParser` instance. See module documentation "
"for more information."
msgstr ""

#: kivy.uix.settings.SettingsPanel.get_value:1 of
msgid ""
"Return the value of the section/key from the :attr:`config` ConfigParser "
"instance. This function is used by :class:`SettingItem` to get the value "
"for a given section/key."
msgstr ""

#: kivy.uix.settings.SettingsPanel.get_value:5 of
msgid ""
"If you don't want to use a ConfigParser instance, you might want to "
"override this function."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingsPanel.settings:1 of
msgid ""
"A :class:`Settings` instance that will be used to fire the "
"`on_config_change` event."
msgstr ""

#: ../../docstring kivy.uix.settings.SettingsPanel.title:1 of
msgid ""
"Title of the panel. The title will be reused by the :class:`Settings` in "
"the sidebar."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.settings.Settings`"
msgstr ""

#: kivy.uix.settings.SettingsWithNoMenu:1 of
msgid ""
"A settings widget that displays a single settings panel with *no* Close "
"button. It will not accept more than one Settings panel. It is intended "
"for use in programs with few enough settings that a full panel switcher "
"is not useful."
msgstr ""

#: kivy.uix.settings.SettingsWithNoMenu:8 of
msgid ""
"This Settings panel does *not* provide a Close button, and so it is "
"impossible to leave the settings screen unless you also add other "
"behaviour or override :meth:`~kivy.app.App.display_settings` and "
":meth:`~kivy.app.App.close_settings`."
msgstr ""

#: kivy.uix.settings.SettingsWithSidebar:1 of
msgid ""
"A settings widget that displays settings panels with a sidebar to switch "
"between them. This is the default behaviour of :class:`Settings`, and "
"this widget is a trivial wrapper subclass."
msgstr ""

#: kivy.uix.settings.SettingsWithSpinner:1 of
msgid ""
"A settings widget that displays one settings panel at a time with a "
"spinner at the top to switch between them."
msgstr ""

#: kivy.uix.settings.SettingsWithTabbedPanel:1 of
msgid ""
"A settings widget that displays settings panels as pages in a "
":class:`~kivy.uix.tabbedpanel.TabbedPanel`."
msgstr ""

