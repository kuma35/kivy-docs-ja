# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.storage.rst:3
msgid "Storage"
msgstr ""

#: kivy.storage:6 of
msgid ""
"This module is still experimental, and the API is subject to change in a "
"future version."
msgstr ""

#: kivy.storage:10 of
msgid "Usage"
msgstr ""

#: kivy.storage:12 of
msgid ""
"The idea behind the Storage module is to be able to load/store any number"
" of key-value pairs via an indexed key. The default model is abstract so "
"you cannot use it directly. We provide some implementations such as:"
msgstr ""

#: kivy.storage:16 of
msgid ":class:`kivy.storage.dictstore.DictStore`: use a python dict as a store"
msgstr ""

#: kivy.storage:17 of
msgid ""
":class:`kivy.storage.jsonstore.JsonStore`: use a `JSON "
"<https://en.wikipedia.org/wiki/JSON>`_ file as a store"
msgstr ""

#: kivy.storage:19 of
msgid ""
":class:`kivy.storage.redisstore.RedisStore`: use a `Redis "
"<http://redis.io>`_ database with `redis-py "
"<https://github.com/andymccurdy/redis-py>`_"
msgstr ""

#: kivy.storage:24 of
msgid "Examples"
msgstr ""

#: kivy.storage:26 of
msgid "For example, let's use a JsonStore::"
msgstr ""

#: kivy.storage:47 of
msgid ""
"Because the data is persistent, you can check later to see if the key "
"exists::"
msgstr ""

#: kivy.storage:58 of
msgid "Synchronous / Asynchronous API"
msgstr ""

#: kivy.storage:60 of
msgid ""
"All the standard methods (:meth:`~AbstractStore.get`, "
":meth:`~AbstractStore.put` , :meth:`~AbstractStore.exists`, "
":meth:`~AbstractStore.delete`, :meth:`~AbstractStore.find`) have an "
"asynchronous version."
msgstr ""

#: kivy.storage:65 of
msgid ""
"For example, the *get* method has a `callback` parameter. If set, the "
"`callback` will be used to return the result to the user when available: "
"the request will be asynchronous. If the `callback` is None, then the "
"request will be synchronous and the result will be returned directly."
msgstr ""

#: kivy.storage:71 of
msgid "Without callback (Synchronous API)::"
msgstr ""

#: kivy.storage:76 of
msgid "With callback (Asynchronous API)::"
msgstr ""

#: kivy.storage:83 of
msgid "The callback signature (for almost all methods) is::"
msgstr ""

#: kivy.storage:94 of
msgid "Synchronous container type"
msgstr ""

#: kivy.storage:96 of
msgid "The storage API emulates the container type for the synchronous API::"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: kivy.storage.AbstractStore:1 of
msgid "Abstract class used to implement a Store"
msgstr ""

#: kivy.storage.AbstractStore.async_clear:1 of
msgid "Asynchronous version of :meth:`clear`."
msgstr ""

#: kivy.storage.AbstractStore.async_count:1 of
msgid "Asynchronously return the number of entries in the storage."
msgstr ""

#: kivy.storage.AbstractStore.async_delete:1 of
msgid "Asynchronous version of :meth:`delete`."
msgstr ""

#: kivy.storage.AbstractStore.async_delete
#: kivy.storage.AbstractStore.async_exists
#: kivy.storage.AbstractStore.async_find kivy.storage.AbstractStore.async_get
#: kivy.storage.AbstractStore.async_put of
msgid "Callback arguments"
msgstr ""

#: kivy.storage.AbstractStore.async_delete:4
#: kivy.storage.AbstractStore.async_exists:4
#: kivy.storage.AbstractStore.async_find:6
#: kivy.storage.AbstractStore.async_get:4
#: kivy.storage.AbstractStore.async_put:4 of
msgid "`store`: :class:`AbstractStore` instance"
msgstr ""

#: kivy.storage.AbstractStore.async_delete:5
#: kivy.storage.AbstractStore.async_exists:5
#: kivy.storage.AbstractStore.async_find:7
#: kivy.storage.AbstractStore.async_get:5
#: kivy.storage.AbstractStore.async_put:5 of
msgid "Store instance"
msgstr ""

#: kivy.storage.AbstractStore.async_delete:6
#: kivy.storage.AbstractStore.async_exists:6
#: kivy.storage.AbstractStore.async_find:9
#: kivy.storage.AbstractStore.async_get:6
#: kivy.storage.AbstractStore.async_put:6 of
msgid "`key`: string"
msgstr ""

#: kivy.storage.AbstractStore.async_delete:7
#: kivy.storage.AbstractStore.async_exists:7
#: kivy.storage.AbstractStore.async_get:7
#: kivy.storage.AbstractStore.async_put:7 of
msgid "Name of the key to search for"
msgstr ""

#: kivy.storage.AbstractStore.async_delete:9
#: kivy.storage.AbstractStore.async_find:12
#: kivy.storage.AbstractStore.async_put:9 of
msgid "`result`: bool"
msgstr ""

#: kivy.storage.AbstractStore.async_delete:9
#: kivy.storage.AbstractStore.async_find:12
#: kivy.storage.AbstractStore.async_put:9 of
msgid ""
"Indicate True if the storage has been updated, or False if nothing has "
"been done (no changes). None if any error."
msgstr ""

#: kivy.storage.AbstractStore.async_exists:1 of
msgid "Asynchronous version of :meth:`exists`."
msgstr ""

#: kivy.storage.AbstractStore.async_exists:8 of
msgid "`result`: boo"
msgstr ""

#: kivy.storage.AbstractStore.async_exists:9
#: kivy.storage.AbstractStore.async_get:9 of
msgid "Result of the query, None if any error"
msgstr ""

#: kivy.storage.AbstractStore.async_find:1 of
msgid "Asynchronous version of :meth:`find`."
msgstr ""

#: kivy.storage.AbstractStore.async_find:3 of
msgid "The callback will be called for each entry in the result."
msgstr ""

#: kivy.storage.AbstractStore.async_find:9 of
msgid "Name of the key to search for, or None if we reach the end of the results"
msgstr ""

#: kivy.storage.AbstractStore.async_get:1 of
msgid "Asynchronous version of :meth:`get`."
msgstr ""

#: kivy.storage.AbstractStore.async_get:8 of
msgid "`result`: dict"
msgstr ""

#: kivy.storage.AbstractStore.async_keys:1 of
msgid "Asynchronously return all the keys in the storage."
msgstr ""

#: kivy.storage.AbstractStore.async_put:1 of
msgid "Asynchronous version of :meth:`put`."
msgstr ""

#: kivy.storage.AbstractStore.clear:1 of
msgid "Wipe the whole storage."
msgstr ""

#: kivy.storage.AbstractStore.count:1 of
msgid "Return the number of entries in the storage."
msgstr ""

#: kivy.storage.AbstractStore.delete:1 of
msgid ""
"Delete a key from the storage. If the key is not found, a `KeyError` "
"exception will be thrown."
msgstr ""

#: kivy.storage.AbstractStore.exists:1 of
msgid "Check if a key exists in the store."
msgstr ""

#: kivy.storage.AbstractStore.find:1 of
msgid ""
"Return all the entries matching the filters. The entries are returned "
"through a generator as a list of (key, entry) pairs where *entry* is a "
"dict of key-value pairs ::"
msgstr ""

#: kivy.storage.AbstractStore.find:8 of
msgid ""
"Because it's a generator, you cannot directly use it as a list. You can "
"do::"
msgstr ""

#: kivy.storage.AbstractStore.get:1 of
msgid ""
"Get the key-value pairs stored at `key`. If the key is not found, a "
"`KeyError` exception will be thrown."
msgstr ""

#: kivy.storage.AbstractStore.keys:1 of
msgid "Return a list of all the keys in the storage."
msgstr ""

#: kivy.storage.AbstractStore.put:1 of
msgid ""
"Put new key-value pairs (given in *values*) into the storage. Any "
"existing key-value pairs will be removed."
msgstr ""

