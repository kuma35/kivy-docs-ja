# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.tools.packaging.pyinstaller_hooks.rst:3
msgid "Pyinstaller hooks"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:2 of
msgid "Module that exports pyinstaller related methods and parameters."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:5 of
msgid "Hooks"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:7 of
msgid ""
"PyInstaller comes with a default hook for kivy that lists the indirectly "
"imported modules that pyinstaller would not find on its own using "
":func:`get_deps_all`. :func:`hookspath` returns the path to an alternate "
"kivy hook, ``kivy/tools/packaging/pyinstaller_hooks/kivy-hook.py`` that "
"does not add these dependencies to its list of hidden imports and they "
"have to be explicitly included instead."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:14 of
msgid ""
"One can overwrite the default hook by providing on the command line the "
"``--additional-hooks-dir=HOOKSPATH`` option. Because although the default"
" hook will still run, the `important global variables "
"<https://pythonhosted.org/PyInstaller/#hook-global-variables>`_, e.g. "
"``excludedimports`` and ``hiddenimports`` will be overwritten by the new "
"hook, if set there."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:21 of
msgid ""
"Additionally, one can add a hook to be run after the default hook by "
"passing e.g. ``hookspath=[HOOKSPATH]`` to the ``Analysis`` class. In both"
" cases, ``HOOKSPATH`` is the path to a directory containing a file named "
"``hook-kivy.py`` that is the pyinstaller hook for kivy to be processed "
"after the default hook."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:28 of
msgid "hiddenimports"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:30 of
msgid ""
"When a module is imported indirectly, e.g. with ``__import__``, "
"pyinstaller won't know about it and the module has to be added through "
"``hiddenimports``."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:33 of
msgid ""
"``hiddenimports`` and other hook variables can be specified within a hook"
" as described above. Also, these variable can be passed to ``Analysis`` "
"and their values are then appended to the hook's values for these "
"variables."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:37 of
msgid ""
"Most of kivy's core modules, e.g. video are imported indirectly and "
"therefore need to be added in hiddenimports. The default PyInstaller hook"
" adds all the providers. To overwrite, a modified kivy-hook similar to "
"the default hook, such as :func:`hookspath` that only imports the desired"
" modules can be added. One then uses :func:`get_deps_minimal` or "
":func:`get_deps_all` to get the list of modules and adds them manually in"
" a modified hook or passes them to ``Analysis`` in the spec file."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:46 of
msgid "Hook generator"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:48 of
msgid ""
":mod:`pyinstaller_hooks` includes a tool to generate a hook which lists "
"all the provider modules in a list so that one can manually comment out "
"the providers not to be included. To use, do::"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks:54 of
msgid ""
"``filename`` is the name and path of the hook file to create. If "
"``filename`` is not provided the hook is printed to the terminal."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.add_dep_paths:1 of
msgid ""
"Should be called by the hook. It adds the paths with the binary "
"dependencies to the system path so that pyinstaller can find the binaries"
" during its crawling stage."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_all:1 of
msgid ""
"Similar to :func:`get_deps_minimal`, but this returns all the kivy "
"modules that can indirectly imported. Which includes all the possible "
"kivy providers."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_all:5 of
msgid ""
"This can be used to get a list of all the possible providers which can "
"then manually be included/excluded by commenting out elements in the list"
" instead of passing on all the items. See module description."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_all
#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal of
msgid "Returns"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_all:9 of
msgid ""
"A dict with three keys, ``hiddenimports``, ``excludes``, and "
"``binaries``. Their values are a list of the corresponding modules to "
"include/exclude. This can be passed directly to `Analysis`` with e.g. ::"
"      a = Analysis(['..\\kivy\\examples\\demo\\touchtracer\\main.py'],"
"                 ...                  **get_deps_all())"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_all:11
#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:33 of
msgid ""
"A dict with three keys, ``hiddenimports``, ``excludes``, and "
"``binaries``. Their values are a list of the corresponding modules to "
"include/exclude. This can be passed directly to `Analysis`` with e.g. ::"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:1 of
msgid ""
"Returns Kivy hidden modules as well as excluded modules to be used with "
"``Analysis``."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:4 of
msgid ""
"The function takes core modules as keyword arguments and their value "
"indicates which of the providers to include/exclude from the compiled "
"app."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:7 of
msgid ""
"The possible keyword names are ``audio, camera, clipboard, image, "
"spelling, text, video, and window``. Their values can be:"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:12 of
msgid "``True``: Include current provider"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:11 of
msgid ""
"The providers imported when the core module is loaded on this system are "
"added to hidden imports. This is the default if the keyword name is not "
"specified."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:14 of
msgid "``None``: Exclude"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:15 of
msgid "Don't return this core module at all."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:18 of
msgid "``A string or list of strings``: Providers to include"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:17 of
msgid "Each string is the name of a provider for this module to be included."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:20 of
msgid ""
"For example, ``get_deps_minimal(video=None, window=True, "
"audio=['gstplayer', 'ffpyplayer'], spelling='enchant')`` will exclude all"
" the video providers, will include the gstreamer and ffpyplayer providers"
" for audio, will include the enchant provider for spelling, and will use "
"the current default provider for ``window``."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:26 of
msgid ""
"``exclude_ignored``, if ``True`` (the default), if the value for a core "
"library is ``None``, then if ``exclude_ignored`` is True, not only will "
"the library not be included in the hiddenimports but it'll also added to "
"the excluded imports to prevent it being included accidentally by "
"pyinstaller."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_deps_minimal:31 of
msgid ""
"A dict with three keys, ``hiddenimports``, ``excludes``, and "
"``binaries``. Their values are a list of the corresponding modules to "
"include/exclude. This can be passed directly to `Analysis`` with e.g. ::"
"      a = Analysis(['..\\kivy\\examples\\demo\\touchtracer\\main.py'],"
"                 ...                  hookspath=hookspath(),"
"                  runtime_hooks=[],                  "
"win_no_prefer_redirects=False,                  "
"win_private_assemblies=False,                  cipher=block_cipher,"
"                  **get_deps_minimal(video=None, audio=None))"
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_factory_modules:1 of
msgid "Returns a list of all the modules registered in the kivy factory."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.get_hooks:1 of
msgid "Returns the dict for the spec ``hookspath`` and ``runtime_hooks`` values."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.hookspath:1 of
msgid ""
"Returns a list with the directory that contains the alternate (not the "
"default included with pyinstaller) pyinstaller hook for kivy, "
"``kivy/tools/packaging/pyinstaller_hooks/kivy-hook.py``. It is typically "
"used with ``hookspath=hookspath()`` in the spec file."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.hookspath:7 of
msgid ""
"The default pyinstaller hook returns all the core providers used using "
":func:`get_deps_minimal` to add to its list of hidden imports. This "
"alternate hook only included the essential modules and leaves the core "
"providers to be included additionally with :func:`get_deps_minimal` or "
":func:`get_deps_all`."
msgstr ""

#: kivy.tools.packaging.pyinstaller_hooks.runtime_hooks:1 of
msgid ""
"Returns a list with the runtime hooks for kivy. It can be used with "
"``runtime_hooks=runtime_hooks()`` in the spec file. Pyinstaller comes "
"preinstalled with this hook."
msgstr ""

