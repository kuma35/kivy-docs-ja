# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.core.image.rst:3
msgid "Image"
msgstr ""

#: kivy.core.image:2 of
msgid ""
"Core classes for loading images and converting them to a "
":class:`~kivy.graphics.texture.Texture`. The raw image data can be keep "
"in memory for further access."
msgstr ""

#: kivy.core.image:8 of
msgid "Add support for argb and abgr image data"
msgstr ""

#: kivy.core.image:11 of
msgid "In-memory image loading"
msgstr ""

#: kivy.core.image:15 of
msgid ""
"Official support for in-memory loading. Not all the providers support it,"
" but currently SDL2, pygame, pil and imageio work."
msgstr ""

#: kivy.core.image:18 of
msgid "To load an image with a filename, you would usually do::"
msgstr ""

#: kivy.core.image:23 of
msgid ""
"You can also load the image data directly from a memory block. Instead of"
" passing the filename, you'll need to pass the data as a BytesIO object "
"together with an \"ext\" parameter. Both are mandatory::"
msgstr ""

#: kivy.core.image:32 of
msgid ""
"By default, the image will not be cached as our internal cache requires a"
" filename. If you want caching, add a filename that represents your file "
"(it will be used only for caching)::"
msgstr ""

#: kivy.core.image:42 of
msgid "Saving an image"
msgstr ""

#: kivy.core.image:44 of
msgid "A CoreImage can be saved to a file::"
msgstr ""

#: kivy.core.image:50 of
msgid "Or you can get the bytes (new in `1.11.0`):"
msgstr ""

#: kivy.core.image:52 of
msgid ""
"import io from kivy.core.image import Image as CoreImage data = "
"io.BytesIO() image = CoreImage(...) image.save(data, fmt=\"png\") "
"png_bytes = data.read()"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: kivy.core.image.Image:1 of
msgid "Load an image and store the size and texture."
msgstr ""

#: kivy.core.image.Image:5 of
msgid ""
"`mipmap` attribute has been added. The `texture_mipmap` and "
"`texture_rectangle` have been deleted."
msgstr ""

#: kivy.core.image.Image:10 of
msgid ""
"An Image widget can change its texture. A new event 'on_texture' has been"
" introduced. New methods for handling sequenced animation have been "
"added."
msgstr ""

#: kivy.core.image.Image kivy.core.image.Image.anim_reset
#: kivy.core.image.Image.load kivy.core.image.Image.read_pixel of
msgid "Parameters"
msgstr ""

#: kivy.core.image.Image:19 of
msgid "`arg`: can be a string (str), Texture, BytesIO or Image object"
msgstr ""

#: kivy.core.image.Image:16 of
msgid ""
"A string path to the image file or data URI to be loaded; or a Texture "
"object, which will be wrapped in an Image object; or a BytesIO object "
"containing raw image data; or an already existing image object, in which "
"case, a real copy of the given image object will be returned."
msgstr ""

#: kivy.core.image.Image:21 kivy.core.image.Image.load:6 of
msgid "`keep_data`: bool, defaults to False"
msgstr ""

#: kivy.core.image.Image:22 kivy.core.image.Image.load:7 of
msgid "Keep the image data when the texture is created."
msgstr ""

#: kivy.core.image.Image:23 of
msgid "`mipmap`: bool, defaults to False"
msgstr ""

#: kivy.core.image.Image:24 of
msgid "Create mipmap for the texture."
msgstr ""

#: kivy.core.image.Image:26 of
msgid "`anim_delay`: float, defaults to .25"
msgstr ""

#: kivy.core.image.Image:26 of
msgid ""
"Delay in seconds between each animation frame. Lower values means faster "
"animation."
msgstr ""

#: kivy.core.image.Image:28 of
msgid "`ext`: str, only with BytesIO `arg`"
msgstr ""

#: kivy.core.image.Image:29 of
msgid "File extension to use in determining how to load raw image data."
msgstr ""

#: kivy.core.image.Image:32 of
msgid "`filename`: str, only with BytesIO `arg`"
msgstr ""

#: kivy.core.image.Image:31 of
msgid "Filename to use in the image cache for raw image data."
msgstr ""

#: kivy.core.image.Image.anim_available:1 of
msgid "Return True if this Image instance has animation available."
msgstr ""

#: kivy.core.image.Image.anim_delay:1 of
msgid "Delay between each animation frame. A lower value means faster animation."
msgstr ""

#: kivy.core.image.Image.anim_index:1 of
msgid "Return the index number of the image currently in the texture."
msgstr ""

#: kivy.core.image.Image.anim_reset:1 of
msgid "Reset an animation if available."
msgstr ""

#: kivy.core.image.Image.anim_reset:7 of
msgid "`allow_anim`: bool"
msgstr ""

#: kivy.core.image.Image.anim_reset:7 of
msgid "Indicate whether the animation should restart playing or not."
msgstr ""

#: kivy.core.image.Image.anim_reset:9 kivy.core.image.Image.remove_from_cache:6
#: of
msgid "Usage::"
msgstr ""

#: kivy.core.image.Image.anim_reset:17 of
msgid "You can change the animation speed whilst it is playing::"
msgstr ""

#: kivy.core.image.Image.filename:1 of
msgid "Get/set the filename of image"
msgstr ""

#: kivy.core.image.Image.height:1 of
msgid "Image height"
msgstr ""

#: kivy.core.image.Image.image:1 of
msgid "Get/set the data image object"
msgstr ""

#: kivy.core.image.Image.load:1 of
msgid "Load an image"
msgstr ""

#: kivy.core.image.Image.load:4 of
msgid "`filename`: str"
msgstr ""

#: kivy.core.image.Image.load:5 of
msgid "Filename of the image."
msgstr ""

#: kivy.core.image.Image.load_memory:1 of
msgid "(internal) Method to load an image from raw data."
msgstr ""

#: kivy.core.image.Image.nocache:1 of
msgid "Indicate whether the texture will not be stored in the cache or not."
msgstr ""

#: kivy.core.image.Image.on_texture:2 of
msgid "This event is fired when the texture reference or content has"
msgstr ""

#: kivy.core.image.Image.on_texture:2 of
msgid "changed. It is normally used for sequenced images."
msgstr ""

#: kivy.core.image.Image.read_pixel:1 of
msgid "For a given local x/y position, return the pixel color at that position."
msgstr ""

#: kivy.core.image.Image.read_pixel:5 of
msgid ""
"This function can only be used with images loaded with the keep_data=True"
" keyword. For example::"
msgstr ""

#: kivy.core.image.Image.read_pixel:12 of
msgid "`x`: int"
msgstr ""

#: kivy.core.image.Image.read_pixel:13 of
msgid "Local x coordinate of the pixel in question."
msgstr ""

#: kivy.core.image.Image.read_pixel:14 of
msgid "`y`: int"
msgstr ""

#: kivy.core.image.Image.read_pixel:15 of
msgid "Local y coordinate of the pixel in question."
msgstr ""

#: kivy.core.image.Image.remove_from_cache:1 of
msgid ""
"Remove the Image from cache. This facilitates re-loading of images from "
"disk in case the image content has changed."
msgstr ""

#: kivy.core.image.Image.save:1 of
msgid "Save image texture to file."
msgstr ""

#: kivy.core.image.Image.save:3 of
msgid ""
"The filename should have the '.png' extension because the texture data "
"read from the GPU is in the RGBA format. '.jpg' might work but has not "
"been heavily tested so some providers might break when using it. Any "
"other extensions are not officially supported."
msgstr ""

#: kivy.core.image.Image.save:8 of
msgid ""
"The flipped parameter flips the saved image vertically, and defaults to "
"False."
msgstr ""

#: kivy.core.image.Image.save:11 of
msgid "Example::"
msgstr ""

#: kivy.core.image.Image.save:25 of
msgid ""
"Parameter `flipped` added to flip the image before saving, default to "
"False."
msgstr ""

#: kivy.core.image.Image.save:29 of
msgid ""
"Parameter `fmt` added to force the output format of the file Filename can"
" now be a BytesIO object."
msgstr ""

#: kivy.core.image.Image.size:1 of
msgid "Image size (width, height)"
msgstr ""

#: kivy.core.image.Image.texture:1 of
msgid "Texture of the image"
msgstr ""

#: kivy.core.image.Image.width:1 of
msgid "Image width"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: kivy.core.image.ImageData:1 of
msgid ""
"Container for images and mipmap images. The container will always have at"
" least the mipmap level 0."
msgstr ""

#: kivy.core.image.ImageData.add_mipmap:1 of
msgid "Add a image for a specific mipmap level."
msgstr ""

#: kivy.core.image.ImageData.data:1 of
msgid "Image data. (If the image is mipmapped, it will use the level 0)"
msgstr ""

#: ../../docstring kivy.core.image.ImageData.flip_vertical:1 of
msgid "Indicate if the texture will need to be vertically flipped"
msgstr ""

#: ../../docstring kivy.core.image.ImageData.fmt:1 of
msgid "Decoded image format, one of a available texture format"
msgstr ""

#: kivy.core.image.ImageData.get_mipmap:1 of
msgid "Get the mipmap image at a specific level if it exists"
msgstr ""

#: kivy.core.image.ImageData.height:1 of
msgid ""
"Image height in pixels. (If the image is mipmapped, it will use the level"
" 0)"
msgstr ""

#: kivy.core.image.ImageData.iterate_mipmaps:1 of
msgid "Iterate over all mipmap images available."
msgstr ""

#: ../../docstring kivy.core.image.ImageData.mipmaps:1 of
msgid "Data for each mipmap."
msgstr ""

#: kivy.core.image.ImageData.rowlength:1 of
msgid "Image rowlength. (If the image is mipmapped, it will use the level 0)"
msgstr ""

#: kivy.core.image.ImageData.size:1 of
msgid ""
"Image (width, height) in pixels. (If the image is mipmapped, it will use "
"the level 0)"
msgstr ""

#: ../../docstring kivy.core.image.ImageData.source:1 of
msgid "Image source, if available"
msgstr ""

#: kivy.core.image.ImageData.width:1 of
msgid ""
"Image width in pixels. (If the image is mipmapped, it will use the level "
"0)"
msgstr ""

