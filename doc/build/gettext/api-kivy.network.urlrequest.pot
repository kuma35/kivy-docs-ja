# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.network.urlrequest.rst:3
msgid "UrlRequest"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest:4
msgid "You can use the :class:`UrlRequest` to make asynchronous requests on the web and get the result when the request is completed. The spirit is the same as the XHR object in Javascript."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest:8
msgid "The content is also decoded if the Content-Type is application/json and the result automatically passed through json.loads."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest:12
msgid "The syntax to create a request::"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest:21
msgid "Only the first argument is mandatory: the rest are optional. By default, a \"GET\" request will be sent. If the :attr:`UrlRequest.req_body` is not None, a \"POST\" request will be sent. It's up to you to adjust :attr:`UrlRequest.req_headers` to suit your requirements and the response to the request will be accessible as the parameter called \"result\" on the callback function of the on_success event."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest:29
msgid "Example of fetching JSON::"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest:37
msgid "Example of Posting data (adapted from httplib example)::"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest:52
msgid "If you want a synchronous request, you can call the wait() method."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`threading.Thread`"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:1
msgid "A UrlRequest. See module documentation for usage."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:3
msgid "Add `debug` parameter"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:6
msgid "Add `method` parameter"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:11
msgid "Parameter `decode` added. Parameter `file_path` added. Parameter `on_redirect` added. Parameter `on_failure` added."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:18
msgid "Parameter `ca_file` added. Parameter `verify` added."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:23
msgid "Parameters `proxy_host`, `proxy_port` and `proxy_headers` added."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:27
msgid "Parameters `on_cancel` added."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:31
msgid "Parameters `on_finish` added. Parameters `auth` added."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:0
msgid "Parameters"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:35
msgid "`url`: str"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:36
msgid "Complete url string to call."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:37
msgid "`on_success`: callback(request, result)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:38
msgid "Callback function to call when the result has been fetched."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:39
msgid "`on_redirect`: callback(request, result)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:40
msgid "Callback function to call if the server returns a Redirect."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:42
msgid "`on_failure`: callback(request, result)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:42
msgid "Callback function to call if the server returns a Client or Server Error."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:44
msgid "`on_error`: callback(request, error)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:45
msgid "Callback function to call if an error occurs."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:49
msgid "`on_progress`: callback(request, current_size, total_size)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:47
msgid "Callback function that will be called to report progression of the download. `total_size` might be -1 if no Content-Length has been reported in the http response. This callback will be called after each `chunk_size` is read."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:52
msgid "`on_cancel`: callback(request)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:52
msgid "Callback function to call if user requested to cancel the download operation via the .cancel() method."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:54
msgid "`on_finish`: callback(request)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:55
msgid "Additional callback function to call if request is done."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:57
msgid "`req_body`: str, defaults to None"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:57
msgid "Data to sent in the request. If it's not None, a POST will be done instead of a GET."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:59
msgid "`req_headers`: dict, defaults to None"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:60
msgid "Custom headers to add to the request."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:65
msgid "`chunk_size`: int, defaults to 8192"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:62
msgid "Size of each chunk to read, used only when `on_progress` callback has been set. If you decrease it too much, a lot of on_progress callbacks will be fired and will slow down your download. If you want to have the maximum download speed, increase the chunk_size or don't use ``on_progress``."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:67
msgid "`timeout`: int, defaults to None"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:68
msgid "If set, blocking operations will timeout after this many seconds."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:69
msgid "`method`: str, defaults to 'GET' (or 'POST' if ``body`` is specified)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:70
msgid "The HTTP method to use."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:71
msgid "`decode`: bool, defaults to True"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:72
msgid "If False, skip decoding of the response."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:74
msgid "`debug`: bool, defaults to False"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:74
msgid "If True, it will use the Logger.debug to print information about url access/progression/errors."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:77
msgid "`file_path`: str, defaults to None"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:77
msgid "If set, the result of the UrlRequest will be written to this path instead of in memory."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:80
msgid "`ca_file`: str, defaults to None"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:80
msgid "Indicates a SSL CA certificate file path to validate HTTPS certificates against"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:82
msgid "`verify`: bool, defaults to True"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:83
msgid "If False, disables SSL CA certificate verification"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:84
msgid "`proxy_host`: str, defaults to None"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:85
msgid "If set, the proxy host to use for this connection."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:87
msgid "`proxy_port`: int, defaults to None"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:87
msgid "If set, and `proxy_host` is also set, the port to use for connecting to the proxy server."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:90
msgid "`proxy_headers`: dict, defaults to None"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:90
msgid "If set, and `proxy_host` is also set, the headers to send to the proxy server in the ``CONNECT`` request."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:95
msgid "`auth`: HTTPBasicAuth, defaults to None"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase:93
msgid "If set, request will use basicauth to authenticate. Only used in \"Requests\" implementation"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.cancel:1
msgid "Cancel the current request. It will be aborted, and the result will not be dispatched. Once cancelled, the callback on_cancel will be called."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.chunk_size:1
msgid "Return the size of a chunk, used only in \"progress\" mode (when on_progress callback is set.)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.decode_result:1
msgid "Decode the result fetched from url according to his Content-Type. Currently supports only application/json."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.error:1
msgid "Return the error of the request. This value is not determined until the request is completed."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.is_finished:1
msgid "Return True if the request has finished, whether it's a success or a failure."
msgstr ""

#: ../../docstring of kivy.network.urlrequest.UrlRequestBase.req_body:1
msgid "Request body passed in __init__"
msgstr ""

#: ../../docstring of kivy.network.urlrequest.UrlRequestBase.req_headers:1
msgid "Request headers passed in __init__"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.resp_headers:1
msgid "If the request has been completed, return a dictionary containing the headers of the response. Otherwise, it will return None."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.resp_status:1
msgid "Return the status code of the response if the request is complete, otherwise return None."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.result:1
msgid "Return the result of the request. This value is not determined until the request is finished."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.run:1
msgid "Method representing the thread's activity."
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.run:3
msgid "You may override this method in a subclass. The standard run() method invokes the callable object passed to the object's constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively."
msgstr ""

#: ../../docstring of kivy.network.urlrequest.UrlRequestBase.url:1
msgid "Url of the request"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.wait:1
msgid "Wait for the request to finish (until :attr:`resp_status` is not None)"
msgstr ""

#: ../../../kivy/network/urlrequest.py:docstring of kivy.network.urlrequest.UrlRequestBase.wait:5
msgid "This method is intended to be used in the main thread, and the callback will be dispatched from the same thread from which you're calling."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.network.urlrequest.UrlRequestBase`"
msgstr ""
