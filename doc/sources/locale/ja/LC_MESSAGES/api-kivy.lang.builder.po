# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.lang.builder.rst:3
msgid "Builder"
msgstr ""

#: kivy.lang.builder:2 of
msgid ""
"Class used for the registering and application of rules for specific "
"widgets."
msgstr ""

#: ../../docstring kivy.lang.builder.Builder:1 of
msgid "Main instance of a :class:`BuilderBase`."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: kivy.lang.builder.BuilderBase:1 of
msgid ""
"The Builder is responsible for creating a :class:`Parser` for parsing a "
"kv file, merging the results into its internal rules, templates, etc."
msgstr ""

#: kivy.lang.builder.BuilderBase:4 of
msgid ""
"By default, :class:`Builder` is a global Kivy instance used in widgets "
"that you can use to load other kv files in addition to the default ones."
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:1 of
msgid "Search all the rules that match the widget and apply them."
msgstr ""

#: kivy.lang.builder.BuilderBase.apply
#: kivy.lang.builder.BuilderBase.apply_rules
#: kivy.lang.builder.BuilderBase.create_from
#: kivy.lang.builder.BuilderBase.load_string of
msgid "Parameters"
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:5
#: kivy.lang.builder.BuilderBase.apply_rules:8 of
msgid "`widget`: :class:`~kivy.uix.widget.Widget`"
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:6 of
msgid "The widget whose class rules should be applied to this widget."
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:10
#: kivy.lang.builder.BuilderBase.apply_rules:13 of
msgid "`ignored_consts`: set"
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:8
#: kivy.lang.builder.BuilderBase.apply_rules:11 of
msgid ""
"A set or list type whose elements are property names for which constant "
"KV rules (i.e. those that don't create bindings) of that widget will not "
"be applied. This allows e.g. skipping constant rules that overwrite a "
"value initialized in python."
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:16
#: kivy.lang.builder.BuilderBase.apply_rules:19 of
msgid "`rule_children`: list"
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:13
#: kivy.lang.builder.BuilderBase.apply_rules:16 of
msgid ""
"If not ``None``, it should be a list that will be populated with all the "
"widgets created by the kv rules being applied."
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:27
#: kivy.lang.builder.BuilderBase.apply_rules:30 of
msgid "`dispatch_kv_post`: bool"
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:19
#: kivy.lang.builder.BuilderBase.apply_rules:22 of
msgid ""
"Normally the class `Widget` dispatches the `on_kv_post` event to widgets "
"created during kv rule application. But if the rules are manually applied"
" by calling :meth:`apply`, that may not happen, so if this is `True`, we "
"will dispatch the `on_kv_post` event where needed after applying the "
"rules to `widget` (we won't dispatch it for `widget` itself)."
msgstr ""

#: kivy.lang.builder.BuilderBase.apply:26
#: kivy.lang.builder.BuilderBase.apply_rules:29 of
msgid "Defaults to False."
msgstr ""

#: kivy.lang.builder.BuilderBase.apply_rules:1 of
msgid ""
"Search all the rules that match the name `rule_name` and apply them to "
"`widget`."
msgstr ""

#: kivy.lang.builder.BuilderBase.apply_rules:9 of
msgid "The widget to whom the matching rules should be applied to."
msgstr ""

#: kivy.lang.builder.BuilderBase.create_from:1 of
msgid ""
"Creates a instance of the class, and initializes to the state of "
"``builder``."
msgstr ""

#: kivy.lang.builder.BuilderBase.create_from:4 of
msgid "The builder to initialize from."
msgstr ""

#: kivy.lang.builder.BuilderBase.create_from of
msgid "Returns"
msgstr ""

#: kivy.lang.builder.BuilderBase.create_from:5 of
msgid "A new instance of this class."
msgstr ""

#: kivy.lang.builder.BuilderBase.load_file:1 of
msgid ""
"Insert a file into the language builder and return the root widget (if "
"defined) of the kv file."
msgstr ""

#: kivy.lang.builder.BuilderBase.load_file of
msgid "parameters"
msgstr ""

#: kivy.lang.builder.BuilderBase.load_file:7
#: kivy.lang.builder.BuilderBase.load_string:6 of
msgid "`rulesonly`: bool, defaults to False"
msgstr ""

#: kivy.lang.builder.BuilderBase.load_file:6
#: kivy.lang.builder.BuilderBase.load_string:6 of
msgid ""
"If True, the Builder will raise an exception if you have a root widget "
"inside the definition."
msgstr ""

#: kivy.lang.builder.BuilderBase.load_file:9 of
msgid "`encoding`: File character encoding. Defaults to utf-8,"
msgstr ""

#: kivy.lang.builder.BuilderBase.load_string:1 of
msgid ""
"Insert a string into the Language Builder and return the root widget (if "
"defined) of the kv string."
msgstr ""

#: kivy.lang.builder.BuilderBase.load_string:9 of
msgid "`filename`: str, defaults to None"
msgstr ""

#: kivy.lang.builder.BuilderBase.load_string:9 of
msgid "If specified, the filename used to index the kv rules."
msgstr ""

#: kivy.lang.builder.BuilderBase.load_string:11 of
msgid ""
"The filename parameter can be used to unload kv strings in the same way "
"as you unload kv files. This can be achieved using pseudo file names "
"e.g.::"
msgstr ""

#: kivy.lang.builder.BuilderBase.load_string:21 of
msgid "can be unloaded via::"
msgstr ""

#: kivy.lang.builder.BuilderBase.match:1
#: kivy.lang.builder.BuilderBase.match_rule_name:1 of
msgid "Return a list of :class:`ParserRule` objects matching the widget."
msgstr ""

#: kivy.lang.builder.BuilderBase.sync:1 of
msgid ""
"Execute all the waiting operations, such as the execution of all the "
"expressions related to the canvas."
msgstr ""

#: kivy.lang.builder.BuilderBase.template:1 of
msgid "Create a specialized template using a specific context."
msgstr ""

#: kivy.lang.builder.BuilderBase.template:5 of
msgid ""
"With templates, you can construct custom widgets from a kv lang "
"definition by giving them a context. Check :ref:`Template usage "
"<template_usage>`."
msgstr ""

#: kivy.lang.builder.BuilderBase.unbind_property:1 of
msgid ""
"Unbind the handlers created by all the rules of the widget that set the "
"name."
msgstr ""

#: kivy.lang.builder.BuilderBase.unbind_property:4 of
msgid "This effectively clears all the rules of widget that take the form::"
msgstr ""

#: kivy.lang.builder.BuilderBase.unbind_property:8 of
msgid "For example:"
msgstr ""

#: kivy.lang.builder.BuilderBase.unbind_widget:1 of
msgid ""
"Unbind all the handlers created by the KV rules of the widget. The "
":attr:`kivy.uix.widget.Widget.uid` is passed here instead of the widget "
"itself, because Builder is using it in the widget destructor."
msgstr ""

#: kivy.lang.builder.BuilderBase.unbind_widget:6 of
msgid ""
"This effectively clears all the KV rules associated with this widget. For"
" example:"
msgstr ""

#: kivy.lang.builder.BuilderBase.unload_file:1 of
msgid "Unload all rules associated with a previously imported file."
msgstr ""

#: kivy.lang.builder.BuilderBase.unload_file:7 of
msgid ""
"This will not remove rules or templates already applied/used on current "
"widgets. It will only effect the next widgets creation or template "
"invocation."
msgstr ""

#: kivy.lang.builder.BuilderException:1 of
msgid "Bases: :py:class:`~kivy.lang.parser.ParserException`"
msgstr ""

#: kivy.lang.builder.BuilderException:1 of
msgid "Exception raised when the Builder fails to apply a rule on a widget."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.event.ObjectWithUid`"
msgstr ""

#: ../../docstring kivy._event.Observable:1 of
msgid ""
":class:`Observable` is a stub class defining the methods required for "
"binding. :class:`EventDispatcher` is (the) one example of a class that "
"implements the binding interface. See :class:`EventDispatcher` for "
"details."
msgstr ""

#: ../../docstring kivy.lang.builder.Observable.fbind:1 of
msgid "See :meth:`EventDispatcher.fbind`."
msgstr ""

#: ../../docstring kivy.lang.builder.Observable.fbind:5 of
msgid ""
"To keep backward compatibility with derived classes which may have "
"inherited from :class:`Observable` before, the :meth:`fbind` method was "
"added. The default implementation of :meth:`fbind` is to create a partial"
" function that it passes to bind while saving the uid and largs/kwargs. "
"However, :meth:`funbind` (and :meth:`unbind_uid`) are fairly inefficient "
"since we have to first lookup this partial function using the "
"largs/kwargs or uid and then call :meth:`unbind` on the returned "
"function. It is recommended to overwrite these methods in derived classes"
" to bind directly for better performance."
msgstr ""

#: ../../docstring kivy.lang.builder.Observable.fbind:17 of
msgid ""
"Similarly to :meth:`EventDispatcher.fbind`, this method returns 0 on "
"failure and a positive unique uid on success. This uid can be used with "
":meth:`unbind_uid`."
msgstr ""

#: ../../docstring kivy.lang.builder.Observable.funbind:1 of
msgid "See :meth:`fbind` and :meth:`EventDispatcher.funbind`."
msgstr ""

#: ../../docstring kivy.lang.builder.Observable.unbind_uid:1 of
msgid "See :meth:`fbind` and :meth:`EventDispatcher.unbind_uid`."
msgstr ""

