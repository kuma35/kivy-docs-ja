# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.logger.rst:3
msgid "Kivy Logging"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:2
msgid "By default, Kivy provides a logging system based on the standard Python `logging <https://docs.python.org/3/library/logging.html>`_ module with several additional features designed to be more convenient. These features include:"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:7
msgid "simplied usage (single instance, simple configuration, works by default)"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:8
msgid "color-coded output on supported terminals"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:9
msgid "output to ``stderr`` by default"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:10
msgid "message categorization via colon separation"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:11
msgid "access to log history even if logging is disabled"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:12
msgid "built-in handling of various cross-platform considerations"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:13
msgid "any stray output written to ``sys.stderr`` is captured, and stored in the log file as a warning."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:16
msgid "These features are configurable via the Config file or environment variables - including falling back to only using the standard Python system."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:20
msgid "Logger object"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:22
msgid "The Kivy ``Logger`` class provides a singleton logging.logger instance."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:24
msgid "As well as the standard logging levels (``debug``, ``info``, ``warning``, ``error`` and ``critical``), an additional ``trace`` level is available."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:29
msgid "Example Usage"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:31
msgid "Use the ``Logger`` as you would a standard Python logger. ::"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:43
msgid "The message passed to the logger is split into two parts separated by a colon (:). The first part is used as a title and the second part is used as the message. This way, you can \"categorize\" your messages easily. ::"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:53
msgid "You can change the logging level at any time using the ``setLevel`` method. ::"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:62
msgid "Interaction with other logging"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:64
msgid "The Kivy logging system will, by default, present all log messages sent from any logger - e.g. from third-party libraries."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:67
msgid "Additional handlers may be added."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:69
msgid "Handlers that output to ``sys.stderr`` may cause loops, as stderr output is reported as a warning log message."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:73
msgid "Logger Configuration"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:76
msgid "Kivy Log Mode"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:78
msgid "At the highest level, Kivy's logging system is controlled by an environment variable ``KIVY_LOG_MODE``. It may be given any of three values: ``KIVY``, ``PYTHON``, ``MIXED``"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:85
msgid "KIVY Mode (default)"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:87
msgid "In ``KIVY`` mode, all Kivy handlers are attached to the root logger, so all log messages in the system are output to the Kivy log files and to the console. Any stray output to ``sys.stderr`` is logged as a warning."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:91
msgid "If you are writing an entire Kivy app from scratch, this is the most convenient mode."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:95
msgid "PYTHON Mode"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:97
msgid "In ``PYTHON`` mode, no handlers are added, and ``sys.stderr`` output is not captured. It is left to the client to add appropriate handlers. (If none are added, the ``logging`` module will output them to ``stderr``.)"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:101
msgid "Messages logged with ``Logger`` will be propagated to the root logger, from a logger named ``kivy``."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:104
msgid "If the Kivy app is part of a much larger project which has its own logging regimen, this is the mode that gives most control."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:107
msgid "The ``kivy.logger`` file contains a number of ``logging.handler``, ``logging.formatter``, and other helper classes to allow users to adopt the features of Kivy logging that they like, including the stderr redirection."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:113
msgid "MIXED Mode"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:115
msgid "In ``MIXED`` mode, handlers are added to the Kivy's ``Logger`` object directly, and propagation is turned off. ``sys.stderr`` is not redirected."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:118
msgid "Messages logged with Kivy's ``Logger`` will appear in the Kivy log file and output to the Console."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:121
msgid "However, messages logged with other Python loggers will not be handled by Kivy handlers. The client will need to add their own."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:124
msgid "If you like the features of Kivy ``Logger``, but are writing a Kivy app that relies on third-party libraries that don't use colon-separation of categorise or depend on the display of the logger name, this mode provides a compromise."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:128
msgid "Again, the ``kivy.logger`` file contains re-usable logging features that can be used to get the best of both systems."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:132
msgid "Config Files"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:134
msgid "In ``KIVY`` and ``MIXED`` modes, the logger handlers can be controlled via the Kivy configuration file::"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:144
msgid "More information about the allowed values are described in the :mod:`kivy.config` module."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:147
msgid "In addition, the environment variables ``KIVY_NO_FILELOG`` and ``KIVY_NO_CONSOLELOG`` can be used to turn off the installation of the corresponding handlers."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:153
msgid "Logger History"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger:155
msgid "Even if the logger is not enabled, you still have access to the last 100 LogRecords::"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`logging.LogRecord`"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.ColonSplittingLogRecord:1
msgid "Clones an existing logRecord, but reformats the message field if it contains a colon."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.ColoredLogRecord:1
msgid "Clones an existing logRecord, but reformats the levelname to add color, and the message to add bolding (where indicated by $BOLD and $RESET in the message)."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`logging.StreamHandler`"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.ConsoleHandler:1
msgid "Emits records to a stream (by default, stderr)."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.ConsoleHandler:3
msgid "However, if the msg starts with \"stderr:\" it is not formatted, but written straight to the stream."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.ConsoleHandler.filter:1
msgid "Determine if a record is loggable by consulting all the filters."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.ConsoleHandler.filter:3
msgid "The default is to allow the record to be logged; any filter can veto this and the record is then dropped. Returns a zero value if a record is to be dropped, else non-zero."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.ConsoleHandler.filter:9
msgid "Allow filters to be just callables."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`logging.Handler`"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.FileHandler.emit:1
#: ../../../kivy/logger.py:docstring of kivy.logger.LoggerHistory.emit:1
msgid "Do whatever it takes to actually log the specified logging record."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.FileHandler.emit:3
#: ../../../kivy/logger.py:docstring of kivy.logger.LoggerHistory.emit:3
msgid "This version is intended to be implemented by subclasses and so raises a NotImplementedError."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.FileHandler.purge_logs:1
msgid "Purge logs which exceed the maximum amount of log files, starting with the oldest creation timestamp (or edit-timestamp on Linux)"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`logging.Formatter`"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.KivyFormatter:1
msgid "Split out first field in message marked with a colon, and either apply terminal color codes to the record, or strip out color markup if colored logging is not available."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.KivyFormatter.format:1
msgid "Format the specified record as text."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.KivyFormatter.format:3
msgid "The record's attribute dictionary is used as the operand to a string formatting operation which yields the returned string. Before formatting the dictionary, a couple of preparatory steps are carried out. The message attribute of the record is computed using LogRecord.getMessage(). If the formatting string uses the time (as determined by a call to usesTime(), formatTime() is called to format the event time. If there is exception information, it is formatted using formatException() and appended to the message."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.LoggerHistory.flush:1
msgid "Ensure all logging output has been flushed."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.LoggerHistory.flush:3
msgid "This version does nothing and is intended to be implemented by subclasses."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.ProcessingStream:1
msgid "Stream-like object that takes each completed line written to it, adds a given prefix, and applies the given function to it."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.UncoloredLogRecord:1
msgid "Clones an existing logRecord, but reformats the message to remove $BOLD/$RESET markup."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.add_kivy_handlers:1
msgid "Add Kivy-specific handlers to a logger."
msgstr ""

#: ../../../kivy/logger.py:docstring of kivy.logger.is_color_terminal:1
msgid "Detect whether the environment supports color codes in output."
msgstr ""
