# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.event.rst:3
msgid "Event dispatcher"
msgstr ""

#: kivy.event:2 of
msgid ""
"All objects that produce events in Kivy implement the "
":class:`EventDispatcher` which provides a consistent interface for "
"registering and manipulating event handlers."
msgstr ""

#: kivy.event:6 of
msgid ""
"Property discovery and methods have been moved from the "
":class:`~kivy.uix.widget.Widget` to the :class:`EventDispatcher`."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.event.ObjectWithUid`"
msgstr ""

#: ../../docstring kivy._event.EventDispatcher:2 of
msgid "See the module docstring for usage."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.apply_property:1 of
msgid ""
"Adds properties at runtime to the class. The function accepts keyword "
"arguments of the form `prop_name=prop`, where `prop` is a "
":class:`Property` instance and `prop_name` is the name of the attribute "
"of the property."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.apply_property:10 of
msgid ""
"This method is not recommended for common usage because you should "
"declare the properties in your class instead of using this method."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.apply_property:13 of
msgid "For example::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:1 of
msgid "Bind an event type or a property to a callback."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:3 of
msgid "Usage::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:17 of
msgid ""
"In general, property callbacks are called with 2 arguments (the object "
"and the property's new value) and event callbacks with one argument (the "
"object). The example above illustrates this."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:21 of
msgid ""
"The following example demonstrates various ways of using the bind "
"function in a complete application::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:91 of
msgid ""
"If a callback has already been bound to a given event or property, it "
"won't be added again."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:94 of
msgid ""
"When binding a method to an event or property, a "
":class:`kivy.weakmethod.WeakMethod` of the callback is saved. That is, "
"rather than storing a regular reference, it stores both a weak reference "
"to the instance (see Python's :class:`weakref`)."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:99 of
msgid "This has two consequences."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:101 of
msgid ""
"The first is that the binding will not prevent garbage collection of the "
"method's object. The client must maintain a reference to the instance for"
" the desired lifetime. The callback reference is silently removed if it "
"becomes invalid."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:106 of
msgid "The second is that when using a decorated method e.g.::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.bind:112 of
msgid ""
"the decorator (``my_decorator`` here) must use `wraps "
"<https://docs.python.org/3/library/functools.html#functools.wraps>`_ "
"internally."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:1 of
msgid "Create a new property at runtime."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:5 of
msgid ""
"`value` parameter added, can be used to set the default value of the "
"property. Also, the type of the value is used to specialize the created "
"property."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:10 of
msgid ""
"In the past, if `value` was of type `bool`, a `NumericProperty` would be "
"created, now a `BooleanProperty` is created."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:14 of
msgid ""
"Also, now and positional and keyword arguments are passed to the property"
" when created."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:19 of
msgid "default_value has been added."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:23 of
msgid ""
"This function is designed for the Kivy language, don't use it in your "
"code. You should declare the property in your class instead of using this"
" method."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property
#: kivy.event.EventDispatcher.dispatch
#: kivy.event.EventDispatcher.get_property_observers of
msgid "Parameters"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:28 of
msgid "`name`: string"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:29 of
msgid "Name of the property"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:31 of
msgid "`value`: object, optional"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:31 of
msgid ""
"Default value of the property. Type is also used for creating more "
"appropriate property types. Defaults to None."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:36 of
msgid "`default_value`: bool, True by default"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.create_property:34 of
msgid ""
"If True, `value` will be the default for the property. Otherwise, the "
"property will be initialized with the the property type's normal default "
"value, and subsequently set to ``value``."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.dispatch:1 of
msgid ""
"Dispatch an event across all the handlers added in bind/fbind(). As soon "
"as a handler returns True, the dispatching stops."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.dispatch:4 of
msgid ""
"The function collects all the positional and keyword arguments and passes"
" them on to the handlers."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.dispatch:8 of
msgid ""
"The handlers are called in reverse order than they were registered with "
":meth:`bind`."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.dispatch:13 of
msgid "`event_type`: str"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.dispatch:13 of
msgid "the event name to dispatch."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.dispatch:15 of
msgid ""
"Keyword arguments collection and forwarding was added. Before, only "
"positional arguments would be collected and forwarded."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.events:1 of
msgid "Return all the events in the class. Can be used for introspection."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.fbind:1 of
msgid ""
"A method for advanced, and typically faster binding. This method is "
"different than :meth:`bind` and is meant for more advanced users and "
"internal usage. It can be used as long as the following points are "
"heeded."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.fbind:5 of
msgid ""
"As opposed to :meth:`bind`, it does not check that this function and "
"largs/kwargs has not been bound before to this name. So binding the same "
"callback multiple times will just keep adding it."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.fbind:8 of
msgid ""
"Although :meth:`bind` creates a :class:`WeakMethod` of the callback when "
"binding to an event or property, this method stores the callback "
"directly, unless a keyword argument `ref` with value True is provided and"
" then a :class:`WeakMethod` is saved. This is useful when there's no risk"
" of a memory leak by storing the callback directly."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.fbind:14 of
msgid ""
"This method returns a unique positive number if `name` was found and "
"bound, and `0`, otherwise. It does not raise an exception, like "
":meth:`bind` if the property `name` is not found. If not zero, the uid "
"returned is unique to this `name` and callback and can be used with "
":meth:`unbind_uid` for unbinding."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.fbind:21 of
msgid ""
"When binding a callback with largs and/or kwargs, :meth:`funbind` must be"
" used for unbinding. If no largs and kwargs are provided, :meth:`unbind` "
"may be used as well. :meth:`unbind_uid` can be used in either case."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.fbind:26 of
msgid ""
"This method passes on any caught positional and/or keyword arguments to "
"the callback, removing the need to call partial. When calling the "
"callback the expended largs are passed on followed by instance/value "
"(just instance for kwargs) followed by expended kwargs."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.fbind:31 of
msgid "Following is an example of usage similar to the example in :meth:`bind`::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.fbind:85 of
msgid ""
"Since the kv lang uses this method to bind, one has to implement this "
"method, instead of :meth:`bind` when creating a non "
":class:`EventDispatcher` based class used with the kv lang. See "
":class:`Observable` for an example."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.fbind:92 of
msgid "The `ref` keyword argument has been added."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.funbind:1 of
msgid "Similar to :meth:`fbind`."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.funbind:3 of
msgid ""
"When unbinding, :meth:`unbind` will unbind all callbacks that match the "
"callback, while this method will only unbind the first."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.funbind:6 of
msgid ""
"To unbind, the same positional and keyword arguments passed to "
":meth:`fbind` must be passed on to funbind."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.funbind:11 of
msgid ""
"It is safe to use :meth:`funbind` to unbind a function bound with "
":meth:`bind` as long as no keyword and positional arguments are provided "
"to :meth:`funbind`."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.get_property_observers:1 of
msgid ""
"Returns a list of methods that are bound to the property/event passed as "
"the *name* argument::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.get_property_observers:8 of
msgid "`name`: str"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.get_property_observers:9 of
msgid "The name of the event or property."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.get_property_observers:18 of
msgid "`args`: bool"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.get_property_observers:11 of
msgid ""
"Whether to return the bound args. To keep compatibility, only the "
"callback functions and not their provided args will be returned in the "
"list when `args` is False."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.get_property_observers:15 of
msgid ""
"If True, each element in the list is a 5-tuple of `(callback, largs, "
"kwargs, is_ref, uid)`, where `is_ref` indicates whether `callback` is a "
"weakref, and `uid` is the uid given by :meth:`fbind`, or None if "
":meth:`bind` was used. Defaults to `False`."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.get_property_observers
#: kivy.event.EventDispatcher.property of
msgid "Returns"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.get_property_observers:21 of
msgid "The list of bound callbacks. See `args` for details."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.get_property_observers:25 of
msgid "`args` has been added."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.getter:1 of
msgid "Return the getter of a property."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.is_event_type:1 of
msgid "Return True if the event_type is already registered."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.properties:1 of
msgid ""
"Return all the properties in the class in a dictionary of key/property "
"class. Can be used for introspection."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.property:1 of
msgid ""
"Get a property instance from the property name. If quiet is True, None is"
" returned instead of raising an exception when `name` is not a property. "
"Defaults to `False`."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.property:7 of
msgid ""
"A :class:`~kivy.properties.Property` derived instance corresponding to "
"the name."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.property:12 of
msgid "quiet was added."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.proxy_ref:1 of
msgid ""
"Returns a :class:`~kivy.weakproxy.WeakProxy` reference to the "
":class:`EventDispatcher`."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.proxy_ref:8 of
msgid ""
"Previously it just returned itself, now it actually returns a "
":class:`~kivy.weakproxy.WeakProxy`."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.register_event_type:1 of
msgid "Register an event type with the dispatcher."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.register_event_type:3 of
msgid ""
"Registering event types allows the dispatcher to validate event handler "
"names as they are attached and to search attached objects for suitable "
"handlers. Each event type declaration must:"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.register_event_type:7 of
msgid "start with the prefix `on_`."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.register_event_type:8 of
msgid "have a default handler in the class."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.register_event_type:10 of
msgid "Example of creating a custom event::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.setter:1 of
msgid ""
"Return the setter of a property. Use: instance.setter('name'). The setter"
" is a convenient callback function useful if you want to directly bind "
"one property to another. It returns a partial function that will accept "
"(obj, value) args and results in the property 'name' of instance being "
"set to value."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.setter:10 of
msgid "For example, to bind number2 to number1 in python you would do::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.setter:20 of
msgid "This is equivalent to kv binding::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.unbind:1 of
msgid ""
"Unbind properties from callback functions with similar usage as "
":meth:`bind`."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.unbind:4 of
msgid ""
"If a callback has been bound to a given event or property multiple times,"
" only the first occurrence will be unbound."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.unbind:9 of
msgid ""
"It is safe to use :meth:`unbind` on a function bound with :meth:`fbind` "
"as long as that function was originally bound without any keyword and "
"positional arguments. Otherwise, the function will fail to be unbound and"
" you should use :meth:`funbind` instead."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.unbind_uid:1 of
msgid "Uses the uid returned by :meth:`fbind` to unbind the callback."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.unbind_uid:3 of
msgid ""
"This method is much more efficient than :meth:`funbind`. If `uid` "
"evaluates to False (e.g. 0) a `ValueError` is raised. Also, only "
"callbacks bound with :meth:`fbind` can be unbound with this method."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.unbind_uid:7 of
msgid ""
"Since each call to :meth:`fbind` will generate a unique `uid`, only one "
"callback will be removed. If `uid` is not found among the callbacks, no "
"error is raised."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.unbind_uid:11 of
msgid "E.g.::"
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.unregister_event_type:1 of
msgid "Unregister an event type in the dispatcher."
msgstr ""

#: ../../docstring kivy.event.EventDispatcher.unregister_event_type:3 of
msgid "Method renamed from `unregister_event_types` to `unregister_event_type`."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: ../../docstring kivy._event.ObjectWithUid:1 of
msgid ""
"(internal) This class assists in providing unique identifiers for class "
"instances. It is not intended for direct usage."
msgstr ""

#: ../../docstring kivy._event.Observable:1 of
msgid ""
":class:`Observable` is a stub class defining the methods required for "
"binding. :class:`EventDispatcher` is (the) one example of a class that "
"implements the binding interface. See :class:`EventDispatcher` for "
"details."
msgstr ""

#: ../../docstring kivy.event.Observable.fbind:1 of
msgid "See :meth:`EventDispatcher.fbind`."
msgstr ""

#: ../../docstring kivy.event.Observable.fbind:5 of
msgid ""
"To keep backward compatibility with derived classes which may have "
"inherited from :class:`Observable` before, the :meth:`fbind` method was "
"added. The default implementation of :meth:`fbind` is to create a partial"
" function that it passes to bind while saving the uid and largs/kwargs. "
"However, :meth:`funbind` (and :meth:`unbind_uid`) are fairly inefficient "
"since we have to first lookup this partial function using the "
"largs/kwargs or uid and then call :meth:`unbind` on the returned "
"function. It is recommended to overwrite these methods in derived classes"
" to bind directly for better performance."
msgstr ""

#: ../../docstring kivy.event.Observable.fbind:17 of
msgid ""
"Similarly to :meth:`EventDispatcher.fbind`, this method returns 0 on "
"failure and a positive unique uid on success. This uid can be used with "
":meth:`unbind_uid`."
msgstr ""

#: ../../docstring kivy.event.Observable.funbind:1 of
msgid "See :meth:`fbind` and :meth:`EventDispatcher.funbind`."
msgstr ""

#: ../../docstring kivy.event.Observable.unbind_uid:1 of
msgid "See :meth:`fbind` and :meth:`EventDispatcher.unbind_uid`."
msgstr ""

