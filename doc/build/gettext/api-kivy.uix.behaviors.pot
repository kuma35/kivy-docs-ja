# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.uix.behaviors.rst:3
msgid "Behaviors"
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:5
msgid "Behavior mixin classes"
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:7
msgid "This module implements behaviors that can be `mixed in <https://en.wikipedia.org/wiki/Mixin>`_ with existing base widgets. The idea behind these classes is to encapsulate properties and events associated with certain types of widgets."
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:12
msgid "Isolating these properties and events in a mixin class allows you to define your own implementation for standard kivy widgets that can act as drop-in replacements. This means you can re-style and re-define widgets as desired without breaking compatibility: as long as they implement the behaviors correctly, they can simply replace the standard widgets."
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:19
msgid "Adding behaviors"
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:21
msgid "Say you want to add :class:`~kivy.uix.button.Button` capabilities to an :class:`~kivy.uix.image.Image`, you could do::"
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:27
msgid "This would give you an :class:`~kivy.uix.image.Image` with the events and properties inherited from :class:`ButtonBehavior`. For example, the *on_press* and *on_release* events would be fired when appropriate::"
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:35
msgid "Or in kv:"
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:42
msgid "Naturally, you could also bind to any property changes the behavior class offers:"
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:56
msgid "The behavior class must always be _before_ the widget class. If you don't specify the inheritance in this order, the behavior will not work because the behavior methods are overwritten by the class method listed first."
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:60
msgid "Similarly, if you combine a behavior class with a class which requires the use of the methods also defined by the behavior class, the resulting class may not function properly. For example, when combining the :class:`ButtonBehavior` with a :class:`~kivy.uix.slider.Slider`, both of which use the :meth:`~kivy.uix.widget.Widget.on_touch_up` method, the resulting class may not work properly."
msgstr ""

#: ../../../kivy/uix/behaviors/__init__.py:docstring of kivy.uix.behaviors:69
msgid "The individual behavior classes, previously in one big `behaviors.py` file, has been split into a single file for each class under the :mod:`~kivy.uix.behaviors` module. All the behaviors are still imported in the :mod:`~kivy.uix.behaviors` module so they are accessible as before (e.g. both `from kivy.uix.behaviors import ButtonBehavior` and `from kivy.uix.behaviors.button import ButtonBehavior` work)."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: ../../../kivy/uix/behaviors/button.py:docstring of kivy.uix.behaviors.button.ButtonBehavior:1
msgid "This `mixin <https://en.wikipedia.org/wiki/Mixin>`_ class provides :class:`~kivy.uix.button.Button` behavior. Please see the :mod:`button behaviors module <kivy.uix.behaviors.button>` documentation for more information."
msgstr ""

#: ../../../kivy/uix/behaviors/button.py:docstring of kivy.uix.behaviors.button.ButtonBehavior:0
#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleButtonBehavior:0
msgid "Events"
msgstr ""

#: ../../../kivy/uix/behaviors/button.py:docstring of kivy.uix.behaviors.button.ButtonBehavior:7
#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleButtonBehavior:7
msgid "`on_press`"
msgstr ""

#: ../../../kivy/uix/behaviors/button.py:docstring of kivy.uix.behaviors.button.ButtonBehavior:8
#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleButtonBehavior:8
msgid "Fired when the button is pressed."
msgstr ""

#: ../../../kivy/uix/behaviors/button.py:docstring of kivy.uix.behaviors.button.ButtonBehavior:13
#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleButtonBehavior:12
msgid "`on_release`"
msgstr ""

#: ../../../kivy/uix/behaviors/button.py:docstring of kivy.uix.behaviors.button.ButtonBehavior:10
#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleButtonBehavior:10
msgid "Fired when the button is released (i.e. the touch/click that pressed the button goes away)."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ButtonBehavior.always_release:1
#: ../../docstring of kivy.uix.behaviors.TouchRippleButtonBehavior.always_release:1
msgid "This determines whether or not the widget fires an `on_release` event if the touch_up is outside the widget."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ButtonBehavior.always_release:6
msgid "The default value is now False."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ButtonBehavior.always_release:9
#: ../../docstring of kivy.uix.behaviors.TouchRippleButtonBehavior.always_release:4
msgid ":attr:`always_release` is a :class:`~kivy.properties.BooleanProperty` and defaults to `False`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ButtonBehavior.last_touch:1
#: ../../docstring of kivy.uix.behaviors.TouchRippleButtonBehavior.last_touch:1
msgid "Contains the last relevant touch received by the Button. This can be used in `on_press` or `on_release` in order to know which touch dispatched the event."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ButtonBehavior.last_touch:7
#: ../../docstring of kivy.uix.behaviors.TouchRippleButtonBehavior.last_touch:5
msgid ":attr:`last_touch` is a :class:`~kivy.properties.ObjectProperty` and defaults to `None`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ButtonBehavior.min_state_time:1
msgid "The minimum period of time which the widget must remain in the `'down'` state."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ButtonBehavior.min_state_time:6
msgid ":attr:`min_state_time` is a float and defaults to 0.035. This value is taken from :class:`~kivy.config.Config`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ButtonBehavior.state:1
msgid "The state of the button, must be one of 'normal' or 'down'. The state is 'down' only when the button is currently touched/clicked, otherwise its 'normal'."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ButtonBehavior.state:5
msgid ":attr:`state` is an :class:`~kivy.properties.OptionProperty` and defaults to 'normal'."
msgstr ""

#: ../../../kivy/uix/behaviors/button.py:docstring of kivy.uix.behaviors.button.ButtonBehavior.trigger_action:1
msgid "Trigger whatever action(s) have been bound to the button by calling both the on_press and on_release callbacks."
msgstr ""

#: ../../../kivy/uix/behaviors/button.py:docstring of kivy.uix.behaviors.button.ButtonBehavior.trigger_action:4
msgid "This is similar to a quick button press without using any touch events, but note that like most kivy code, this is not guaranteed to be safe to call from external threads. If needed use :class:`Clock <kivy.clock.Clock>` to safely schedule this function and the resulting callbacks to be called from the main thread."
msgstr ""

#: ../../../kivy/uix/behaviors/button.py:docstring of kivy.uix.behaviors.button.ButtonBehavior.trigger_action:10
msgid "Duration is the length of the press in seconds. Pass 0 if you want the action to happen instantly."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.event.EventDispatcher`"
msgstr ""

#: ../../../kivy/uix/behaviors/codenavigation.py:docstring of kivy.uix.behaviors.codenavigation.CodeNavigationBehavior:1
msgid "Code navigation behavior. Modifies the navigation behavior in TextInput to work like an IDE instead of a word processor. Please see the :mod:`code navigation behaviors module <kivy.uix.behaviors.codenavigation>` documentation for more information."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior:1
msgid "The Selection behavior `mixin <https://en.wikipedia.org/wiki/Mixin>`_ implements the logic behind keyboard and touch selection of selectable widgets managed by the derived widget. Please see the :mod:`compound selection behaviors module <kivy.uix.behaviors.compoundselection>` documentation for more information."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.clear_selection:1
msgid "Deselects all the currently selected nodes."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.deselect_node:1
msgid "Deselects a possibly selected node."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.deselect_node:3
msgid "It is called by the controller when it deselects a node and can also be called from the outside to deselect a node directly. The derived widget should overwrite this method and change the node to its unselected state when this is called"
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.deselect_node:0
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:0
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_node:0
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_touch:0
msgid "Parameters"
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.deselect_node:10
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_node:10
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_touch:9
msgid "`node`"
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.deselect_node:10
msgid "The node to be deselected."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.deselect_node:14
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_node:17
msgid "This method must be called by the derived widget using super if it is overwritten."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.get_index_of_node:1
msgid "(internal) Returns the index of the `node` within the `selectable_nodes` returned by :meth:`get_selectable_nodes`."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.get_selectable_nodes:1
msgid "(internal) Returns a list of the nodes that can be selected. It can be overwritten by the derived widget to return the correct list."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.get_selectable_nodes:4
msgid "This list is used to determine which nodes to select with group selection. E.g. the last element in the list will be selected when home is pressed, pagedown will move (or add to, if shift is held) the selection from the current position by negative :attr:`page_count` nodes starting from the position of the currently selected node in this list and so on. Still, nodes can be selected even if they are not in this list."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.get_selectable_nodes:14
msgid "It is safe to dynamically change this list including removing, adding, or re-arranging its elements. Nodes can be selected even if they are not on this list. And selected nodes removed from the list will remain selected until :meth:`deselect_node` is called."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.get_selectable_nodes:21
msgid "Layouts display their children in the reverse order. That is, the contents of :attr:`~kivy.uix.widget.Widget.children` is displayed form right to left, bottom to top. Therefore, internally, the indices of the elements returned by this function are reversed to make it work by default for most layouts so that the final result is consistent e.g. home, although it will select the last element in this list visually, will select the first element when counting from top to bottom and left to right. If this behavior is not desired, a reversed list should be returned instead."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.get_selectable_nodes:31
msgid "Defaults to returning :attr:`~kivy.uix.widget.Widget.children`."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:1
msgid "(internal) Used by the controller to get the node at the position indicated by key. The key can be keyboard inputs, e.g. pageup, or scroll inputs from the mouse scroll wheel, e.g. scrollup. 'last_node' is the last node selected and is used to find the resulting node. For example, if the key is up, the returned node is one node up from the last node."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:8
msgid "It can be overwritten by the derived widget."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:16
msgid "`key`"
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:12
msgid "str, the string used to find the desired node. It can be any of the keyboard keys, as well as the mouse scrollup, scrolldown, scrollright, and scrollleft strings. If letters are typed in quick succession, the letters will be combined before it's passed in as key and can be used to find nodes that have an associated string that starts with those letters."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:18
msgid "`last_node`"
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:19
msgid "The last node that was selected."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:24
msgid "`last_node_idx`"
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:21
msgid "The cached index of the last node selected in the :meth:`get_selectable_nodes` list. If the list hasn't changed it saves having to look up the index of `last_node` in that list."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:0
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_node:0
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_key_down:0
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_key_up:0
#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_touch:0
msgid "Returns"
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.goto_node:27
msgid "tuple, the node targeted by key and its index in the :meth:`get_selectable_nodes` list. Returning `(last_node, last_node_idx)` indicates a node wasn't found."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.keyboard_select:1
msgid "Determines whether the keyboard can be used for selection. If False, keyboard inputs will be ignored."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.keyboard_select:4
msgid ":attr:`keyboard_select` is a :class:`~kivy.properties.BooleanProperty` and defaults to True."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.multiselect:1
msgid "Determines whether multiple nodes can be selected. If enabled, keyboard shift and ctrl selection, optionally combined with touch, for example, will be able to select multiple widgets in the normally expected manner. This dominates :attr:`touch_multiselect` when False."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.multiselect:6
msgid ":attr:`multiselect` is a :class:`~kivy.properties.BooleanProperty` and defaults to False."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.nodes_order_reversed:1
msgid "(Internal) Indicates whether the order of the nodes as displayed top- down is reversed compared to their order in :meth:`get_selectable_nodes` (e.g. how the children property is reversed compared to how it's displayed)."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.page_count:1
msgid "Determines by how much the selected node is moved up or down, relative to the position of the last selected node, when pageup (or pagedown) is pressed."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.page_count:5
msgid ":attr:`page_count` is a :class:`~kivy.properties.NumericProperty` and defaults to 10."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.right_count:1
msgid "Determines by how much the selected node is moved up or down, relative to the position of the last selected node, when the right (or left) arrow on the keyboard is pressed."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.right_count:5
msgid ":attr:`right_count` is a :class:`~kivy.properties.NumericProperty` and defaults to 1."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.scroll_count:1
msgid "Determines by how much the selected node is moved up or down, relative to the position of the last selected node, when the mouse scroll wheel is scrolled."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.scroll_count:5
msgid ":attr:`right_count` is a :class:`~kivy.properties.NumericProperty` and defaults to 0."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_node:1
msgid "Selects a node."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_node:3
msgid "It is called by the controller when it selects a node and can be called from the outside to select a node directly. The derived widget should overwrite this method and change the node state to selected when called."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_node:10
msgid "The node to be selected."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_node:13
msgid "bool, True if the node was selected, False otherwise."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_key_down:1
msgid "Processes a key press. This is called when a key press is to be used for selection. Depending on the keyboard keys pressed and the configuration, it could select or deselect nodes or node ranges from the selectable nodes list, :meth:`get_selectable_nodes`."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_key_down:6
msgid "The parameters are such that it could be bound directly to the on_key_down event of a keyboard. Therefore, it is safe to be called repeatedly when the key is held down as is done by the keyboard."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_key_down:11
msgid "bool, True if the keypress was used, False otherwise."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_key_up:1
msgid "(internal) Processes a key release. This must be called by the derived widget when a key that :meth:`select_with_key_down` returned True is released."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_key_up:5
msgid "The parameters are such that it could be bound directly to the on_key_up event of a keyboard."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_key_up:9
msgid "bool, True if the key release was used, False otherwise."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_touch:1
msgid "(internal) Processes a touch on the node. This should be called by the derived widget when a node is touched and is to be used for selection. Depending on the keyboard keys pressed and the configuration, it could select or deslect this and other nodes in the selectable nodes list, :meth:`get_selectable_nodes`."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_touch:9
msgid "The node that received the touch. Can be None for a scroll type touch."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_touch:12
msgid "`touch`"
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_touch:12
msgid "Optionally, the touch. Defaults to None."
msgstr ""

#: ../../../kivy/uix/behaviors/compoundselection.py:docstring of kivy.uix.behaviors.compoundselection.CompoundSelectionBehavior.select_with_touch:15
msgid "bool, True if the touch was used, False otherwise."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.selected_nodes:1
msgid "The list of selected nodes."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.selected_nodes:5
msgid "Multiple nodes can be selected right after one another e.g. using the keyboard. When listening to :attr:`selected_nodes`, one should be aware of this."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.selected_nodes:9
msgid ":attr:`selected_nodes` is a :class:`~kivy.properties.ListProperty` and defaults to the empty list, []. It is read-only and should not be modified."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.text_entry_timeout:1
msgid "When typing characters in rapid succession (i.e. the time difference since the last character is less than :attr:`text_entry_timeout`), the keys get concatenated and the combined text is passed as the key argument of :meth:`goto_node`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.touch_deselect_last:1
msgid "Determines whether the last selected node can be deselected when :attr:`multiselect` or :attr:`touch_multiselect` is False."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.touch_deselect_last:6
msgid ":attr:`touch_deselect_last` is a :class:`~kivy.properties.BooleanProperty` and defaults to True on mobile, False on desktop platforms."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.touch_multiselect:1
msgid "A special touch mode which determines whether touch events, as processed by :meth:`select_with_touch`, will add the currently touched node to the selection, or if it will clear the selection before adding the node. This allows the selection of multiple nodes by simply touching them."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.touch_multiselect:6
msgid "This is different from :attr:`multiselect` because when it is True, simply touching an unselected node will select it, even if ctrl is not pressed. If it is False, however, ctrl must be pressed in order to add to the selection when :attr:`multiselect` is True."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.touch_multiselect:13
msgid ":attr:`multiselect`, when False, will disable :attr:`touch_multiselect`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.touch_multiselect:16
msgid ":attr:`touch_multiselect` is a :class:`~kivy.properties.BooleanProperty` and defaults to False."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.up_count:1
msgid "Determines by how much the selected node is moved up or down, relative to the position of the last selected node, when the up (or down) arrow on the keyboard is pressed."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CompoundSelectionBehavior.up_count:5
msgid ":attr:`up_count` is a :class:`~kivy.properties.NumericProperty` and defaults to 1."
msgstr ""

#: ../../../kivy/uix/behaviors/cover.py:docstring of kivy.uix.behaviors.cover.CoverBehavior:1
msgid "The CoverBehavior `mixin <https://en.wikipedia.org/wiki/Mixin>`_ provides rendering a texture covering full widget size keeping aspect ratio of the original texture."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CoverBehavior.cover_pos:1
msgid "Position of the aspect ratio aware texture. Gets calculated in ``CoverBehavior.calculate_cover``."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CoverBehavior.cover_pos:4
msgid ":attr:`cover_pos` is a :class:`~kivy.properties.ListProperty` and defaults to `[0, 0]`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CoverBehavior.cover_size:1
msgid "Size of the aspect ratio aware texture. Gets calculated in ``CoverBehavior.calculate_cover``."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CoverBehavior.cover_size:4
msgid ":attr:`cover_size` is a :class:`~kivy.properties.ListProperty` and defaults to `[0, 0]`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CoverBehavior.reference_size:1
msgid "Reference size used for aspect ratio approximation calculation."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.CoverBehavior.reference_size:3
msgid ":attr:`reference_size` is a :class:`~kivy.properties.ListProperty` and defaults to `[]`."
msgstr ""

#: ../../../kivy/uix/behaviors/drag.py:docstring of kivy.uix.behaviors.drag.DragBehavior:1
msgid "The DragBehavior `mixin <https://en.wikipedia.org/wiki/Mixin>`_ provides Drag behavior. When combined with a widget, dragging in the rectangle defined by :attr:`drag_rectangle` will drag the widget. Please see the :mod:`drag behaviors module <kivy.uix.behaviors.drag>` documentation for more information."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_distance:1
msgid "Distance to move before dragging the :class:`DragBehavior`, in pixels. As soon as the distance has been traveled, the :class:`DragBehavior` will start to drag, and no touch event will be dispatched to the children. It is advisable that you base this value on the dpi of your target device's screen."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_distance:7
msgid ":attr:`drag_distance` is a :class:`~kivy.properties.NumericProperty` and defaults to the `scroll_distance` as defined in the user :class:`~kivy.config.Config` (20 pixels by default)."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rect_height:1
msgid "Height of the axis aligned bounding rectangle where dragging is allowed."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rect_height:3
msgid ":attr:`drag_rect_height` is a :class:`~kivy.properties.NumericProperty` and defaults to 100."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rect_width:1
msgid "Width of the axis aligned bounding rectangle where dragging is allowed."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rect_width:3
msgid ":attr:`drag_rect_width` is a :class:`~kivy.properties.NumericProperty` and defaults to 100."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rect_x:1
msgid "X position of the axis aligned bounding rectangle where dragging is allowed (in window coordinates)."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rect_x:4
msgid ":attr:`drag_rect_x` is a :class:`~kivy.properties.NumericProperty` and defaults to 0."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rect_y:1
msgid "Y position of the axis aligned bounding rectangle where dragging is allowed (in window coordinates)."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rect_y:4
msgid ":attr:`drag_rect_Y` is a :class:`~kivy.properties.NumericProperty` and defaults to 0."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rectangle:1
msgid "Position and size of the axis aligned bounding rectangle where dragging is allowed."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_rectangle:4
msgid ":attr:`drag_rectangle` is a :class:`~kivy.properties.ReferenceListProperty` of (:attr:`drag_rect_x`, :attr:`drag_rect_y`, :attr:`drag_rect_width`, :attr:`drag_rect_height`) properties."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_timeout:1
msgid "Timeout allowed to trigger the :attr:`drag_distance`, in milliseconds. If the user has not moved :attr:`drag_distance` within the timeout, dragging will be disabled, and the touch event will be dispatched to the children."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.DragBehavior.drag_timeout:6
msgid ":attr:`drag_timeout` is a :class:`~kivy.properties.NumericProperty` and defaults to the `scroll_timeout` as defined in the user :class:`~kivy.config.Config` (55 milliseconds by default)."
msgstr ""

#: ../../../kivy/uix/behaviors/emacs.py:docstring of kivy.uix.behaviors.emacs.EmacsBehavior:1
msgid "A `mixin <https://en.wikipedia.org/wiki/Mixin>`_ that enables Emacs-style keyboard shortcuts for the :class:`~kivy.uix.textinput.TextInput` widget. Please see the :mod:`Emacs behaviors module <kivy.uix.behaviors.emacs>` documentation for more information."
msgstr ""

#: ../../../kivy/uix/behaviors/emacs.py:docstring of kivy.uix.behaviors.emacs.EmacsBehavior.delete_word_left:1
msgid "Delete text left of the cursor to the beginning of word"
msgstr ""

#: ../../../kivy/uix/behaviors/emacs.py:docstring of kivy.uix.behaviors.emacs.EmacsBehavior.delete_word_right:1
msgid "Delete text right of the cursor to the end of the word"
msgstr ""

#: ../../docstring of kivy.uix.behaviors.EmacsBehavior.key_bindings:1
msgid "String name which determines the type of key bindings to use with the :class:`~kivy.uix.textinput.TextInput`. This allows Emacs key bindings to be enabled/disabled programmatically for widgets that inherit from :class:`EmacsBehavior`. If the value is not ``'emacs'``, Emacs bindings will be disabled. Use ``'default'`` for switching to the default key bindings of TextInput."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.EmacsBehavior.key_bindings:8
msgid ":attr:`key_bindings` is a :class:`~kivy.properties.StringProperty` and defaults to ``'emacs'``."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior:1
msgid "Provides keyboard focus behavior. When combined with other FocusBehavior widgets it allows one to cycle focus among them by pressing tab. Please see the :mod:`focus behavior module documentation <kivy.uix.behaviors.focus>` for more information."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus:1
msgid "Whether the instance currently has focus."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus:3
msgid "Setting it to True will bind to and/or request the keyboard, and input will be forwarded to the instance. Setting it to False will unbind and/or release the keyboard. For a given keyboard, only one widget can have its focus, so focusing one will automatically unfocus the other instance holding its focus."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus:9
msgid "When using a software keyboard, please refer to the :attr:`~kivy.core.window.WindowBase.softinput_mode` property to determine how the keyboard display is handled."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus:13
msgid ":attr:`focus` is a :class:`~kivy.properties.BooleanProperty` and defaults to False."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus_next:1
msgid "The :class:`FocusBehavior` instance to acquire focus when tab is pressed and this instance has focus, if not `None` or `StopIteration`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus_next:5
msgid "When tab is pressed, focus cycles through all the :class:`FocusBehavior` widgets that are linked through :attr:`focus_next` and are focusable. If :attr:`focus_next` is `None`, it instead walks the children lists to find the next focusable widget. Finally, if :attr:`focus_next` is the `StopIteration` class, focus won't move forward, but end here."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus_next:22
msgid ":attr:`focus_next` is an :class:`~kivy.properties.ObjectProperty` and defaults to `None`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus_previous:1
msgid "The :class:`FocusBehavior` instance to acquire focus when shift+tab is pressed on this instance, if not None or `StopIteration`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus_previous:4
msgid "When shift+tab is pressed, focus cycles through all the :class:`FocusBehavior` widgets that are linked through :attr:`focus_previous` and are focusable. If :attr:`focus_previous` is `None`, it instead walks the children tree to find the previous focusable widget. Finally, if :attr:`focus_previous` is the `StopIteration` class, focus won't move backward, but end here."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focus_previous:21
msgid ":attr:`focus_previous` is an :class:`~kivy.properties.ObjectProperty` and defaults to `None`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focused:1
msgid "An alias of :attr:`focus`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focused:3
msgid ":attr:`focused` is a :class:`~kivy.properties.BooleanProperty` and defaults to False."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.focused:7
msgid ":attr:`focused` is an alias of :attr:`focus` and will be removed in 2.0.0."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.get_focus_next:1
msgid "Returns the next focusable widget using either :attr:`focus_next` or the :attr:`children` similar to the order when tabbing forwards with the ``tab`` key."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.get_focus_previous:1
msgid "Returns the previous focusable widget using either :attr:`focus_previous` or the :attr:`children` similar to the order when ``tab`` + ``shift`` key are triggered together."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.hide_keyboard:1
msgid "Convenience function to hide the keyboard in managed mode."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.ignored_touch:1
msgid "A list of touches that should not be used to defocus. After on_touch_up, every touch that is not in :attr:`ignored_touch` will defocus all the focused widgets if the config keyboard mode is not multi. Touches on focusable widgets that were used to focus are automatically added here."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.ignored_touch:6
msgid "Example usage::"
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.ignored_touch:14
msgid "Notice that you need to access this as a class, not an instance variable."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.input_type:1
msgid "The kind of input keyboard to request."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.input_type:5
msgid "Changed default value from `text` to `null`. Added `null` to options."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.input_type:9
msgid "As the default value has been changed, you may need to adjust `input_type` in your code."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.input_type:12
msgid ":attr:`input_type` is an :class:`~kivy.properties.OptionsProperty` and defaults to 'null'. Can be one of 'null', 'text', 'number', 'url', 'mail', 'datetime', 'tel' or 'address'."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.is_focusable:1
msgid "Whether the instance can become focused. If focused, it'll lose focus when set to False."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.is_focusable:4
msgid ":attr:`is_focusable` is a :class:`~kivy.properties.BooleanProperty` and defaults to True on a desktop (i.e. `desktop` is True in :mod:`~kivy.config`), False otherwise."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:1
msgid "The keyboard to bind to (or bound to the widget) when focused."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:3
msgid "When None, a keyboard is requested and released whenever the widget comes into and out of focus. If not None, it must be a keyboard, which gets bound and unbound from the widget whenever it's in or out of focus. It is useful only when more than one keyboard is available, so it is recommended to be set to None when only one keyboard is available."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:9
msgid "If more than one keyboard is available, whenever an instance gets focused a new keyboard will be requested if None. Unless the other instances lose focus (e.g. if tab was used), a new keyboard will appear. When this is undesired, the keyboard property can be used. For example, if there are two users with two keyboards, then each keyboard can be assigned to different groups of instances of FocusBehavior, ensuring that within each group, only one FocusBehavior will have focus, and will receive input from the correct keyboard. See `keyboard_mode` in :mod:`~kivy.config` for more information on the keyboard modes."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:19
msgid "**Keyboard and focus behavior**"
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:21
msgid "When using the keyboard, there are some important default behaviors you should keep in mind."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:24
msgid "When Config's `keyboard_mode` is multi, each new touch is considered a touch by a different user and will set the focus (if clicked on a focusable) with a new keyboard. Already focused elements will not lose their focus (even if an unfocusable widget is touched)."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:29
msgid "If the keyboard property is set, that keyboard will be used when the instance gets focused. If widgets with different keyboards are linked through :attr:`focus_next` and :attr:`focus_previous`, then as they are tabbed through, different keyboards will become active. Therefore, typically it's undesirable to link instances which are assigned different keyboards."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:36
msgid "When a widget has focus, setting its keyboard to None will remove its keyboard, but the widget will then immediately try to get another keyboard. In order to remove its keyboard, rather set its :attr:`focus` to False."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:41
msgid "When using a software keyboard, typical on mobile and touch devices, the keyboard display behavior is determined by the :attr:`~kivy.core.window.WindowBase.softinput_mode` property. You can use this property to ensure the focused widget is not covered or obscured."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard:46
msgid ":attr:`keyboard` is an :class:`~kivy.properties.AliasProperty` and defaults to None."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard_mode:1
msgid "Determines how the keyboard visibility should be managed. 'auto' will result in the standard behaviour of showing/hiding on focus. 'managed' requires setting the keyboard visibility manually, or calling the helper functions :meth:`show_keyboard` and :meth:`hide_keyboard`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard_mode:6
msgid ":attr:`keyboard_mode` is an :class:`~kivy.properties.OptionsProperty` and defaults to 'auto'. Can be one of 'auto' or 'managed'."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.keyboard_on_key_down:1
#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.keyboard_on_key_up:1
msgid "The method bound to the keyboard when the instance has focus."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.keyboard_on_key_down:3
msgid "When the instance becomes focused, this method is bound to the keyboard and will be called for every input press. The parameters are the same as :meth:`kivy.core.window.WindowBase.on_key_down`."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.keyboard_on_key_down:7
msgid "When overwriting the method in the derived widget, super should be called to enable tab cycling. If the derived widget wishes to use tab for its own purposes, it can call super after it has processed the character (if it does not wish to consume the tab)."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.keyboard_on_key_down:12
msgid "Similar to other keyboard functions, it should return True if the key was consumed."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.keyboard_on_key_up:3
msgid "When the instance becomes focused, this method is bound to the keyboard and will be called for every input release. The parameters are the same as :meth:`kivy.core.window.WindowBase.on_key_up`."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.keyboard_on_key_up:7
msgid "When overwriting the method in the derived widget, super should be called to enable de-focusing on escape. If the derived widget wishes to use escape for its own purposes, it can call super after it has processed the character (if it does not wish to consume the escape)."
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.keyboard_on_key_up:12
msgid "See :meth:`keyboard_on_key_down`"
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard_suggestions:1
msgid "If True provides auto suggestions on top of keyboard. This will only work if :attr:`input_type` is set to `text`, `url`, `mail` or `address`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard_suggestions:6
msgid "On Android, `keyboard_suggestions` relies on `InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS` to work, but some keyboards just ignore this flag. If you want to disable suggestions at all on Android, you can set `input_type` to `null`, which will request the input method to run in a limited \"generate key events\" mode."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.keyboard_suggestions:14
msgid ":attr:`keyboard_suggestions` is a :class:`~kivy.properties.BooleanProperty` and defaults to True"
msgstr ""

#: ../../../kivy/uix/behaviors/focus.py:docstring of kivy.uix.behaviors.focus.FocusBehavior.show_keyboard:1
msgid "Convenience function to show the keyboard in managed mode."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.unfocus_on_touch:1
msgid "Whether a instance should lose focus when clicked outside the instance."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.unfocus_on_touch:3
msgid "When a user clicks on a widget that is focus aware and shares the same keyboard as this widget (which in the case of only one keyboard, are all focus aware widgets), then as the other widgets gains focus, this widget loses focus. In addition to that, if this property is `True`, clicking on any widget other than this widget, will remove focus form this widget."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.FocusBehavior.unfocus_on_touch:10
msgid ":attr:`unfocus_on_touch` is a :class:`~kivy.properties.BooleanProperty` and defaults to `False` if the `keyboard_mode` in :attr:`~kivy.config.Config` is `'multi'` or `'systemandmulti'`, otherwise it defaults to `True`."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.behaviors.button.ButtonBehavior`"
msgstr ""

#: ../../../kivy/uix/behaviors/togglebutton.py:docstring of kivy.uix.behaviors.togglebutton.ToggleButtonBehavior:1
msgid "This `mixin <https://en.wikipedia.org/wiki/Mixin>`_ class provides :mod:`~kivy.uix.togglebutton` behavior. Please see the :mod:`togglebutton behaviors module <kivy.uix.behaviors.togglebutton>` documentation for more information."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ToggleButtonBehavior.allow_no_selection:1
msgid "This specifies whether the widgets in a group allow no selection i.e. everything to be deselected."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ToggleButtonBehavior.allow_no_selection:6
msgid ":attr:`allow_no_selection` is a :class:`BooleanProperty` and defaults to `True`"
msgstr ""

#: ../../../kivy/uix/behaviors/togglebutton.py:docstring of kivy.uix.behaviors.togglebutton.ToggleButtonBehavior.get_widgets:1
msgid "Return a list of the widgets contained in a specific group. If the group doesn't exist, an empty list will be returned."
msgstr ""

#: ../../../kivy/uix/behaviors/togglebutton.py:docstring of kivy.uix.behaviors.togglebutton.ToggleButtonBehavior.get_widgets:6
msgid "Always release the result of this method! Holding a reference to any of these widgets can prevent them from being garbage collected. If in doubt, do::"
msgstr ""

#: ../../../kivy/uix/behaviors/togglebutton.py:docstring of kivy.uix.behaviors.togglebutton.ToggleButtonBehavior.get_widgets:16
msgid "It's possible that some widgets that you have previously deleted are still in the list. The garbage collector might need to release other objects before flushing them."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ToggleButtonBehavior.group:1
msgid "Group of the button. If `None`, no group will be used (the button will be independent). If specified, :attr:`group` must be a hashable object, like a string. Only one button in a group can be in a 'down' state."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.ToggleButtonBehavior.group:5
msgid ":attr:`group` is a :class:`~kivy.properties.ObjectProperty` and defaults to `None`."
msgstr ""

#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleBehavior:1
msgid "Touch ripple behavior."
msgstr ""

#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleBehavior:3
msgid "Supposed to be used as mixin on widget classes."
msgstr ""

#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleBehavior:5
msgid "Ripple behavior does not trigger automatically, concrete implementation needs to call :func:`ripple_show` respective :func:`ripple_fade` manually."
msgstr ""

#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleBehavior:9
msgid "Example"
msgstr ""

#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleBehavior:11
msgid "Here we create a Label which renders the touch ripple animation on interaction::"
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_duration_in:1
msgid "Animation duration taken to show the overlay."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_duration_in:3
msgid ":attr:`ripple_duration_in` is a :class:`~kivy.properties.NumericProperty` and defaults to `0.5`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_duration_out:1
msgid "Animation duration taken to fade the overlay."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_duration_out:3
msgid ":attr:`ripple_duration_out` is a :class:`~kivy.properties.NumericProperty` and defaults to `0.2`."
msgstr ""

#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleBehavior.ripple_fade:1
msgid "Finish ripple animation on current widget."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_fade_from_alpha:1
msgid "Alpha channel for ripple color the animation starts with."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_fade_from_alpha:3
msgid ":attr:`ripple_fade_from_alpha` is a :class:`~kivy.properties.NumericProperty` and defaults to `0.5`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_fade_to_alpha:1
msgid "Alpha channel for ripple color the animation targets to."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_fade_to_alpha:3
msgid ":attr:`ripple_fade_to_alpha` is a :class:`~kivy.properties.NumericProperty` and defaults to `0.8`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_func_in:1
msgid "Animation callback for showing the overlay."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_func_in:3
msgid ":attr:`ripple_func_in` is a :class:`~kivy.properties.StringProperty` and defaults to `in_cubic`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_func_out:1
msgid "Animation callback for hiding the overlay."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_func_out:3
msgid ":attr:`ripple_func_out` is a :class:`~kivy.properties.StringProperty` and defaults to `out_quad`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_rad_default:1
msgid "Default radius the animation starts from."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_rad_default:3
msgid ":attr:`ripple_rad_default` is a :class:`~kivy.properties.NumericProperty` and defaults to `10`."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_scale:1
msgid "Max scale of the animation overlay calculated from max(width/height) of the decorated widget."
msgstr ""

#: ../../docstring of kivy.uix.behaviors.TouchRippleBehavior.ripple_scale:4
msgid ":attr:`ripple_scale` is a :class:`~kivy.properties.NumericProperty` and defaults to `2.0`."
msgstr ""

#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleBehavior.ripple_show:1
msgid "Begin ripple animation on current widget."
msgstr ""

#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleBehavior.ripple_show:3
msgid "Expects touch event as argument."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.behaviors.touchripple.TouchRippleBehavior`"
msgstr ""

#: ../../../kivy/uix/behaviors/touchripple.py:docstring of kivy.uix.behaviors.touchripple.TouchRippleButtonBehavior:1
msgid "This `mixin <https://en.wikipedia.org/wiki/Mixin>`_ class provides a similar behavior to :class:`~kivy.uix.behaviors.button.ButtonBehavior` but provides touch ripple animation instead of button pressed/released as visual effect."
msgstr ""
