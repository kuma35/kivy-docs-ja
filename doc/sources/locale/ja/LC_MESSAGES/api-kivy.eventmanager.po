# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.eventmanager.rst:3
msgid "Event Manager"
msgstr ""

#: kivy.eventmanager:2 of
msgid ""
"The :class:`EventManagerBase` is the abstract class intended for specific"
" implementation of dispatching motion events (instances of "
":class:`~kivy.input.motionevent.MotionEvent`) to widgets through "
":meth:`~kivy.uix.widget.Widget.on_motion` method of the "
":class:`~kivy.uix.widget.Widget` class."
msgstr ""

#: kivy.eventmanager:9 of
msgid ""
"This feature is experimental and it remains so while this warning is "
"present."
msgstr ""

#: kivy.eventmanager:12 of
msgid ""
"Manager is a layer between the window and its widgets. "
":class:`~kivy.core.window.WindowBase` will forward all the events it "
"receives in :meth:`~kivy.core.window.WindowBase.on_motion` method to the "
"all managers who declared to receive types of those events. Event will "
"continue to go through the managers list even if one of them accept it "
"(by returning `True`)."
msgstr ""

#: kivy.eventmanager:19 of
msgid "When to use an event manager"
msgstr ""

#: kivy.eventmanager:21 of
msgid "Use a manager when you want to:"
msgstr ""

#: kivy.eventmanager:23 of
msgid ""
"Dispatch touch, hover, keyboard, joystick or any other events to the "
"widgets through :meth:`~kivy.uix.widget.Widget.on_motion` method."
msgstr ""

#: kivy.eventmanager:25 of
msgid ""
"Dispatch filtered motion events by any criteria, like by a "
":attr:`~kivy.input.motionevent.MotionEvent.device` or a "
":attr:`~kivy.input.motionevent.MotionEvent.profile`."
msgstr ""

#: kivy.eventmanager:28 of
msgid ""
"Combine several motion events (touch, hover etc.) into one new event and "
"dispatch it to the widgets."
msgstr ""

#: kivy.eventmanager:30 of
msgid "Dispatch one-time generic events, like app pause/resume."
msgstr ""

#: kivy.eventmanager:31 of
msgid ""
"Write an event simulator, like a touch simulator which draws a circle on "
"window's canvas for every simulated touch."
msgstr ""

#: kivy.eventmanager:35 of
msgid "Defining and registering an event manager"
msgstr ""

#: kivy.eventmanager:37 of
msgid ""
"Inherit :class:`EventManagerBase` and set which events this manager "
"should receive by declaring event types in "
":attr:`EventManagerBase.type_ids` attribute."
msgstr ""

#: kivy.eventmanager:40 of
msgid ""
"Implement :meth:`EventManagerBase.dispatch` which will be called by "
"window to pass event type (one of \"begin\", \"update\", \"end\") and an "
"event."
msgstr ""

#: kivy.eventmanager:42 of
msgid ""
"Implement :meth:`EventManagerBase.start` and "
":meth:`EventManagerBase.stop` to allocate and release additional "
"resources if needed."
msgstr ""

#: kivy.eventmanager:44 of
msgid ""
"Register a manager instance to window using method "
":meth:`~kivy.core.window.WindowBase.register_event_manager`. This can be "
"done by overriding methods :meth:`~kivy.app.App.build` or "
":meth:`~kivy.app.App.on_start`."
msgstr ""

#: kivy.eventmanager:49 of
msgid ""
"All registered managers are kept in the "
":attr:`~kivy.core.window.WindowBase.event_managers` list. To unregister a"
" manager call "
":meth:`~kivy.core.window.WindowBase.unregister_event_manager` which "
"itself can be called in :meth:`~kivy.app.App.on_stop` method."
msgstr ""

#: kivy.eventmanager:55 of
msgid "Dispatching events to the widgets"
msgstr ""

#: kivy.eventmanager:57 of
msgid ""
"Once registered, window will start the manager and forward all events of "
"types declared in :attr:`EventManagerBase.type_ids` to the manager's "
":meth:`EventManagerBase.dispatch` method. It's up to manager to decide "
"how to dispatch them, either by going through "
":attr:`EventManagerBase.window.children` list and dispatching `on_motion`"
" event or by using some different logic. It's also up to manager to "
"dispatch grabbed events if grab feature is supported by the event (see "
":meth:`~kivy.input.motionevent.MotionEvent.grab` and "
":meth:`~kivy.input.motionevent.MotionEvent.ungrab` methods)."
msgstr ""

#: kivy.eventmanager:66 of
msgid ""
"Manager can assign a different dispatch mode to decide how event should "
"be dispatched throughout the widget tree by changing the value of the "
":attr:`~kivy.input.motionevent.MotionEvent.dispatch_mode` attribute. "
"Before changing the mode manager should store/restore the current one, "
"either by using a local variable or by using event's "
":meth:`~kivy.input.motionevent.MotionEvent.push` / "
":meth:`~kivy.input.motionevent.MotionEvent.pop` methods."
msgstr ""

#: kivy.eventmanager:74 of
msgid ""
"Currently there are three dispatch modes (behaviors) recognized by the "
"`on_motion` method in :class:`~kivy.uix.widget.Widget` class:"
msgstr ""

#: kivy.eventmanager:77 of
msgid ""
"Default dispatch (requires :const:`MODE_DEFAULT_DISPATCH`) - event will "
"go through widget's `children` list, starting with the first widget in "
"the list until event gets accepted or last widget registered for that "
"event is reached. Mode :const:`MODE_DEFAULT_DISPATCH` is assigned by "
"default in :class:`~kivy.input.motionevent.MotionEvent` class."
msgstr ""

#: kivy.eventmanager:82 of
msgid ""
"Filtered dispatch (requires :const:`MODE_FILTERED_DISPATCH`) - event will"
" go only through registered child widgets."
msgstr ""

#: kivy.eventmanager:84 of
msgid ""
"No dispatch to children (requires :const:`MODE_DONT_DISPATCH`) - event "
"will not be dispatched to child widgets."
msgstr ""

#: kivy.eventmanager:87 of
msgid ""
"Note that window does not have a `motion_filter` property and therefore "
"does not have a list of filtered widgets from its `children` list."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: kivy.eventmanager.EventManagerBase:1 of
msgid ""
"Abstract class with methods :meth:`start`, :meth:`stop` and "
":meth:`dispatch` for specific class to implement."
msgstr ""

#: kivy.eventmanager.EventManagerBase:4 of
msgid "Example of the manager receiving touch and hover events::"
msgstr ""

#: kivy.eventmanager.EventManagerBase.dispatch:1 of
msgid "Dispatch event `me` to the widgets in the :attr:`window`."
msgstr ""

#: kivy.eventmanager.EventManagerBase.dispatch of
msgid "Parameters"
msgstr ""

#: kivy.eventmanager.EventManagerBase.dispatch:4 of
msgid "`etype`: `str`"
msgstr ""

#: kivy.eventmanager.EventManagerBase.dispatch:5 of
msgid "One of \"begin\", \"update\" or \"end\""
msgstr ""

#: kivy.eventmanager.EventManagerBase.dispatch:6 of
msgid "`me`: :class:`~kivy.input.motionevent.MotionEvent`"
msgstr ""

#: kivy.eventmanager.EventManagerBase.dispatch:7 of
msgid "The Motion Event currently dispatched."
msgstr ""

#: kivy.eventmanager.EventManagerBase.dispatch of
msgid "Returns"
msgstr ""

#: kivy.eventmanager.EventManagerBase.dispatch:8 of
msgid "`bool` `True` to stop event dispatching"
msgstr ""

#: kivy.eventmanager.EventManagerBase.start:1 of
msgid ""
"Start the manager, bind callbacks to the objects and create additional "
"resources. Attribute :attr:`window` is assigned when this method is "
"called."
msgstr ""

#: kivy.eventmanager.EventManagerBase.stop:1 of
msgid ""
"Stop the manager, unbind from any objects and release any allocated "
"resources."
msgstr ""

#: ../../docstring kivy.eventmanager.EventManagerBase.type_ids:1 of
msgid ""
"Override this attribute to declare the type ids of the events which "
"manager wants to receive. This attribute will be used by "
":class:`~kivy.core.window.WindowBase` to know which events to pass to the"
" :meth:`dispatch` method."
msgstr ""

#: ../../docstring kivy.eventmanager.EventManagerBase.window:1 of
msgid "Holds the instance of the :class:`~kivy.core.window.WindowBase`."
msgstr ""

#: ../../docstring kivy.eventmanager.MODE_DEFAULT_DISPATCH:1 of
msgid ""
"Assign this mode to make event dispatch through widget's `children` list,"
" starting with the first widget in the list until event gets accepted or "
"last widget registered for that event is reached. Widgets after the last "
"registered widget are ignored."
msgstr ""

#: ../../docstring kivy.eventmanager.MODE_DONT_DISPATCH:1 of
msgid "Assign this mode to prevent event from dispatching to child widgets."
msgstr ""

#: ../../docstring kivy.eventmanager.MODE_FILTERED_DISPATCH:1 of
msgid ""
"Assign this mode to make event dispatch only to child widgets which were "
"previously registered to receive events of the same "
":attr:`~kivy.input.motionevent.MotionEvent.type_id` and not to all child "
"widgets."
msgstr ""

