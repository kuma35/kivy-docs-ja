# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/api-kivy.core.text.rst:3
msgid "Text"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:2
msgid "An abstraction of text creation. Depending of the selected backend, the accuracy of text rendering may vary."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:5
msgid ":meth:`LabelBase.find_base_direction` added."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:8
msgid ":attr:`LabelBase.line_height` added."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:11
msgid "The :class:`LabelBase` does not generate any texture if the text has a width <= 1."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:15
msgid "This is the backend layer for rendering text with different text providers, you should only be using this directly if your needs aren't fulfilled by the :class:`~kivy.uix.label.Label`."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:19
#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:53
msgid "Usage example::"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:35
msgid "Font Context Manager"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:37
msgid "A font context is a namespace where multiple fonts are loaded; if a font is missing a glyph needed to render text, it can fall back to a different font in the same context. The font context manager can be used to query and manipulate the state of font contexts when using the Pango text provider (no other provider currently implements it)."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:45
#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.find_base_direction:7
msgid "This feature requires the Pango text provider."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text:47
msgid "Font contexts can be created automatically by :class:`kivy.uix.label.Label` or :class:`kivy.uix.textinput.TextInput`; if a non-existent context is used in one of these classes, it will be created automatically, or if a font file is specified without a context (this creates an isolated context, without support for fallback)."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:1
msgid "Core text label. This is the abstract class used by different backends to render text."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:5
msgid "The core text label can't be changed at runtime. You must recreate one."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:0
msgid "Parameters"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:8
msgid "`font_size`: int, defaults to 12"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:9
msgid "Font size of the text"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:12
msgid "`font_context`: str, defaults to None"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:11
msgid "Context for the specified font (see :class:`kivy.uix.label.Label` for details). `None` will autocreate an isolated context named after the resolved font file."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:14
msgid "`font_name`: str, defaults to DEFAULT_FONT"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:15
msgid "Font name of the text"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:17
msgid "`font_family`: str, defaults to None"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:17
msgid "Font family name to request for drawing, this can only be used with `font_context`."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:19
msgid "`bold`: bool, defaults to False"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:20
msgid "Activate \"bold\" text style"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:21
msgid "`italic`: bool, defaults to False"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:22
msgid "Activate \"italic\" text style"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:24
msgid "`text_size`: tuple, defaults to (None, None)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:24
msgid "Add constraint to render the text (inside a bounding box). If no size is given, the label size will be set to the text size."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:26
msgid "`padding`: float, defaults to None"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:27
msgid "If it's a float, it will set padding_x and padding_y"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:28
msgid "`padding_x`: float, defaults to 0.0"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:29
msgid "Left/right padding"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:30
msgid "`padding_y`: float, defaults to 0.0"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:31
msgid "Top/bottom padding"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:32
msgid "`halign`: str, defaults to \"left\""
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:33
msgid "Horizontal text alignment inside the bounding box"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:34
msgid "`valign`: str, defaults to \"bottom\""
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:35
msgid "Vertical text alignment inside the bounding box"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:39
msgid "`shorten`: bool, defaults to False"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:37
msgid "Indicate whether the label should attempt to shorten its textual contents as much as possible if a `size` is given. Setting this to True without an appropriately set size will lead to unexpected results."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:44
msgid "`shorten_from`: str, defaults to `center`"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:42
msgid "The side from which we should shorten the text from, can be left, right, or center. E.g. if left, the ellipsis will appear towards the left side and it will display as much text starting from the right as possible."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:48
msgid "`split_str`: string, defaults to `' '` (space)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:47
msgid "The string to use to split the words by when shortening. If empty, we can split after every character filling up the line as much as possible."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:51
msgid "`max_lines`: int, defaults to 0 (unlimited)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:51
msgid "If set, this indicate how maximum line are allowed to render the text. Works only if a limitation on text_size is set."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:53
msgid "`mipmap`: bool, defaults to False"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:54
msgid "Create a mipmap for the texture"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:56
msgid "`strip`: bool, defaults to False"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:56
msgid "Whether each row of text has its leading and trailing spaces stripped. If `halign` is `justify` it is implicitly True."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:61
msgid "`strip_reflow`: bool, defaults to True"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:59
msgid "Whether text that has been reflowed into a second line should be stripped, even if `strip` is False. This is only in effect when `size_hint_x` is not None, because otherwise lines are never split."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:64
msgid "`unicode_errors`: str, defaults to `'replace'`"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:64
msgid "How to handle unicode decode errors. Can be `'strict'`, `'replace'` or `'ignore'`."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:66
msgid "`outline_width`: int, defaults to None"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:67
msgid "Width in pixels for the outline."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:68
msgid "`outline_color`: tuple, defaults to (0, 0, 0)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:69
msgid "Color of the outline."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:70
msgid "`font_features`: str, defaults to None"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:71
msgid "OpenType font features in CSS format (Pango only)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:73
msgid "`base_direction`: str, defaults to None (auto)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:73
msgid "Text direction, one of `None`, `'ltr'`, `'rtl'`, `'weak_ltr'`, or `'weak_rtl'` (Pango only)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:76
msgid "`text_language`: str, defaults to None (user locale)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:76
msgid "RFC-3066 format language tag as a string (Pango only)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:78
msgid "`font_context`, `font_family`, `font_features`, `base_direction` and `text_language` were added."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:82
msgid "`outline_width` and `outline_color` were added."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:85
msgid "`strip`, `strip_reflow`, `shorten_from`, `split_str`, and `unicode_errors` were added."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:89
msgid "`padding_x` and `padding_y` has been fixed to work as expected. In the past, the text was padded by the negative of their values."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:93
msgid "`max_lines` parameters has been added."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:96
msgid "`size` have been deprecated and replaced with `text_size`."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase:99
msgid "The `valign` is now respected. This wasn't the case previously so you might have an issue in your application if you have not considered this."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.content_height:1
msgid "Return the content height; i.e. the height of the text without any padding."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.content_size:1
msgid "Return the content size (width, height)"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.content_width:1
msgid "Return the content width; i.e. the width of the text without any padding."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.find_base_direction:1
msgid "Searches a string the first character that has a strong direction, according to the Unicode bidirectional algorithm. Returns `None` if the base direction cannot be determined, or one of `'ltr'` or `'rtl'`."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.fontid:1
msgid "Return a unique id for all font parameters"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.get_cached_extents:1
msgid "Returns a cached version of the :meth:`get_extents` function."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.get_cached_extents:13
msgid "This method returns a size measuring function that is valid for the font settings used at the time :meth:`get_cached_extents` was called. Any change in the font settings will render the returned function incorrect. You should only use this if you know what you're doing."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.get_extents:1
msgid "Return a tuple (width, height) indicating the size of the specified text"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.get_system_fonts_dir:1
msgid "Return the directories used by the system for fonts."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.label:1
#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.text:1
msgid "Get/Set the text"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.refresh:1
msgid "Force re-rendering of the text"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.register:1
msgid "Register an alias for a Font."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.register:5
msgid "If you're using a ttf directly, you might not be able to use the bold/italic properties of the ttf version. If the font is delivered in multiple files (one regular, one italic and one bold), then you need to register these files and use the alias instead."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.register:11
msgid "All the fn_regular/fn_italic/fn_bold parameters are resolved with :func:`kivy.resources.resource_find`. If fn_italic/fn_bold are None, fn_regular will be used instead."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.render:1
msgid "Return a tuple (width, height) to create the image with the user constraints. (width, height) includes the padding."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.shorten:1
msgid "Shortens the text to fit into a single line by the width specified by :attr:`text_size` [0]. If :attr:`text_size` [0] is None, it returns text text unchanged."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.shorten:5
msgid ":attr:`split_str` and :attr:`shorten_from` determines how the text is shortened."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.shorten:0
msgid "params"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.shorten:10
msgid "`text` str, the text to be shortened. `margin` int, the amount of space to leave between the margins and the text. This is in addition to :attr:`padding_x`."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.shorten:0
msgid "Returns"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.shorten:14
msgid "the text shortened to fit into a single line."
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.text_size:1
msgid "Get/set the (width, height) of the ' 'contrained rendering box"
msgstr ""

#: ../../../kivy/core/text/__init__.py:docstring of kivy.core.text.LabelBase.usersize:1
msgid "(deprecated) Use text_size instead."
msgstr ""
