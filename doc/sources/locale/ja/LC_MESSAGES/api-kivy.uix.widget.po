# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.uix.widget.rst:3
msgid "Widget class"
msgstr ""

#: kivy.uix.widget:2 of
msgid ""
"The :class:`Widget` class is the base class required for creating "
"Widgets. This widget class was designed with a couple of principles in "
"mind:"
msgstr ""

#: kivy.uix.widget:5 of
msgid "*Event Driven*"
msgstr ""

#: kivy.uix.widget:7 of
msgid ""
"Widget interaction is built on top of events that occur. If a property "
"changes, the widget can respond to the change in the 'on_<propname>' "
"callback. If nothing changes, nothing will be done. That's the main goal "
"of the :class:`~kivy.properties.Property` class."
msgstr ""

#: kivy.uix.widget:12 of
msgid "*Separation Of Concerns (the widget and its graphical representation)*"
msgstr ""

#: kivy.uix.widget:14 of
msgid ""
"Widgets don't have a `draw()` method. This is done on purpose: The idea "
"is to allow you to create your own graphical representation outside the "
"widget class. Obviously you can still use all the available properties to"
" do that, so that your representation properly reflects the widget's "
"current state. Every widget has its own :class:`~kivy.graphics.Canvas` "
"that you can use to draw. This separation allows Kivy to run your "
"application in a very efficient manner."
msgstr ""

#: kivy.uix.widget:23 of
msgid "*Bounding Box / Collision*"
msgstr ""

#: kivy.uix.widget:25 of
msgid ""
"Often you want to know if a certain point is within the bounds of your "
"widget. An example would be a button widget where you only want to "
"trigger an action when the button itself is actually touched. For this, "
"you can use the :meth:`~Widget.collide_point` method, which will return "
"True if the point you pass to it is inside the axis-aligned bounding box "
"defined by the widget's position and size. If a simple AABB is not "
"sufficient, you can override the method to perform the collision checks "
"with more complex shapes, e.g. a polygon. You can also check if a widget "
"collides with another widget with :meth:`~Widget.collide_widget`."
msgstr ""

#: kivy.uix.widget:37 of
msgid ""
"We also have some default values and behaviors that you should be aware "
"of:"
msgstr ""

#: kivy.uix.widget:39 of
msgid ""
"A :class:`Widget` is not a :class:`~kivy.uix.layout.Layout`: it will not "
"change the position or the size of its children. If you want control over"
" positioning or sizing, use a :class:`~kivy.uix.layout.Layout`."
msgstr ""

#: kivy.uix.widget:43 of
msgid ""
"The default size of a widget is (100, 100). This is only changed if the "
"parent is a :class:`~kivy.uix.layout.Layout`. For example, if you add a "
":class:`Label` inside a :class:`Button`, the label will not inherit the "
"button's size or position because the button is not a *Layout*: it's just"
" another *Widget*."
msgstr ""

#: kivy.uix.widget:49 of
msgid ""
"The default size_hint is (1, 1). If the parent is a :class:`Layout`, then"
" the widget size will be the parent layout's size."
msgstr ""

#: kivy.uix.widget:52 of
msgid ""
":meth:`~Widget.on_touch_down`, :meth:`~Widget.on_touch_move`, "
":meth:`~Widget.on_touch_up` don't do any sort of collisions. If you want "
"to know if the touch is inside your widget, use "
":meth:`~Widget.collide_point`."
msgstr ""

#: kivy.uix.widget:57 of
msgid "Using Properties"
msgstr ""

#: kivy.uix.widget:59 of
msgid ""
"When you read the documentation, all properties are described in the "
"format::"
msgstr ""

#: kivy.uix.widget:63 of
msgid "e.g."
msgstr ""

#: kivy.uix.widget:65 of
msgid ""
":attr:`~kivy.uix.label.Label.text` is a "
":class:`~kivy.properties.StringProperty` and defaults to ''."
msgstr ""

#: kivy.uix.widget:68 of
msgid ""
"If you want to be notified when the pos attribute changes, i.e. when the "
"widget moves, you can bind your own callback function like this::"
msgstr ""

#: kivy.uix.widget:77 of
msgid "Read more about :doc:`/api-kivy.properties`."
msgstr ""

#: kivy.uix.widget:80 of
msgid "Basic drawing"
msgstr ""

#: kivy.uix.widget:82 of
msgid ""
"Widgets support a range of drawing instructions that you can use to "
"customize the look of your widgets and layouts. For example, to draw a "
"background image for your widget, you can do the following:"
msgstr ""

#: kivy.uix.widget:97 of
msgid "To draw a background in kv:"
msgstr ""

#: kivy.uix.widget:108 of
msgid ""
"These examples only scratch the surface. Please see the "
":mod:`kivy.graphics` documentation for more information."
msgstr ""

#: kivy.uix.widget:114 of
msgid "Widget touch event bubbling"
msgstr ""

#: kivy.uix.widget:116 of
msgid ""
"When you catch touch events between multiple widgets, you often need to "
"be aware of the order in which these events are propagated. In Kivy, "
"events bubble up from the first child upwards through the other children."
" If a widget has children, the event is passed through its children "
"before being passed on to the widget after it."
msgstr ""

#: kivy.uix.widget:122 of
msgid ""
"As the :meth:`~kivy.uix.widget.Widget.on_touch_up` method inserts widgets"
" at index 0 by default, this means the event goes from the most recently "
"added widget back to the first one added. Consider the following:"
msgstr ""

#: kivy.uix.widget:133 of
msgid ""
"The label with text \"c\" gets the event first, \"b\" second and \"a\" "
"last. You can reverse this order by manually specifying the index:"
msgstr ""

#: kivy.uix.widget:143 of
msgid ""
"Now the order would be \"a\", \"b\" then \"c\". One thing to keep in mind"
" when using kv is that declaring a widget uses the "
":meth:`~kivy.uix.widget.Widget.add_widget` method for insertion. Hence, "
"using"
msgstr ""

#: kivy.uix.widget:157 of
msgid ""
"would result in the event order \"c\", \"b\" then \"a\" as \"c\" was "
"actually the last added widget. It thus has index 0, \"b\" index 1 and "
"\"a\" index 2. Effectively, the child order is the reverse of its listed "
"order."
msgstr ""

#: kivy.uix.widget:161 of
msgid ""
"This ordering is the same for the "
":meth:`~kivy.uix.widget.Widget.on_touch_move` and "
":meth:`~kivy.uix.widget.Widget.on_touch_up` events."
msgstr ""

#: kivy.uix.widget:164 of
msgid ""
"In order to stop this event bubbling, a method can return `True`. This "
"tells Kivy the event has been handled and the event propagation stops. "
"For example:"
msgstr ""

#: kivy.uix.widget:177 of
msgid ""
"This approach gives you good control over exactly how events are "
"dispatched and managed. Sometimes, however, you may wish to let the event"
" be completely propagated before taking action. You can use the "
":class:`~kivy.clock.Clock` to help you here:"
msgstr ""

#: kivy.uix.widget:193 of
msgid ""
"Usage of :attr:`Widget.center`, :attr:`Widget.right`, and "
":attr:`Widget.top`"
msgstr ""

#: kivy.uix.widget:195 of
msgid ""
"A common mistake when using one of the computed properties such as "
":attr:`Widget.right` is to use it to make a widget follow its parent with"
" a KV rule such as `right: self.parent.right`. Consider, for example:"
msgstr ""

#: kivy.uix.widget:208 of
msgid ""
"The (mistaken) expectation is that this rule ensures that wid's right "
"will always be whatever layout's right is - that is wid.right and "
"layout.right will always be identical. In actual fact, this rule only "
"says that \"whenever layout's `right` changes, wid's right will be set to"
" that value\". The difference being that as long as `layout.right` "
"doesn't change, `wid.right` could be anything, even a value that will "
"make them different."
msgstr ""

#: kivy.uix.widget:215 of
msgid "Specifically, for the KV code above, consider the following example::"
msgstr ""

#: kivy.uix.widget:223 of
msgid ""
"As can be seen, initially they are in sync, however, when we change "
"`wid.x` they go out of sync because `layout.right` is not changed and the"
" rule is not triggered."
msgstr ""

#: kivy.uix.widget:227 of
msgid ""
"The proper way to make the widget follow its parent's right is to use "
":attr:`Widget.pos_hint`. If instead of `right: layout.right` we did "
"`pos_hint: {'right': 1}`, then the widgets right will always be set to be"
" at the parent's right at each layout update."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.uix.widget.WidgetBase`"
msgstr ""

#: kivy.uix.widget.Widget:1 of
msgid "Widget class. See module documentation for more information."
msgstr ""

#: kivy.uix.widget.Widget of
msgid "Events"
msgstr ""

#: kivy.uix.widget.Widget:4 of
msgid "`on_touch_down`: `(touch, )`"
msgstr ""

#: kivy.uix.widget.Widget:5 of
msgid "Fired when a new touch event occurs. `touch` is the touch object."
msgstr ""

#: kivy.uix.widget.Widget:6 of
msgid "`on_touch_move`: `(touch, )`"
msgstr ""

#: kivy.uix.widget.Widget:7 of
msgid "Fired when an existing touch moves. `touch` is the touch object."
msgstr ""

#: kivy.uix.widget.Widget:9 of
msgid "`on_touch_up`: `(touch, )`"
msgstr ""

#: kivy.uix.widget.Widget:9 of
msgid "Fired when an existing touch disappears. `touch` is the touch object."
msgstr ""

#: kivy.uix.widget.Widget:18 of
msgid "`on_kv_post`: `(base_widget, )`"
msgstr ""

#: kivy.uix.widget.Widget:12 of
msgid ""
"Fired after all the kv rules associated with the widget and all other "
"widgets that are in any of those rules have had all their kv rules "
"applied. `base_widget` is the base-most widget whose instantiation "
"triggered the kv rules (i.e. the widget instantiated from Python, e.g. "
"``MyWidget()``)."
msgstr ""

#: kivy.uix.widget.Widget:21 of
msgid ""
"Adding a `__del__` method to a class derived from Widget with Python "
"prior to 3.4 will disable automatic garbage collection for instances of "
"that class. This is because the Widget class creates reference cycles, "
"thereby `preventing garbage collection "
"<https://docs.python.org/2/library/gc.html#gc.garbage>`_."
msgstr ""

#: kivy.uix.widget.Widget:27 of
msgid ""
"Everything related to event properties has been moved to the "
":class:`~kivy.event.EventDispatcher`. Event properties can now be used "
"when constructing a simple class without subclassing :class:`Widget`."
msgstr ""

#: kivy.uix.widget.Widget:32 of
msgid ""
"The constructor now accepts on_* arguments to automatically bind "
"callbacks to properties or events, as in the Kv language."
msgstr ""

#: kivy.uix.widget.Widget.add_widget:1 of
msgid "Add a new widget as a child of this widget."
msgstr ""

#: kivy.uix.widget.Widget.add_widget
#: kivy.uix.widget.Widget.apply_class_lang_rules
#: kivy.uix.widget.Widget.collide_point kivy.uix.widget.Widget.collide_widget
#: kivy.uix.widget.Widget.export_to_png
#: kivy.uix.widget.Widget.get_window_matrix kivy.uix.widget.Widget.on_motion
#: kivy.uix.widget.Widget.on_touch_down
#: kivy.uix.widget.Widget.register_for_motion_event
#: kivy.uix.widget.Widget.remove_widget kivy.uix.widget.Widget.to_local
#: kivy.uix.widget.Widget.to_parent
#: kivy.uix.widget.Widget.unregister_for_motion_event
#: kivy.uix.widget.Widget.walk kivy.uix.widget.Widget.walk_reverse of
msgid "Parameters"
msgstr ""

#: kivy.uix.widget.Widget.add_widget:4 kivy.uix.widget.Widget.remove_widget:5
#: of
msgid "`widget`: :class:`Widget`"
msgstr ""

#: kivy.uix.widget.Widget.add_widget:5 of
msgid "Widget to add to our list of children."
msgstr ""

#: kivy.uix.widget.Widget.add_widget:12 of
msgid "`index`: int, defaults to 0"
msgstr ""

#: kivy.uix.widget.Widget.add_widget:7 of
msgid ""
"Index to insert the widget in the list. Notice that the default of 0 "
"means the widget is inserted at the beginning of the list and will thus "
"be drawn on top of other sibling widgets. For a full discussion of the "
"index and widget hierarchy, please see the :doc:`Widgets Programming "
"Guide <guide/widgets>`."
msgstr ""

#: kivy.uix.widget.Widget.add_widget:18 of
msgid "`canvas`: str, defaults to None"
msgstr ""

#: kivy.uix.widget.Widget.add_widget:15 of
msgid ""
"Canvas to add widget's canvas to. Can be 'before', 'after' or None for "
"the default canvas."
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:1 of
msgid ""
"Method that is called by kivy to apply the kv rules of this widget's "
"class."
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:6 of
msgid "`root`: :class:`Widget`"
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:6 of
msgid ""
"The root widget that instantiated this widget in kv, if the widget was "
"instantiated in kv, otherwise ``None``."
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:8 of
msgid "`ignored_consts`: set"
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:9
#: kivy.uix.widget.Widget.apply_class_lang_rules:11 of
msgid "(internal) See :meth:`~kivy.lang.builder.BuilderBase.apply`."
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:11 of
msgid "`rule_children`: list"
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:13 of
msgid ""
"This is useful to be able to execute code before/after the class kv rules"
" are applied to the widget. E.g. if the kv code requires some properties "
"to be initialized before it is used in a binding rule. If overwriting "
"remember to call ``super``, otherwise the kv rules will not be applied."
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:19 of
msgid "In the following example,"
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:32 of
msgid "<MyWidget>:"
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:32 of
msgid "my_prop: some_value"
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:35 of
msgid "<OtherWidget>:"
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:35 of
msgid "other_prop: some_value"
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:37 of
msgid ""
"When ``OtherWidget`` is instantiated with ``OtherWidget()``, the widget's"
" :meth:`apply_class_lang_rules` is called and it applies the kv rules of "
"this class - ``<MyWidget>`` and ``<OtherWidget>``."
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:41 of
msgid "Similarly, when the widget is instantiated from kv, e.g."
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:50 of
msgid ""
"``OtherWidget``'s :meth:`apply_class_lang_rules` is called and it applies"
" the kv rules of this class - ``<MyWidget>`` and ``<OtherWidget>``."
msgstr ""

#: kivy.uix.widget.Widget.apply_class_lang_rules:56 of
msgid ""
"It applies only the class rules not the instance rules. I.e. in the above"
" kv example in the ``MyBox`` rule when ``OtherWidget`` is instantiated, "
"its :meth:`apply_class_lang_rules` applies the ``<MyWidget>`` and "
"``<OtherWidget>`` rules to it - it does not apply the ``width: 124`` "
"rule. The ``width: 124`` rule is part of the ``MyBox`` rule and is "
"applied by the ``MyBox``'s instance's :meth:`apply_class_lang_rules`."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.canvas:1 of
msgid "Canvas of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.canvas:3 of
msgid ""
"The canvas is a graphics object that contains all the drawing "
"instructions for the graphical representation of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.canvas:6 of
msgid ""
"There are no general properties for the Widget class, such as background "
"color, to keep the design simple and lean. Some derived classes, such as "
"Button, do add such convenience properties but generally the developer is"
" responsible for implementing the graphics representation for a custom "
"widget from the ground up. See the derived widget classes for patterns to"
" follow and extend."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.canvas:13 of
msgid "See :class:`~kivy.graphics.Canvas` for more information about the usage."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.center:1 of
msgid "Center position of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.center:3 of
msgid ""
":attr:`center` is a :class:`~kivy.properties.ReferenceListProperty` of "
"(:attr:`center_x`, :attr:`center_y`) properties."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.center_x:1 of
msgid "X center position of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.center_x:3 of
msgid ""
":attr:`center_x` is an :class:`~kivy.properties.AliasProperty` of "
"(:attr:`x` + :attr:`width` / 2.)."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.center_y:1 of
msgid "Y center position of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.center_y:3 of
msgid ""
":attr:`center_y` is an :class:`~kivy.properties.AliasProperty` of "
"(:attr:`y` + :attr:`height` / 2.)."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.children:1 of
msgid "List of children of this widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.children:3 of
msgid ""
":attr:`children` is a :class:`~kivy.properties.ListProperty` and defaults"
" to an empty list."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.children:6 of
msgid ""
"Use :meth:`add_widget` and :meth:`remove_widget` for manipulating the "
"children list. Don't manipulate the children list directly unless you "
"know what you are doing."
msgstr ""

#: kivy.uix.widget.Widget.clear_widgets:1 of
msgid ""
"Remove all (or the specified) :attr:`~Widget.children` of this widget. If"
" the 'children' argument is specified, it should be a list (or filtered "
"list) of children of the current widget."
msgstr ""

#: kivy.uix.widget.Widget.clear_widgets:5 of
msgid ""
"The `children` argument can be used to specify the children you want to "
"remove."
msgstr ""

#: kivy.uix.widget.Widget.clear_widgets:10 of
msgid ""
"Specifying an empty ``children`` list leaves the widgets unchanged. "
"Previously it was treated like ``None`` and all children were removed."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.cls:1 of
msgid "Class of the widget, used for styling."
msgstr ""

#: kivy.uix.widget.Widget.collide_point:1 of
msgid "Check if a point (x, y) is inside the widget's axis aligned bounding box."
msgstr ""

#: kivy.uix.widget.Widget.collide_point:5 of
msgid "`x`: numeric"
msgstr ""

#: kivy.uix.widget.Widget.collide_point:6 of
msgid "x position of the point (in parent coordinates)"
msgstr ""

#: kivy.uix.widget.Widget.collide_point:8 of
msgid "`y`: numeric"
msgstr ""

#: kivy.uix.widget.Widget.collide_point:8 of
msgid "y position of the point (in parent coordinates)"
msgstr ""

#: kivy.uix.widget.Widget.collide_point kivy.uix.widget.Widget.collide_widget
#: kivy.uix.widget.Widget.get_parent_window
#: kivy.uix.widget.Widget.get_root_window kivy.uix.widget.Widget.on_motion
#: kivy.uix.widget.Widget.on_touch_down kivy.uix.widget.Widget.walk
#: kivy.uix.widget.Widget.walk_reverse of
msgid "Returns"
msgstr ""

#: kivy.uix.widget.Widget.collide_point:11 of
msgid "A bool. True if the point is inside the bounding box, False otherwise."
msgstr ""

#: kivy.uix.widget.Widget.collide_widget:1 of
msgid ""
"Check if another widget collides with this widget. This function performs"
" an axis-aligned bounding box intersection test by default."
msgstr ""

#: kivy.uix.widget.Widget.collide_widget:6 of
msgid "`wid`: :class:`Widget` class"
msgstr ""

#: kivy.uix.widget.Widget.collide_widget:6 of
msgid "Widget to test collision with."
msgstr ""

#: kivy.uix.widget.Widget.collide_widget:9 of
msgid "bool. True if the other widget collides with this widget, False otherwise."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.disabled:1 of
msgid "Indicates whether this widget can interact with input or not."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.disabled:3 of
msgid ""
":attr:`disabled` is an :class:`~kivy.properties.AliasProperty` and "
"defaults to False."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.disabled:8 of
msgid ""
"Child Widgets, when added to a disabled widget, will be disabled "
"automatically."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.disabled:10 of
msgid "Disabling/enabling a parent disables/enables all of its children."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.disabled:17 of
msgid ""
":attr:`disabled` was changed from a "
":class:`~kivy.properties.BooleanProperty` to an "
":class:`~kivy.properties.AliasProperty` to allow access to its previous "
"state when a parent's disabled state is changed."
msgstr ""

#: kivy.uix.widget.Widget.export_as_image:1 of
msgid "Return an core :class:`~kivy.core.image.Image` of the actual widget."
msgstr ""

#: kivy.uix.widget.Widget.export_to_png:1 of
msgid ""
"Saves an image of the widget and its children in png format at the "
"specified filename. Works by removing the widget canvas from its parent, "
"rendering to an :class:`~kivy.graphics.fbo.Fbo`, and calling "
":meth:`~kivy.graphics.texture.Texture.save`."
msgstr ""

#: kivy.uix.widget.Widget.export_to_png:8 of
msgid ""
"The image includes only this widget and its children. If you want to "
"include widgets elsewhere in the tree, you must call "
":meth:`~Widget.export_to_png` from their common parent, or use "
":meth:`~kivy.core.window.WindowBase.screenshot` to capture the whole "
"window."
msgstr ""

#: kivy.uix.widget.Widget.export_to_png:16 of
msgid ""
"The image will be saved in png format, you should include the extension "
"in your filename."
msgstr ""

#: kivy.uix.widget.Widget.export_to_png:22 of
msgid "`filename`: str"
msgstr ""

#: kivy.uix.widget.Widget.export_to_png:23 of
msgid "The filename with which to save the png."
msgstr ""

#: kivy.uix.widget.Widget.export_to_png:26 of
msgid "`scale`: float"
msgstr ""

#: kivy.uix.widget.Widget.export_to_png:25 of
msgid "The amount by which to scale the saved image, defaults to 1."
msgstr ""

#: kivy.uix.widget.Widget.get_parent_window:1 of
msgid "Return the parent window."
msgstr ""

#: kivy.uix.widget.Widget.get_parent_window:4 of
msgid ""
"Instance of the parent window. Can be a "
":class:`~kivy.core.window.WindowBase` or :class:`Widget`."
msgstr ""

#: kivy.uix.widget.Widget.get_root_window:1 of
msgid "Return the root window."
msgstr ""

#: kivy.uix.widget.Widget.get_root_window:4 of
msgid ""
"Instance of the root window. Can be a "
":class:`~kivy.core.window.WindowBase` or :class:`Widget`."
msgstr ""

#: kivy.uix.widget.Widget.get_window_matrix:1 of
msgid ""
"Calculate the transformation matrix to convert between window and widget "
"coordinates."
msgstr ""

#: kivy.uix.widget.Widget.get_window_matrix:5 of
msgid "`x`: float, defaults to 0"
msgstr ""

#: kivy.uix.widget.Widget.get_window_matrix:6 of
msgid "Translates the matrix on the x axis."
msgstr ""

#: kivy.uix.widget.Widget.get_window_matrix:7 of
msgid "`y`: float, defaults to 0"
msgstr ""

#: kivy.uix.widget.Widget.get_window_matrix:8 of
msgid "Translates the matrix on the y axis."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.height:1 of
msgid "Height of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.height:3 of
msgid ""
":attr:`height` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 100."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.height:7 of
msgid ""
"Keep in mind that the `height` property is subject to layout logic and "
"that this has not yet happened at the time of the widget's `__init__` "
"method."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.height:12 of
msgid "A negative height is not supported."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.ids:1 of
msgid ""
"This is a dictionary of ids defined in your kv language. This will only "
"be populated if you use ids in your kv language code."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.ids:6 of
msgid ""
":attr:`ids` is a :class:`~kivy.properties.DictProperty` and defaults to "
"an empty dict {}."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.ids:9 of
msgid ""
"The :attr:`ids` are populated for each root level widget definition. For "
"example:"
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.ids:36 of
msgid "Then, in python:"
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.motion_filter:1 of
msgid ""
"Holds a dict of `type_id` to `list` of child widgets registered to "
"receive motion events of `type_id`."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.motion_filter:4 of
msgid ""
"Don't change the property directly but use "
":meth:`register_for_motion_event` and :meth:`unregister_for_motion_event`"
" to register and unregister for motion events. If `self` is registered it"
" will always be the first element in the list."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.motion_filter:12 of
msgid ""
"This is an experimental property and it remains so while this warning is "
"present."
msgstr ""

#: kivy.uix.widget.Widget.on_motion:1 of
msgid "Called when a motion event is received."
msgstr ""

#: kivy.uix.widget.Widget.on_motion:4 of
msgid "`etype`: `str`"
msgstr ""

#: kivy.uix.widget.Widget.on_motion:5 of
msgid "Event type, one of \"begin\", \"update\" or \"end\""
msgstr ""

#: kivy.uix.widget.Widget.on_motion:6 of
msgid "`me`: :class:`~kivy.input.motionevent.MotionEvent`"
msgstr ""

#: kivy.uix.widget.Widget.on_motion:7 of
msgid "Received motion event"
msgstr ""

#: kivy.uix.widget.Widget.on_motion:8 of
msgid "`bool` `True` to stop event dispatching"
msgstr ""

#: kivy.uix.widget.Widget.on_motion:14
#: kivy.uix.widget.Widget.register_for_motion_event:18
#: kivy.uix.widget.Widget.unregister_for_motion_event:15 of
msgid ""
"This is an experimental method and it remains so while this warning is "
"present."
msgstr ""

#: kivy.uix.widget.Widget.on_touch_down:1 of
msgid "Receive a touch down event."
msgstr ""

#: kivy.uix.widget.Widget.on_touch_down:7 of
msgid "`touch`: :class:`~kivy.input.motionevent.MotionEvent` class"
msgstr ""

#: kivy.uix.widget.Widget.on_touch_down:5 of
msgid ""
"Touch received. The touch is in parent coordinates. See "
":mod:`~kivy.uix.relativelayout` for a discussion on coordinate systems."
msgstr ""

#: kivy.uix.widget.Widget.on_touch_down:9 of
msgid ""
"bool If True, the dispatching of the touch event will stop. If False, the"
" event will continue to be dispatched to the rest of the widget tree."
msgstr ""

#: kivy.uix.widget.Widget.on_touch_move:1 of
msgid "Receive a touch move event. The touch is in parent coordinates."
msgstr ""

#: kivy.uix.widget.Widget.on_touch_move:3 kivy.uix.widget.Widget.on_touch_up:3
#: of
msgid "See :meth:`on_touch_down` for more information."
msgstr ""

#: kivy.uix.widget.Widget.on_touch_up:1 of
msgid "Receive a touch up event. The touch is in parent coordinates."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.opacity:1 of
msgid "Opacity of the widget and all its children."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.opacity:5 of
msgid ""
"The opacity attribute controls the opacity of the widget and its "
"children. Be careful, it's a cumulative attribute: the value is "
"multiplied by the current global opacity and the result is applied to the"
" current context color."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.opacity:10 of
msgid ""
"For example, if the parent has an opacity of 0.5 and a child has an "
"opacity of 0.2, the real opacity of the child will be 0.5 * 0.2 = 0.1."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.opacity:13 of
msgid "Then, the opacity is applied by the shader as:"
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.opacity:19 of
msgid ""
":attr:`opacity` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 1.0."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.parent:1 of
msgid ""
"Parent of this widget. The parent of a widget is set when the widget is "
"added to another widget and unset when the widget is removed from its "
"parent."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.parent:5 of
msgid ""
":attr:`parent` is an :class:`~kivy.properties.ObjectProperty` and "
"defaults to None."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.pos:1 of
msgid "Position of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.pos:3 of
msgid ""
":attr:`pos` is a :class:`~kivy.properties.ReferenceListProperty` of "
"(:attr:`x`, :attr:`y`) properties."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.pos_hint:1 of
msgid ""
"Position hint. This property allows you to set the position of the widget"
" inside its parent layout (similar to size_hint)."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.pos_hint:5 of
#, python-format
msgid ""
"For example, if you want to set the top of the widget to be at 90% height"
" of its parent layout, you can write::"
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.pos_hint:10 of
msgid ""
"The keys 'x', 'right' and 'center_x' will use the parent width. The keys "
"'y', 'top' and 'center_y' will use the parent height."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.pos_hint:13 of
msgid "See :doc:`api-kivy.uix.floatlayout` for further reference."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.pos_hint:16 of
msgid ""
":attr:`pos_hint` is not used by all layouts. Check the documentation of "
"the layout in question to see if it supports pos_hint."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.pos_hint:19 of
msgid ""
":attr:`pos_hint` is an :class:`~kivy.properties.ObjectProperty` "
"containing a dict."
msgstr ""

#: kivy.uix.widget.Widget.proxy_ref:1 of
msgid ""
"Return a proxy reference to the widget, i.e. without creating a reference"
" to the widget. See `weakref.proxy "
"<http://docs.python.org/2/library/weakref.html?highlight        "
"=proxy#weakref.proxy>`_ for more information."
msgstr ""

#: kivy.uix.widget.Widget.register_for_motion_event:1 of
msgid "Register to receive motion events of `type_id`."
msgstr ""

#: kivy.uix.widget.Widget.register_for_motion_event:3 of
msgid ""
"Override :meth:`on_motion` or bind to `on_motion` event to handle the "
"incoming motion events."
msgstr ""

#: kivy.uix.widget.Widget.register_for_motion_event:7
#: kivy.uix.widget.Widget.unregister_for_motion_event:4 of
msgid "`type_id`: `str`"
msgstr ""

#: kivy.uix.widget.Widget.register_for_motion_event:8
#: kivy.uix.widget.Widget.unregister_for_motion_event:5 of
msgid "Motion event type id (eg. \"touch\", \"hover\", etc.)"
msgstr ""

#: kivy.uix.widget.Widget.register_for_motion_event:10
#: kivy.uix.widget.Widget.unregister_for_motion_event:7 of
msgid "`widget`: `Widget`"
msgstr ""

#: kivy.uix.widget.Widget.register_for_motion_event:10
#: kivy.uix.widget.Widget.unregister_for_motion_event:7 of
msgid "Child widget or `self` if omitted"
msgstr ""

#: kivy.uix.widget.Widget.register_for_motion_event:15
#: kivy.uix.widget.Widget.unregister_for_motion_event:12 of
msgid "Method can be called multiple times with the same arguments."
msgstr ""

#: kivy.uix.widget.Widget.remove_widget:1 of
msgid "Remove a widget from the children of this widget."
msgstr ""

#: kivy.uix.widget.Widget.remove_widget:5 of
msgid "Widget to remove from our children list."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.right:1 of
msgid "Right position of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.right:3 of
msgid ""
":attr:`right` is an :class:`~kivy.properties.AliasProperty` of (:attr:`x`"
" + :attr:`width`)."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size:1 of
msgid "Size of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size:3 of
msgid ""
":attr:`size` is a :class:`~kivy.properties.ReferenceListProperty` of "
"(:attr:`width`, :attr:`height`) properties."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint:1 of
msgid "Size hint."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint:3 of
msgid ""
":attr:`size_hint` is a :class:`~kivy.properties.ReferenceListProperty` of"
" (:attr:`size_hint_x`, :attr:`size_hint_y`) properties."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint:6 of
msgid "See :attr:`size_hint_x` for more information."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_max:1 of
msgid "Maximum size when using :attr:`size_hint`."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_max:3 of
msgid ""
":attr:`size_hint_max` is a "
":class:`~kivy.properties.ReferenceListProperty` of "
"(:attr:`size_hint_max_x`, :attr:`size_hint_max_y`) properties."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_max_x:1 of
msgid ""
"When not None, the x-direction maximum size (in pixels, like "
":attr:`width`) when :attr:`size_hint_x` is also not None."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_max_x:4 of
msgid "Similar to :attr:`size_hint_min_x`, except that it sets the maximum width."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_max_x:6 of
msgid ""
":attr:`size_hint_max_x` is a :class:`~kivy.properties.NumericProperty` "
"and defaults to None."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_max_y:1 of
msgid ""
"When not None, the y-direction maximum size (in pixels, like "
":attr:`height`) when :attr:`size_hint_y` is also not None."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_max_y:4 of
msgid ""
"Similar to :attr:`size_hint_min_y`, except that it sets the maximum "
"height."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_max_y:6 of
msgid ""
":attr:`size_hint_max_y` is a :class:`~kivy.properties.NumericProperty` "
"and defaults to None."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_min:1 of
msgid "Minimum size when using :attr:`size_hint`."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_min:3 of
msgid ""
":attr:`size_hint_min` is a "
":class:`~kivy.properties.ReferenceListProperty` of "
"(:attr:`size_hint_min_x`, :attr:`size_hint_min_y`) properties."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_min_x:1 of
msgid ""
"When not None, the x-direction minimum size (in pixels, like "
":attr:`width`) when :attr:`size_hint_x` is also not None."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_min_x:4 of
msgid ""
"When :attr:`size_hint_x` is not None, it is the minimum width that the "
"widget will be set due to the :attr:`size_hint_x`. I.e. when a smaller "
"size would be set, :attr:`size_hint_min_x` is the value used instead for "
"the widget width. When None, or when :attr:`size_hint_x` is None, "
":attr:`size_hint_min_x` doesn't do anything."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_min_x:10
#: kivy.uix.widget.Widget.size_hint_min_y:10 of
msgid ""
"Only the :class:`~kivy.uix.layout.Layout` and "
":class:`~kivy.core.window.Window` classes make use of the hint."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_min_x:13 of
msgid ""
":attr:`size_hint_min_x` is a :class:`~kivy.properties.NumericProperty` "
"and defaults to None."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_min_y:1 of
msgid ""
"When not None, the y-direction minimum size (in pixels, like "
":attr:`height`) when :attr:`size_hint_y` is also not None."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_min_y:4 of
msgid ""
"When :attr:`size_hint_y` is not None, it is the minimum height that the "
"widget will be set due to the :attr:`size_hint_y`. I.e. when a smaller "
"size would be set, :attr:`size_hint_min_y` is the value used instead for "
"the widget height. When None, or when :attr:`size_hint_y` is None, "
":attr:`size_hint_min_y` doesn't do anything."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_min_y:13 of
msgid ""
":attr:`size_hint_min_y` is a :class:`~kivy.properties.NumericProperty` "
"and defaults to None."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_x:1 of
msgid ""
"x size hint. Represents how much space the widget should use in the "
"direction of the x axis relative to its parent's width. Only the "
":class:`~kivy.uix.layout.Layout` and :class:`~kivy.core.window.Window` "
"classes make use of the hint."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_x:6 of
msgid "The size_hint is used by layouts for two purposes:"
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_x:8 of
#, python-format
msgid ""
"When the layout considers widgets on their own rather than in relation to"
" its other children, the size_hint_x is a direct proportion of the parent"
" width, normally between 0.0 and 1.0. For instance, a widget with "
"``size_hint_x=0.5`` in a vertical BoxLayout will take up half the "
"BoxLayout's width, or a widget in a FloatLayout with ``size_hint_x=0.2`` "
"will take up 20% of the FloatLayout width. If the size_hint is greater "
"than 1, the widget will be wider than the parent."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_x:16 of
#, python-format
msgid ""
"When multiple widgets can share a row of a layout, such as in a "
"horizontal BoxLayout, their widths will be their size_hint_x as a "
"fraction of the sum of widget size_hints. For instance, if the "
"size_hint_xs are (0.5, 1.0, 0.5), the first widget will have a width of "
"25% of the parent width."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_x:22 of
msgid ""
":attr:`size_hint_x` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 1."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_y:1 of
msgid "y size hint."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_y:3 of
msgid ""
":attr:`size_hint_y` is a :class:`~kivy.properties.NumericProperty` and "
"defaults to 1."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.size_hint_y:6 of
msgid ""
"See :attr:`size_hint_x` for more information, but with widths and heights"
" swapped."
msgstr ""

#: kivy.uix.widget.Widget.to_local:1 of
msgid "Transform parent coordinates to local (current widget) coordinates."
msgstr ""

#: kivy.uix.widget.Widget.to_local:3 kivy.uix.widget.Widget.to_parent:3
#: kivy.uix.widget.Widget.to_widget:4 kivy.uix.widget.Widget.to_window:5 of
msgid "See :mod:`~kivy.uix.relativelayout` for details on the coordinate systems."
msgstr ""

#: kivy.uix.widget.Widget.to_local:8 kivy.uix.widget.Widget.to_parent:8 of
msgid "`relative`: bool, defaults to False"
msgstr ""

#: kivy.uix.widget.Widget.to_local:8 of
msgid ""
"Change to True if you want to translate coordinates to relative widget "
"coordinates."
msgstr ""

#: kivy.uix.widget.Widget.to_parent:1 of
msgid "Transform local (current widget) coordinates to parent coordinates."
msgstr ""

#: kivy.uix.widget.Widget.to_parent:8 of
msgid ""
"Change to True if you want to translate relative positions from a widget "
"to its parent coordinates."
msgstr ""

#: kivy.uix.widget.Widget.to_widget:1 of
msgid "Convert the coordinate from window to local (current widget) coordinates."
msgstr ""

#: kivy.uix.widget.Widget.to_window:1 of
msgid ""
"If ``initial`` is True, the default, it transforms **parent** coordinates"
" to window coordinates. Otherwise, it transforms **local** (current "
"widget) coordinates to window coordinates."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.top:1 of
msgid "Top position of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.top:3 of
msgid ""
":attr:`top` is an :class:`~kivy.properties.AliasProperty` of (:attr:`y` +"
" :attr:`height`)."
msgstr ""

#: kivy.uix.widget.Widget.unregister_for_motion_event:1 of
msgid "Unregister to receive motion events of `type_id`."
msgstr ""

#: kivy.uix.widget.Widget.walk:1 of
msgid ""
"Iterator that walks the widget tree starting with this widget and goes "
"forward returning widgets in the order in which layouts display them."
msgstr ""

#: kivy.uix.widget.Widget.walk:7 of
msgid "`restrict`: bool, defaults to False"
msgstr ""

#: kivy.uix.widget.Widget.walk:7 of
msgid ""
"If True, it will only iterate through the widget and its children (or "
"children of its children etc.). Defaults to False."
msgstr ""

#: kivy.uix.widget.Widget.walk:13 kivy.uix.widget.Widget.walk_reverse:13 of
msgid "`loopback`: bool, defaults to False"
msgstr ""

#: kivy.uix.widget.Widget.walk:10 of
msgid ""
"If True, when the last widget in the tree is reached, it'll loop back to "
"the uppermost root and start walking until we hit this widget again. "
"Naturally, it can only loop back when `restrict` is False. Defaults to "
"False."
msgstr ""

#: kivy.uix.widget.Widget.walk:15 of
msgid ""
"A generator that walks the tree, returning widgets in the forward layout "
"order."
msgstr ""

#: kivy.uix.widget.Widget.walk:19 kivy.uix.widget.Widget.walk_reverse:19 of
msgid "For example, given a tree with the following structure:"
msgstr ""

#: kivy.uix.widget.Widget.walk:31 kivy.uix.widget.Widget.walk_reverse:31 of
msgid "walking this tree:"
msgstr ""

#: kivy.uix.widget.Widget.walk_reverse:1 of
msgid ""
"Iterator that walks the widget tree backwards starting with the widget "
"before this, and going backwards returning widgets in the reverse order "
"in which layouts display them."
msgstr ""

#: kivy.uix.widget.Widget.walk_reverse:5 of
msgid ""
"This walks in the opposite direction of :meth:`walk`, so a list of the "
"tree generated with :meth:`walk` will be in reverse order compared to the"
" list generated with this, provided `loopback` is True."
msgstr ""

#: kivy.uix.widget.Widget.walk_reverse:11 of
msgid ""
"If True, when the uppermost root in the tree is reached, it'll loop back "
"to the last widget and start walking back until after we hit widget "
"again. Defaults to False."
msgstr ""

#: kivy.uix.widget.Widget.walk_reverse:15 of
msgid ""
"A generator that walks the tree, returning widgets in the reverse layout "
"order."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.width:1 of
msgid "Width of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.width:3 of
msgid ""
":attr:`width` is a :class:`~kivy.properties.NumericProperty` and defaults"
" to 100."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.width:7 of
msgid ""
"Keep in mind that the `width` property is subject to layout logic and "
"that this has not yet happened at the time of the widget's `__init__` "
"method."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.width:12 of
msgid "A negative width is not supported."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.x:1 of
msgid "X position of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.x:3 of
msgid ""
":attr:`x` is a :class:`~kivy.properties.NumericProperty` and defaults to "
"0."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.y:1 of
msgid "Y position of the widget."
msgstr ""

#: ../../docstring kivy.uix.widget.Widget.y:3 of
msgid ""
":attr:`y` is a :class:`~kivy.properties.NumericProperty` and defaults to "
"0."
msgstr ""

#: kivy.uix.widget.WidgetException:1 of
msgid "Bases: :py:class:`Exception`"
msgstr ""

#: kivy.uix.widget.WidgetException:1 of
msgid "Fired when the widget gets an exception."
msgstr ""

