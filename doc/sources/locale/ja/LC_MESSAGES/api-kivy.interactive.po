# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/api-kivy.interactive.rst:3
msgid "Interactive launcher"
msgstr ""

#: kivy.interactive:4 of
msgid "The interactive launcher has been deprecated."
msgstr ""

#: kivy.interactive:7 of
msgid ""
"The :class:`InteractiveLauncher` provides a user-friendly python shell "
"interface to an :class:`App` so that it can be prototyped and debugged "
"interactively."
msgstr ""

#: kivy.interactive:13 of
msgid ""
"The Kivy API intends for some functions to only be run once or before the"
" main EventLoop has started. Methods that can normally be called during "
"the course of an application will work as intended, but specifically "
"overriding methods such as :meth:`on_touch` dynamically leads to trouble."
msgstr ""

#: kivy.interactive:19 of
msgid "Creating an InteractiveLauncher"
msgstr ""

#: kivy.interactive:21 of
msgid ""
"Take your existing subclass of :class:`App` (this can be production code)"
" and pass an instance to the :class:`InteractiveLauncher` constructor. ::"
msgstr ""

#: kivy.interactive:35 of
msgid ""
"After pressing *enter*, the script will return. This allows the "
"interpreter to continue running. Inspection or modification of the "
":class:`App` can be done safely through the InteractiveLauncher instance "
"or the provided :class:`SafeMembrane` class instances."
msgstr ""

#: kivy.interactive:42 of
msgid ""
"If you want to test this example, start Python without any file to have "
"already an interpreter, and copy/paste all the lines. You'll still have "
"the interpreter at the end + the kivy application running."
msgstr ""

#: kivy.interactive:47 of
msgid "Interactive Development"
msgstr ""

#: kivy.interactive:49 of
msgid ""
"IPython provides a fast way to learn the Kivy API. The :class:`App` "
"instance and all of its attributes, including methods and the entire "
"widget tree, can be quickly listed by using the '.' operator and pressing"
" 'tab'. Try this code in an Ipython shell. ::"
msgstr ""

#: kivy.interactive:91 of
msgid ""
"All of the proxies used in the module store their referent in the "
":attr:`_ref` attribute, which can be accessed directly if needed, such as"
" for getting doc strings. :func:`help` and :func:`type` will access the "
"proxy, not its referent."
msgstr ""

#: kivy.interactive:97 of
msgid "Directly Pausing the Application"
msgstr ""

#: kivy.interactive:99 of
msgid ""
"Both the :class:`InteractiveLauncher` and :class:`SafeMembrane` hold "
"internal references to the :class:`EventLoop`'s 'safe' and 'confirmed' "
":class:`threading.Event` objects. You can use their safing methods to "
"control the application manually."
msgstr ""

#: kivy.interactive:104 of
msgid ""
":meth:`SafeMembrane.safeIn` will cause the application to pause and "
":meth:`SafeMembrane.safeOut` will allow a paused application to continue "
"running. This is potentially useful for scripting actions into functions "
"that need the screen to update etc."
msgstr ""

#: kivy.interactive:111 of
msgid ""
"The pausing is implemented via the :class:`Clocks' <kivy.clock.Clock>` "
":meth:`~kivy.clock.ClockBase.schedule_once` method and occurs before the "
"start of each frame."
msgstr ""

#: kivy.interactive:117 of
msgid "Adding Attributes Dynamically"
msgstr ""

#: kivy.interactive:121 of
msgid ""
"This module uses threading and object proxies to encapsulate the running "
":class:`App`. Deadlocks and memory corruption can occur if making direct "
"references inside the thread without going through the provided proxy(s)."
msgstr ""

#: kivy.interactive:125 of
msgid ""
"The :class:`InteractiveLauncher` can have attributes added to it exactly "
"like a normal object and if these were created from outside the membrane,"
" they will not be threadsafe because the external references to them in "
"the python interpreter do not go through InteractiveLauncher's membrane "
"behavior, inherited from :class:`SafeMembrane`."
msgstr ""

#: kivy.interactive:131 of
msgid ""
"To threadsafe these external references, simply assign them to "
":class:`SafeMembrane` instances of themselves like so::"
msgstr ""

#: kivy.interactive:143 of
msgid "TODO"
msgstr ""

#: kivy.interactive:145 of
msgid ""
"Unit tests, examples, and a better explanation of which methods are safe "
"in a running application would be nice. All three would be excellent."
msgstr ""

#: kivy.interactive:148 of
msgid "Could be re-written with a context-manager style i.e. ::"
msgstr ""

#: kivy.interactive:153 of
msgid "Any use cases besides compacting code?"
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`kivy.interactive.SafeMembrane`"
msgstr ""

#: kivy.interactive.InteractiveLauncher:1 of
msgid ""
"Proxy to an application instance that launches it in a thread and then "
"returns and acts as a proxy to the application in the thread."
msgstr ""

#: ../../<autodoc>:1
msgid "Bases: :class:`builtins.object`"
msgstr ""

#: kivy.interactive.SafeMembrane:1 of
msgid ""
"This help is for a proxy object. Did you want help on the proxy's "
"referent instead? Try using help(<instance>._ref)"
msgstr ""

#: kivy.interactive.SafeMembrane:4 of
msgid ""
"The SafeMembrane is a threadsafe proxy that also returns attributes as "
"new thread-safe objects and makes thread-safe method calls, preventing "
"thread-unsafe objects from leaking into the user's environment."
msgstr ""

#: kivy.interactive.SafeMembrane.safeIn:1 of
msgid "Provides a thread-safe entry point for interactive launching."
msgstr ""

#: kivy.interactive.SafeMembrane.safeOut:1 of
msgid "Provides a thread-safe exit point for interactive launching."
msgstr ""

