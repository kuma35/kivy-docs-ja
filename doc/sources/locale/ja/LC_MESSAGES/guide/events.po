# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/guide/events.rst:5
msgid "Events and Properties"
msgstr ""

#: ../../sources/guide/events.rst:7
msgid ""
"Events are an important part of Kivy programming. That may not be "
"surprising to those with GUI development experience, but it's an "
"important concept for newcomers. Once you understand how events work and "
"how to bind to them, you will see them everywhere in Kivy. They make it "
"easy to build whatever behavior you want into Kivy."
msgstr ""

#: ../../sources/guide/events.rst:13
msgid ""
"The following illustration shows how events are handled in the Kivy "
"framework."
msgstr ""

#: ../../sources/guide/events.rst:19
msgid "Introduction to the Event Dispatcher"
msgstr ""

#: ../../sources/guide/events.rst:21
msgid ""
"One of the most important base classes of the framework is the "
":class:`~kivy.event.EventDispatcher` class. This class allows you to "
"register event types, and to dispatch them to interested parties (usually"
" other event dispatchers). The :class:`~kivy.uix.widget.Widget`, "
":class:`~kivy.animation.Animation` and :obj:`~kivy.clock.Clock` classes "
"are examples of event dispatchers."
msgstr ""

#: ../../sources/guide/events.rst:28
msgid ""
"EventDispatcher objects depend on the main loop to generate and handle "
"events."
msgstr ""

#: ../../sources/guide/events.rst:32
msgid "Main loop"
msgstr ""

#: ../../sources/guide/events.rst:34
msgid ""
"As outlined in the illustration above, Kivy has a `main loop`. This loop "
"is running during all of the application's lifetime and only quits when "
"exiting the application."
msgstr ""

#: ../../sources/guide/events.rst:38
msgid ""
"Inside the loop, at every iteration, events are generated from user "
"input, hardware sensors or a couple of other sources, and frames are "
"rendered to the display."
msgstr ""

#: ../../sources/guide/events.rst:42
msgid ""
"Your application will specify callbacks (more on this later), which are "
"called by the main loop. If a callback takes too long or doesn't quit at "
"all, the main loop is broken and your app doesn't work properly anymore."
msgstr ""

#: ../../sources/guide/events.rst:46
msgid ""
"In Kivy applications, you have to avoid long/infinite loops or sleeping. "
"For example the following code does both::"
msgstr ""

#: ../../sources/guide/events.rst:53
msgid ""
"When you run this, the program will never exit your loop, preventing Kivy"
" from doing all of the other things that need doing. As a result, all "
"you'll see is a black window which you won't be able to interact with. "
"Instead, you need to \"schedule\" your ``animate_something()`` function "
"to be called repeatedly."
msgstr ""

#: ../../sources/guide/events.rst:60
msgid "Scheduling a repetitive event"
msgstr ""

#: ../../sources/guide/events.rst:62
msgid ""
"You can call a function or a method every X times per second using "
":meth:`~kivy.clock.Clock.schedule_interval`. Here is an example of "
"calling a function named my_callback 30 times per second::"
msgstr ""

#: ../../sources/guide/events.rst:70
msgid ""
"You have multiple ways of unscheduling a previously scheduled event. One,"
" is to use :meth:`~kivy.clock.ClockEvent.cancel` or "
":meth:`~kivy.clock.Clock.unschedule`::"
msgstr ""

#: ../../sources/guide/events.rst:75
msgid "or::"
msgstr ""

#: ../../sources/guide/events.rst:79
msgid ""
"Alternatively, you can return False in your callback, and your event will"
" be automatically unscheduled::"
msgstr ""

#: ../../sources/guide/events.rst:94
msgid "Scheduling a one-time event"
msgstr ""

#: ../../sources/guide/events.rst:96
msgid ""
"Using :meth:`~kivy.clock.Clock.schedule_once`, you can call a function "
"\"later\", like in the next frame, or in X seconds::"
msgstr ""

#: ../../sources/guide/events.rst:103
msgid ""
"This will call ``my_callback`` in one second. The second argument is the "
"amount of time to wait before calling the function, in seconds. However, "
"you can achieve some other results with special values for the second "
"argument:"
msgstr ""

#: ../../sources/guide/events.rst:107
msgid "If X is greater than 0, the callback will be called in X seconds"
msgstr ""

#: ../../sources/guide/events.rst:108
msgid "If X is 0, the callback will be called after the next frame"
msgstr ""

#: ../../sources/guide/events.rst:109
msgid "If X is -1, the callback will be called before the next frame"
msgstr ""

#: ../../sources/guide/events.rst:111
msgid ""
"The -1 is mostly used when you are already in a scheduled event, and if "
"you want to schedule a call BEFORE the next frame is happening."
msgstr ""

#: ../../sources/guide/events.rst:114
msgid ""
"A second method for repeating a function call is to first schedule a "
"callback once with :meth:`~kivy.clock.Clock.schedule_once`, and a second "
"call to this function inside the callback itself::"
msgstr ""

#: ../../sources/guide/events.rst:125
msgid ""
"While the main loop will try to keep to the schedule as requested, there "
"is some uncertainty as to when exactly a scheduled callback will be "
"called. Sometimes another callback or some other task in the application "
"will take longer than anticipated and thus the timing can be a little "
"off."
msgstr ""

#: ../../sources/guide/events.rst:130
msgid ""
"In the latter solution to the repetitive callback problem, the next "
"iteration will be called at least one second after the last iteration "
"ends. With :meth:`~kivy.clock.Clock.schedule_interval` however, the "
"callback is called every second."
msgstr ""

#: ../../sources/guide/events.rst:136
msgid "Trigger events"
msgstr ""

#: ../../sources/guide/events.rst:138
msgid ""
"Sometimes you may want to schedule a function to be called only once for "
"the next frame, preventing duplicate calls. You might be tempted to "
"achieve that like so::"
msgstr ""

#: ../../sources/guide/events.rst:149
msgid ""
"This way of programming a trigger is expensive, since you'll always call "
"unschedule, even if the event has already completed. In addition, a new "
"event is created every time. Use a trigger instead::"
msgstr ""

#: ../../sources/guide/events.rst:157
msgid ""
"Each time you call trigger(), it will schedule a single call of your "
"callback. If it was already scheduled, it will not be rescheduled."
msgstr ""

#: ../../sources/guide/events.rst:162
msgid "Widget events"
msgstr ""

#: ../../sources/guide/events.rst:164
msgid "A widget has 2 default types of events:"
msgstr ""

#: ../../sources/guide/events.rst:166
msgid ""
"Property event: if your widget changes its position or size, an event is "
"fired."
msgstr ""

#: ../../sources/guide/events.rst:167
msgid ""
"Widget-defined event: e.g. an event will be fired for a Button when it's "
"pressed or released."
msgstr ""

#: ../../sources/guide/events.rst:170
msgid ""
"For a discussion on how widget touch events are managed and propagated, "
"please refer to the :ref:`Widget touch event bubbling <widget-event-"
"bubbling>` section."
msgstr ""

#: ../../sources/guide/events.rst:174
msgid "Creating custom events"
msgstr ""

#: ../../sources/guide/events.rst:176
msgid ""
"To create an event dispatcher with custom events, you need to register "
"the name of the event in the class and then create a method of the same "
"name."
msgstr ""

#: ../../sources/guide/events.rst:179
msgid "See the following example::"
msgstr ""

#: ../../sources/guide/events.rst:196
msgid "Attaching callbacks"
msgstr ""

#: ../../sources/guide/events.rst:198
msgid ""
"To use events, you have to bind callbacks to them. When the event is "
"dispatched, your callbacks will be called with the parameters relevant to"
" that specific event."
msgstr ""

#: ../../sources/guide/events.rst:202
msgid ""
"A callback can be any python callable, but you need to ensure it accepts "
"the arguments that the event emits. For this, it's usually safest to "
"accept the `*args` argument, which will catch all arguments in the `args`"
" list."
msgstr ""

#: ../../sources/guide/events.rst:206
msgid "Example::"
msgstr ""

#: ../../sources/guide/events.rst:216
msgid ""
"Pleases refer to the :meth:`kivy.event.EventDispatcher.bind` method "
"documentation for more examples on how to attach callbacks."
msgstr ""

#: ../../sources/guide/events.rst:220
msgid "Introduction to Properties"
msgstr ""

#: ../../sources/guide/events.rst:222
msgid ""
"Properties are an awesome way to define events and bind to them. "
"Essentially, they produce events such that when an attribute of your "
"object changes, all properties that reference that attribute are "
"automatically updated."
msgstr ""

#: ../../sources/guide/events.rst:226
msgid ""
"There are different kinds of properties to describe the type of data you "
"want to handle."
msgstr ""

#: ../../sources/guide/events.rst:229
msgid ":class:`~kivy.properties.StringProperty`"
msgstr ""

#: ../../sources/guide/events.rst:230
msgid ":class:`~kivy.properties.NumericProperty`"
msgstr ""

#: ../../sources/guide/events.rst:231
msgid ":class:`~kivy.properties.BoundedNumericProperty`"
msgstr ""

#: ../../sources/guide/events.rst:232
msgid ":class:`~kivy.properties.ObjectProperty`"
msgstr ""

#: ../../sources/guide/events.rst:233
msgid ":class:`~kivy.properties.DictProperty`"
msgstr ""

#: ../../sources/guide/events.rst:234
msgid ":class:`~kivy.properties.ListProperty`"
msgstr ""

#: ../../sources/guide/events.rst:235
msgid ":class:`~kivy.properties.OptionProperty`"
msgstr ""

#: ../../sources/guide/events.rst:236
msgid ":class:`~kivy.properties.AliasProperty`"
msgstr ""

#: ../../sources/guide/events.rst:237
msgid ":class:`~kivy.properties.BooleanProperty`"
msgstr ""

#: ../../sources/guide/events.rst:238
msgid ":class:`~kivy.properties.ReferenceListProperty`"
msgstr ""

#: ../../sources/guide/events.rst:242
msgid "Declaration of a Property"
msgstr ""

#: ../../sources/guide/events.rst:244
msgid ""
"To declare properties, you must declare them at the class level. The "
"class will then do the work to instantiate the real attributes when your "
"object is created. These properties are not attributes: they are "
"mechanisms for creating events based on your attributes::"
msgstr ""

#: ../../sources/guide/events.rst:254
msgid ""
"When overriding `__init__`, *always* accept `**kwargs` and use `super()` "
"to call the parent's `__init__` method, passing in your class instance::"
msgstr ""

#: ../../sources/guide/events.rst:262
msgid "Dispatching a Property event"
msgstr ""

#: ../../sources/guide/events.rst:264
msgid ""
"Kivy properties, by default, provide an `on_<property_name>` event. This "
"event is called when the value of the property is changed."
msgstr ""

#: ../../sources/guide/events.rst:268
msgid ""
"If the new value for the property is equal to the current value, then the"
" `on_<property_name>` event will not be called."
msgstr ""

#: ../../sources/guide/events.rst:271 ../../sources/guide/events.rst:337
msgid "For example, consider the following code:"
msgstr ""

#: ../../sources/guide/events.rst:289
msgid "In the code above at line 3::"
msgstr ""

#: ../../sources/guide/events.rst:293
msgid ""
"We define the `pressed` Property of type "
":class:`~kivy.properties.ListProperty`, giving it a default value of `[0,"
" 0]`. From this point forward, the `on_pressed` event will be called "
"whenever the value of this property is changed."
msgstr ""

#: ../../sources/guide/events.rst:297
msgid "At Line 5::"
msgstr ""

#: ../../sources/guide/events.rst:305
msgid ""
"We override the :meth:`on_touch_down` method of the Widget class. Here, "
"we check for collision of the `touch` with our widget."
msgstr ""

#: ../../sources/guide/events.rst:308
msgid ""
"If the touch falls inside of our widget, we change the value of `pressed`"
" to touch.pos and return True, indicating that we have consumed the touch"
" and don't want it to propagate any further."
msgstr ""

#: ../../sources/guide/events.rst:312
msgid ""
"Finally, if the touch falls outside our widget, we call the original "
"event using `super(...)` and return the result. This allows the touch "
"event propagation to continue as it would normally have occurred."
msgstr ""

#: ../../sources/guide/events.rst:316
msgid "Finally on line 11::"
msgstr ""

#: ../../sources/guide/events.rst:321
msgid ""
"We define an `on_pressed` function that will be called by the property "
"whenever the property value is changed."
msgstr ""

#: ../../sources/guide/events.rst:325
msgid ""
"This `on_<prop_name>` event is called within the class where the property"
" is defined. To monitor/observe any change to a property outside of the "
"class where it's defined, you should bind to the property as shown below."
msgstr ""

#: ../../sources/guide/events.rst:330
msgid "**Binding to the property**"
msgstr ""

#: ../../sources/guide/events.rst:332
msgid ""
"How to monitor changes to a property when all you have access to is a "
"widget instance? You *bind* to the property::"
msgstr ""

#: ../../sources/guide/events.rst:355
msgid ""
"If you run the code as is, you will notice two print statements in the "
"console. One from the `on_pressed` event that is called inside the "
"`CustomBtn` class and another from the `btn_pressed` function that we "
"bind to the property change."
msgstr ""

#: ../../sources/guide/events.rst:359
msgid ""
"The reason that both functions are called is simple. Binding doesn't mean"
" overriding. Having both of these functions is redundant and you should "
"generally only use one of the methods of listening/reacting to property "
"changes."
msgstr ""

#: ../../sources/guide/events.rst:363
msgid ""
"You should also take note of the parameters that are passed to the "
"`on_<property_name>` event or the function bound to the property."
msgstr ""

#: ../../sources/guide/events.rst:370
msgid ""
"The first parameter is `self`, which is the instance of the class where "
"this function is defined. You can use an in-line function as follows:"
msgstr ""

#: ../../sources/guide/events.rst:384
msgid ""
"The first parameter would be the `instance` of the class the property is "
"defined."
msgstr ""

#: ../../sources/guide/events.rst:387
msgid ""
"The second parameter would be the `value`, which is the new value of the "
"property."
msgstr ""

#: ../../sources/guide/events.rst:389
msgid ""
"Here is the complete example, derived from the snippets above, that you "
"can use to copy and paste into an editor to experiment."
msgstr ""

#: ../../sources/guide/events.rst:439
msgid "Running the code above will give you the following output:"
msgstr ""

#: ../../sources/guide/events.rst:443
msgid ""
"Our CustomBtn has no visual representation and thus appears black. You "
"can touch/click on the black area to see the output on your console."
msgstr ""

#: ../../sources/guide/events.rst:447
msgid "Compound Properties"
msgstr ""

#: ../../sources/guide/events.rst:449
msgid ""
"When defining an :class:`~kivy.properties.AliasProperty`, you normally "
"define a getter and a setter function yourself. Here, it falls on to you "
"to define when the getter and the setter functions are called using the "
"`bind` argument."
msgstr ""

#: ../../sources/guide/events.rst:453
msgid "Consider the following code."
msgstr ""

#: ../../sources/guide/events.rst:469
msgid ""
"Here `cursor_pos` is a :class:`~kivy.properties.AliasProperty` which uses"
" the `getter` `_get_cursor_pos` with the `setter` part set to None, "
"implying this is a read only Property."
msgstr ""

#: ../../sources/guide/events.rst:473
msgid ""
"The bind argument at the end defines that `on_cursor_pos` event is "
"dispatched when any of the properties used in the `bind=` argument "
"change."
msgstr ""

