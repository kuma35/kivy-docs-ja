# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 2.2.0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-12 08:37+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../sources/examples/gallery.rst:3
msgid "Gallery"
msgstr ""

#: ../../sources/examples/gallery.rst:9
msgid ""
"This gallery lets you explore the many examples included with Kivy. Click"
" on any screenshot to see the code."
msgstr ""

#: ../../sources/examples/gallery.rst:12
msgid "This gallery contains:"
msgstr ""

#: ../../sources/examples/gallery.rst:14
msgid ""
"Examples from the examples/ directory that show specific capabilities of "
"different libraries and features of Kivy."
msgstr ""

#: ../../sources/examples/gallery.rst:16
msgid ""
"Demonstrations from the examples/demos/ directory that explore many of "
"Kivy's abilities."
msgstr ""

#: ../../sources/examples/gallery.rst:19
msgid "There are more Kivy programs elsewhere:"
msgstr ""

#: ../../sources/examples/gallery.rst:21
msgid "Tutorials_ walks through the development of complete Kivy applications."
msgstr ""

#: ../../sources/examples/gallery.rst:22
msgid ""
"Unit tests found in the source code under the subdirectory kivy/tests/ "
"can also be useful."
msgstr ""

#: ../../sources/examples/gallery.rst:25
msgid "We hope your journey into learning Kivy is exciting and fun!"
msgstr ""

#: ../../sources/examples/gallery.rst:29
msgid ""
"**3D Rotating Monkey Head** "
"(:doc:`3Drendering/main.py<gen__3Drendering__main__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:31
msgid ""
"This example demonstrates using OpenGL to display a rotating monkey head."
" This includes loading a Blender OBJ file, shaders written in OpenGL's "
"Shading Language (GLSL), and using scheduled callbacks."
msgstr ""

#: ../../sources/examples/gallery.rst:35
msgid ""
"The monkey.obj file is an OBJ file output from the Blender free 3D "
"creation software. The file is text, listing vertices and faces and is "
"loaded using a class in the file objloader.py. The file simple.glsl is a "
"simple vertex and fragment shader written in GLSL."
msgstr ""

#: ../../sources/examples/gallery.rst:45
msgid ""
"**Widget animation** "
"(:doc:`animation/animate.py<gen__animation__animate__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:47
msgid ""
"This example demonstrates creating and applying a multi-part animation to"
" a button widget. You should see a button labelled 'plop' that will move "
"with an animation when clicked."
msgstr ""

#: ../../sources/examples/gallery.rst:56
msgid ""
"**Suite of Application Builders** "
"(:doc:`application/app_suite.py<gen__application__app_suite__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:58
msgid ""
"This explores different methods of starting an application. If you run "
"this without a command line parameter, you should see a menu in your "
"terminal. You can also run this with a 'r' parameter to pick a random "
"method. There are lots of logging options to make this easier to debug: "
"the execution order may not be obvious. Each time you run the command, "
"only one kivy application is created."
msgstr ""

#: ../../sources/examples/gallery.rst:65
msgid "This uses the file testkvfile.kv and the file app_suite_data/testkvdir.kv."
msgstr ""

#: ../../sources/examples/gallery.rst:73
msgid ""
"**Application example using build() + return** "
"(:doc:`application/app_with_build.py<gen__application__app_with_build__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:75
msgid ""
"An application can be built if you return a widget on build(), or if you "
"set self.root."
msgstr ""

#: ../../sources/examples/gallery.rst:83
msgid ""
"**Application built from a  .kv file** "
"(:doc:`application/app_with_kv.py<gen__application__app_with_kv__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:85
msgid ""
"This shows how to implicitly use a .kv file for your application. You "
"should see a full screen button labelled \"Hello from test.kv\"."
msgstr ""

#: ../../sources/examples/gallery.rst:88
msgid ""
"After Kivy instantiates a subclass of App, it implicitly searches for a "
".kv file. The file test.kv is selected because the name of the subclass "
"of App is TestApp, which implies that kivy should try to load "
"\"test.kv\". That file contains a root Widget."
msgstr ""

#: ../../sources/examples/gallery.rst:98
msgid ""
"**Application from a .kv in a Template Directory** "
"(:doc:`application/app_with_kv_in_template1.py<gen__application__app_with_kv_in_template1__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:100
msgid ""
"This example shows how you can change the directory for the .kv file. You"
" should see \"Hello from template1/test.ky\" as a button."
msgstr ""

#: ../../sources/examples/gallery.rst:103
msgid ""
"As kivy instantiates the TestApp subclass of App, the variable "
"kv_directory is set. Kivy then implicitly searches for a .kv file "
"matching the name of the subclass in that directory, finding the file "
"template1/test.kv. That file contains the root widget."
msgstr ""

#: ../../sources/examples/gallery.rst:115
msgid "**Camera Example** (:doc:`camera/main.py<gen__camera__main__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:117
msgid ""
"This example demonstrates a simple use of the camera. It shows a window "
"with a buttoned labelled 'play' to turn the camera on and off. Note that "
"not finding a camera, perhaps because gstreamer is not installed, will "
"throw an exception during the kv language processing."
msgstr ""

#: ../../sources/examples/gallery.rst:128
msgid "**Bezier Example** (:doc:`canvas/bezier.py<gen__canvas__bezier__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:130
msgid ""
"This example shows a closed Bezier curve computed from a polygon. You "
"should see a purple polygon, a red bezier curve computed from the "
"polygon, and two sliders. You can drag points on the polygon to recompute"
" the curve. The two sliders control the dash length of the dashed lines "
"making up the two shapes."
msgstr ""

#: ../../sources/examples/gallery.rst:142
msgid ""
"**Canvas stress** "
"(:doc:`canvas/canvas_stress.py<gen__canvas__canvas_stress__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:144
msgid ""
"This example tests the performance of our Graphics engine by drawing "
"large numbers of small squares. You should see a black canvas with "
"buttons and a label at the bottom. Pressing the buttons adds small "
"colored squares to the canvas."
msgstr ""

#: ../../sources/examples/gallery.rst:155
msgid "**Circle Example** (:doc:`canvas/circle.py<gen__canvas__circle__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:157
msgid ""
"This example exercises circle (ellipse) drawing. You should see sliders "
"at the top of the screen with the Kivy logo below it. The sliders control"
" the angle start and stop and the height and width scales. There is a "
"button to reset the sliders. The logo used for the circle's background "
"image is from the kivy/data directory. The entire example is coded in the"
" kv language description."
msgstr ""

#: ../../sources/examples/gallery.rst:169
msgid "**FBO Canvas** (:doc:`canvas/fbo_canvas.py<gen__canvas__fbo_canvas__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:171
msgid ""
"This demonstrates a layout using an FBO (Frame Buffer Off-screen) instead"
" of a plain canvas. You should see a black canvas with a button labelled "
"'FBO' in the bottom left corner. Clicking it animates the button moving "
"right to left."
msgstr ""

#: ../../sources/examples/gallery.rst:181
msgid ""
"**Line (SmoothLine) Experiment** "
"(:doc:`canvas/lines.py<gen__canvas__lines__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:183
msgid ""
"This demonstrates the experimental and unfinished SmoothLine feature for "
"fast line drawing. You should see a multi-segment path at the top of the "
"screen, and sliders and buttons along the bottom. You can click to add "
"new points to the segment, change the transparency and width of the line,"
" or hit 'Animate' to see a set of sine and cosine animations. The Cap and"
" Joint buttons don't work: SmoothLine has not implemented these features "
"yet."
msgstr ""

#: ../../sources/examples/gallery.rst:196
msgid ""
"**Lines Extended Demo** "
"(:doc:`canvas/lines_extended.py<gen__canvas__lines_extended__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:198
msgid ""
"This demonstrates how to use the extended line drawing routines such as "
"circles, ellipses, and rectangles. You should see a static image of "
"labelled shapes on the screen."
msgstr ""

#: ../../sources/examples/gallery.rst:207
msgid "**Mesh test** (:doc:`canvas/mesh.py<gen__canvas__mesh__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:209
msgid ""
"This demonstrates the use of a mesh mode to distort an image. You should "
"see a line of buttons across the bottom of a canvas. Pressing them "
"displays the mesh, a small circle of points, with different mesh.mode "
"settings."
msgstr ""

#: ../../sources/examples/gallery.rst:218
msgid ""
"**Multitexture Example** "
"(:doc:`canvas/multitexture.py<gen__canvas__multitexture__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:220
msgid ""
"This example blends two textures: the image mtexture1.png of the letter K"
" and the image mtexture2.png of an orange circle. You should see an "
"orange K clipped to a circle. It uses a custom shader, written in glsl "
"(OpenGL Shading Language), stored in a local string."
msgstr ""

#: ../../sources/examples/gallery.rst:225
#: ../../sources/examples/gallery.rst:240
msgid ""
"Note the image mtexture1.png is a white 'K' on a transparent background, "
"which makes it hard to see."
msgstr ""

#: ../../sources/examples/gallery.rst:233
msgid ""
"**Repeat Texture on Resize** "
"(:doc:`canvas/repeat_texture.py<gen__canvas__repeat_texture__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:235
msgid ""
"This examples repeats the letter 'K' (mtexture1.png) 64 times in a "
"window. You should see 8 rows and 8 columns of white K letters, along a "
"label showing the current size. As you resize the window, it stays an "
"8x8. This example includes a label with a colored background."
msgstr ""

#: ../../sources/examples/gallery.rst:248
msgid ""
"**Rotation Example** "
"(:doc:`canvas/rotation.py<gen__canvas__rotation__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:250
msgid ""
"This example rotates a button using PushMatrix and PopMatrix. You should "
"see a static button with the words 'hello world' rotated at a 45 degree "
"angle."
msgstr ""

#: ../../sources/examples/gallery.rst:258
msgid ""
"**Stencil demo** "
"(:doc:`canvas/stencil_canvas.py<gen__canvas__stencil_canvas__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:260
msgid ""
"This is a test of the stencil graphics instruction inside the stencil "
"view widget. When you use a stencil, nothing will be drawn outside the "
"bounding box. All the graphics will draw only in the stencil view."
msgstr ""

#: ../../sources/examples/gallery.rst:264
msgid ""
"You can \"draw\" a stencil view by touch & draw. The touch down will set "
"the position, and the drag will set the size."
msgstr ""

#: ../../sources/examples/gallery.rst:272
msgid ""
"**Tesselate Demonstration** "
"(:doc:`canvas/tesselate.py<gen__canvas__tesselate__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:274
msgid ""
"This demonstrates the experimental library for tesselating polygons. You "
"should see a hollow square with some buttons below it. You can click and "
"drag to create additional shapes, watching the number of vertices and "
"elements at the top of the screen. The 'debug' button toggles showing the"
" mesh in different colors."
msgstr ""

#: ../../sources/examples/gallery.rst:285
msgid ""
"**Texture Wrapping and Coordinates Example** "
"(:doc:`canvas/texture.py<gen__canvas__texture__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:287
msgid ""
"This example changes texture properties and the properties of its "
"containing rectangle. You should see some a multicolored texture with "
"sliders to the left and below and buttons at the bottom of the screen. "
"The image texture_example_image.png is rendered into the rectangle. "
"Sliders change the number of copies of the texture (the tex_coords), the "
"size of enclosing rectangle (the taw_height and taw_width) while the "
"buttons change how the texture is rendered when more than one copy is in "
"the rectangle (the texture_wrap)."
msgstr ""

#: ../../sources/examples/gallery.rst:303
msgid ""
"**Shuffled Camera Feed Puzzle** "
"(:doc:`demo/camera_puzzle.py<gen__demo__camera_puzzle__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:305
msgid ""
"This demonstrates using Scatter widgets with a live camera. You should "
"see a shuffled grid of rectangles that make up the camera feed. You can "
"drag the squares around to see the unscrambled camera feed or double "
"click to scramble the grid again."
msgstr ""

#: ../../sources/examples/gallery.rst:316
msgid ""
"**Kivy Catalog** "
"(:doc:`demo/kivycatalog/main.py<gen__demo__kivycatalog__main__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:318
msgid ""
"The Kivy Catalog viewer showcases widgets available in Kivy and allows "
"interactive editing of kivy language code to get immediate feedback. You "
"should see a two panel screen with a menu spinner button (starting with "
"'Welcome') and other controls across the top.The left pane contains kivy "
"(.kv) code, and the right side is that code rendered. You can edit the "
"left pane, though changes will be lost when you use the menu spinner "
"button. The catalog will show you dozens of .kv examples controlling "
"different widgets and layouts."
msgstr ""

#: ../../sources/examples/gallery.rst:327
msgid ""
"The catalog's interface is set in the file kivycatalog.kv, while the "
"interfaces for each menu option are set in containers_kvs directory. To "
"add a new .kv file to the Kivy Catalog, add a .kv file into the "
"container_kvs directory and reference that file in the ScreenManager "
"section of kivycatalog.kv."
msgstr ""

#: ../../sources/examples/gallery.rst:333
msgid "Known bugs include some issue with the drop"
msgstr ""

#: ../../sources/examples/gallery.rst:340
msgid ""
"**Multistroke Recognition Database Demonstration** "
"(:doc:`demo/multistroke/main.py<gen__demo__multistroke__main__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:342
msgid ""
"This application records gestures and attempts to match them. You should "
"see a black drawing surface with some buttons across the bottom. As you "
"make a gesture on the drawing surface, the gesture will be added to the "
"history and a match will be attempted. If you go to the history tab, name"
" the gesture, and add it to the database, then similar gestures in the "
"future will be recognized. You can load and save databases of gestures in"
" .kg files."
msgstr ""

#: ../../sources/examples/gallery.rst:350
msgid ""
"This demonstration code spans many files, with this being the primary "
"file. The information pop-up ('No match') comes from the file helpers.py."
" The history pane is managed in the file historymanager.py and described "
"in the file historymanager.kv. The database pane and storage is managed "
"in the file gesturedatabase.py and the described in the file "
"gesturedatabase.kv. The general logic of the sliders and buttons are in "
"the file settings.py and described in settings.kv. but the actual "
"settings pane is described in the file multistroke.kv and managed from "
"this file."
msgstr ""

#: ../../sources/examples/gallery.rst:365
msgid ""
"**Basic Picture Viewer** "
"(:doc:`demo/pictures/main.py<gen__demo__pictures__main__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:367
msgid ""
"This simple image browser demonstrates the scatter widget. You should see"
" three framed photographs on a background. You can click and drag the "
"photos around, or multi-touch to drop a red dot to scale and rotate the "
"photos."
msgstr ""

#: ../../sources/examples/gallery.rst:372
msgid ""
"The photos are loaded from the local images directory, while the "
"background picture is from the data shipped with kivy in "
"kivy/data/images/background.jpg. The file pictures.kv describes the "
"interface and the file shadow32.png is the border to make the images look"
" like framed photographs. Finally, the file android.txt is used to "
"package the application for use with the Kivy Launcher Android "
"application."
msgstr ""

#: ../../sources/examples/gallery.rst:379
msgid ""
"For Android devices, you can copy/paste this directory into "
"/sdcard/kivy/pictures on your Android device."
msgstr ""

#: ../../sources/examples/gallery.rst:382
msgid ""
"The images in the image directory are from the Internet Archive, "
"`https://archive.org/details/PublicDomainImages`, and are in the public "
"domain."
msgstr ""

#: ../../sources/examples/gallery.rst:392
msgid ""
"**Live Shader Editor** "
"(:doc:`demo/shadereditor/main.py<gen__demo__shadereditor__main__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:394
msgid ""
"This provides a live editor for vertex and fragment editors. You should "
"see a window with two editable panes on the left and a large kivy logo on"
" the right.The top pane is the Vertex shader and the bottom is the "
"Fragment shader. The file shadereditor.kv describes the interface."
msgstr ""

#: ../../sources/examples/gallery.rst:400
msgid ""
"On each keystroke to either shader, declarations are added and the "
"shaders are compiled. If there are no errors, the screen is updated. "
"Otherwise, the error is visible as logging message in your terminal."
msgstr ""

#: ../../sources/examples/gallery.rst:409
msgid ""
"**Showcase of Kivy Features** "
"(:doc:`demo/showcase/main.py<gen__demo__showcase__main__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:411
msgid ""
"This showcases many features of Kivy. You should see a menu bar across "
"the top with a demonstration area below. The first demonstration is the "
"accordion layout. You can see, but not edit, the kv language code for any"
" screen by pressing the bug or 'show source' icon. Scroll through the "
"demonstrations using the left and right icons in the top right or "
"selecting from the menu bar."
msgstr ""

#: ../../sources/examples/gallery.rst:419
msgid ""
"The file showcase.kv describes the main container, while each "
"demonstration pane is described in a separate .kv file in the "
"data/screens directory. The image data/background.png provides the "
"gradient background while the icons in data/icon directory are used in "
"the control bar. The file data/faust_github.jpg is used in the Scatter "
"pane. The icons are from `http://www.gentleface.com/free_icon_set.html` "
"and licensed as Creative Commons - Attribution and Non-commercial Use "
"Only; they sell a commercial license."
msgstr ""

#: ../../sources/examples/gallery.rst:428
msgid ""
"The file android.txt is used to package the application for use with the "
"Kivy Launcher Android application. For Android devices, you can "
"copy/paste this directory into /sdcard/kivy/showcase on your Android "
"device."
msgstr ""

#: ../../sources/examples/gallery.rst:438
msgid ""
"**Touch Tracer Line Drawing Demonstration** "
"(:doc:`demo/touchtracer/main.py<gen__demo__touchtracer__main__py>`)"
msgstr ""

#: ../../sources/examples/gallery.rst:440
msgid ""
"This demonstrates tracking each touch registered to a device. You should "
"see a basic background image. When you press and hold the mouse, you "
"should see cross-hairs with the coordinates written next to them. As you "
"drag, it leaves a trail. Additional information, like pressure, will be "
"shown if they are in your device's touch.profile."
msgstr ""

#: ../../sources/examples/gallery.rst:448
msgid ""
"A function `calculate_points` handling the points which will be drawn has"
" by default implemented a delay of 5 steps. To get more precise visual "
"results lower the value of the optional keyword argument `steps`."
msgstr ""

#: ../../sources/examples/gallery.rst:452
msgid ""
"This program specifies an icon, the file icon.png, in its App subclass. "
"It also uses the particle.png file as the source for drawing the trails "
"which are white on transparent. The file touchtracer.kv describes the "
"application."
msgstr ""

#: ../../sources/examples/gallery.rst:456
msgid ""
"The file android.txt is used to package the application for use with the "
"Kivy Launcher Android application. For Android devices, you can "
"copy/paste this directory into /sdcard/kivy/touchtracer on your Android "
"device."
msgstr ""

